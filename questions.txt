On Page -> 1

F. Zombiestime limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputPolycarp plays a computer game in a post-apocalyptic setting. The zombies have taken over the world, and Polycarp with a small team of survivors is defending against hordes trying to invade their base. The zombies are invading for $$$x$$$ minutes starting from minute $$$0$$$. There are $$$n$$$ entrances to the base, and every minute one zombie attempts to enter through every entrance.The survivors can defend the entrances against the zombies. There are two options:manually — shoot the zombies coming through a certain entrance;automatically — set up an electric fence on a certain entrance to fry the zombies.If an entrance is defended either or both ways during some minute, no zombie goes through.Every entrance is defended by a single dedicated survivor. The $$$i$$$-th entrance is defended manually from minute $$$l_i$$$ until minute $$$r_i$$$, non-inclusive — $$$[l_i, r_i)$$$.There are $$$k$$$ generators that can be used to defend the entrances automatically. Every entrance should be connected to exactly one generator, but a generator can be connected to multiple entrances (or even none of them). Each generator will work for exactly $$$m$$$consecutiveminutes. Polycarp can choose when to power on each generator independently of each other, the $$$m$$$ minute long interval should be fully inside the $$$[0, x)$$$ time interval.Polycarp is a weird gamer. He wants the game to be as difficult as possible for him. So he wants to connect each entrance to a generator and choose the time for each generator in such a way that as many zombies as possible enter the base. Please, help him to achieve that!InputThe first line contains four integers $$$n, k, x$$$ and $$$m$$$ ($$$1 \le k \le n \le 2000$$$; $$$1 \le m \le x \le 10^9$$$) — the number of entrances, the number of generators, the duration of the zombie invasion and the duration of all generators.The $$$i$$$-th of the next $$$n$$$ lines contains two integers $$$l_i$$$ and $$$r_i$$$ ($$$0 \le l_i < r_i \le x$$$) — the time interval the $$$i$$$-th entrance is defended manually.OutputPrint a single integer — the largest number of zombies that can enter the base after Polycarp connects each entrance to some generator and chooses the time for each generator.ExamplesInput3 3 10 3
0 2
1 7
4 7Output18Input3 2 10 3
0 2
1 7
4 7Output18Input3 1 10 3
0 2
1 7
4 7Output16Input2 1 20 6
11 13
2 14Output22Input5 3 7 4
4 6
0 3
4 7
1 5
2 7Output14Input6 3 9 4
3 9
4 9
2 5
0 5
6 9
2 3Output26



E. Combinatorics Problemtime limit per test4 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputRecall that the binomial coefficient $$$\binom{x}{y}$$$ is calculated as follows ($$$x$$$ and $$$y$$$ are non-negative integers):if $$$x < y$$$, then $$$\binom{x}{y} = 0$$$;otherwise, $$$\binom{x}{y} = \frac{x!}{y! \cdot (x-y)!}$$$.You are given an array $$$a_1, a_2, \dots, a_n$$$ and an integer $$$k$$$. You have to calculate a new array $$$b_1, b_2, \dots, b_n$$$, where$$$b_1 = (\binom{1}{k} \cdot a_1) \bmod 998244353$$$;$$$b_2 = (\binom{2}{k} \cdot a_1 + \binom{1}{k} \cdot a_2) \bmod 998244353$$$;$$$b_3 = (\binom{3}{k} \cdot a_1 + \binom{2}{k} \cdot a_2 + \binom{1}{k} \cdot a_3) \bmod 998244353$$$, and so on.Formally, $$$b_i = (\sum\limits_{j=1}^{i} \binom{i - j + 1}{k} \cdot a_j) \bmod 998244353$$$.Note that the array is given in a modified way, and you have to output it in a modified way as well.InputThe only line of the input contains six integers $$$n$$$, $$$a_1$$$, $$$x$$$, $$$y$$$, $$$m$$$ and $$$k$$$ ($$$1 \le n \le 10^7$$$; $$$0 \le a_1, x, y < m$$$; $$$2 \le m \le 998244353$$$; $$$1 \le k \le 5$$$).The array $$$[a_1, a_2, \dots, a_n]$$$ is generated as follows:$$$a_1$$$ is given in the input;for $$$2 \le i \le n$$$, $$$a_i = (a_{i-1} \cdot x + y) \bmod m$$$.OutputSince outputting up to $$$10^7$$$ integers might be too slow, you have to do the following:Let $$$c_i = b_i \cdot i$$$(without taking modulo $$$998244353$$$ after the multiplication). Print the integer $$$c_1 \oplus c_2 \oplus \dots \oplus c_n$$$, where $$$\oplus$$$ denotes the bitwise XOR operator.ExampleInput5 8 2 3 100 2Output1283



D2. Red-Blue Operations (Hard Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe only difference between easy and hard versions is the maximum values of $$$n$$$ and $$$q$$$.You are given an array, consisting of $$$n$$$ integers. Initially, all elements are red.You can apply the following operation to the array multiple times. During the $$$i$$$-th operation, you select an element of the array; then:if the element is red, it increases by $$$i$$$ and becomes blue;if the element is blue, it decreases by $$$i$$$ and becomes red.The operations are numbered from $$$1$$$, i. e. during the first operation some element is changed by $$$1$$$ and so on.You are asked $$$q$$$ queries of the following form:given an integer $$$k$$$, what can the largest minimum in the array be if you applyexactly$$$k$$$ operations to it?Note that the operations don't affect the array between queries, all queries are asked on the initial array $$$a$$$.InputThe first line contains two integers $$$n$$$ and $$$q$$$ ($$$1 \le n, q \le 2 \cdot 10^5$$$) — the number of elements in the array and the number of queries.The second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$1 \le a_i \le 10^9$$$).The third line contains $$$q$$$ integers $$$k_1, k_2, \dots, k_q$$$ ($$$1 \le k_j \le 10^9$$$).OutputFor each query, print a single integer — the largest minimum that the array can have after you applyexactly$$$k$$$ operations to it.ExamplesInput4 10
5 2 8 4
1 2 3 4 5 6 7 8 9 10Output3 4 5 6 7 8 8 10 8 12Input5 10
5 2 8 4 4
1 2 3 4 5 6 7 8 9 10Output3 4 5 6 7 8 9 8 11 8Input2 5
2 3
10 6 8 1 3Output10 7 8 3 3



D1. Red-Blue Operations (Easy Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe only difference between easy and hard versions is the maximum values of $$$n$$$ and $$$q$$$.You are given an array, consisting of $$$n$$$ integers. Initially, all elements are red.You can apply the following operation to the array multiple times. During the $$$i$$$-th operation, you select an element of the array; then:if the element is red, it increases by $$$i$$$ and becomes blue;if the element is blue, it decreases by $$$i$$$ and becomes red.The operations are numbered from $$$1$$$, i. e. during the first operation some element is changed by $$$1$$$ and so on.You are asked $$$q$$$ queries of the following form:given an integer $$$k$$$, what can the largest minimum in the array be if you applyexactly$$$k$$$ operations to it?Note that the operations don't affect the array between queries, all queries are asked on the initial array $$$a$$$.InputThe first line contains two integers $$$n$$$ and $$$q$$$ ($$$1 \le n, q \le 1000$$$) — the number of elements in the array and the number of queries.The second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$1 \le a_i \le 10^9$$$).The third line contains $$$q$$$ integers $$$k_1, k_2, \dots, k_q$$$ ($$$1 \le k_j \le 10^9$$$).OutputFor each query, print a single integer — the largest minimum that the array can have after you applyexactly$$$k$$$ operations to it.ExamplesInput4 10
5 2 8 4
1 2 3 4 5 6 7 8 9 10Output3 4 5 6 7 8 8 10 8 12Input5 10
5 2 8 4 4
1 2 3 4 5 6 7 8 9 10Output3 4 5 6 7 8 9 8 11 8Input2 5
2 3
10 6 8 1 3Output10 7 8 3 3



C. Contrast Valuetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputFor an array of integers $$$[a_1, a_2, \dots, a_n]$$$, let's call the value $$$|a_1-a_2|+|a_2-a_3|+\cdots+|a_{n-1}-a_n|$$$ thecontrastof the array. Note that the contrast of an array of size $$$1$$$ is equal to $$$0$$$.You are given an array of integers $$$a$$$. Your task is to build an array of $$$b$$$ in such a way that all the following conditions are met:$$$b$$$ is not empty, i.e there is at least one element;$$$b$$$ is a subsequence of $$$a$$$, i.e $$$b$$$ can be produced by deleting some elements from $$$a$$$ (maybe zero);the contrast of $$$b$$$ is equal to the contrast of $$$a$$$.What is the minimum possible size of the array $$$b$$$?InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$1 \le n \le 3 \cdot 10^5$$$) — the size of the array $$$a$$$.The second line contains $$$n$$$ integers $$$a_1, a_2, \cdot, a_n$$$ ($$$0 \le a_i \le 10^9$$$) — elements of the array itself.The sum of $$$n$$$ over all test cases doesn't exceed $$$3 \cdot 10^5$$$.OutputFor each test case, print a single integer — the minimum possible size of the array $$$b$$$.ExampleInput451 3 3 3 724 241 1 1 175 4 2 1 0 0 4Output2
2
1
3



B. Maximum Sumtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an array $$$a_1, a_2, \dots, a_n$$$, where all elements are different.You have to performexactly$$$k$$$ operations with it. During each operation, you doexactly oneof the following two actions (you choose which to do yourself):findtwo minimum elementsin the array, and delete them;findthe maximum elementin the array, and delete it.You have to calculate the maximum possible sum of elements in the resulting array.InputThe first line contains one integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.Each test case consists of two lines:the first line contains two integers $$$n$$$ and $$$k$$$ ($$$3 \le n \le 2 \cdot 10^5$$$; $$$1 \le k \le 99999$$$; $$$2k < n$$$) — the number of elements and operations, respectively.the second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$1 \le a_i \le 10^9$$$; all $$$a_i$$$ are different) — the elements of the array.Additional constraint on the input: the sum of $$$n$$$ does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, print one integer — the maximum possible sum of elements in the resulting array.ExampleInput65 12 5 1 10 65 22 5 1 10 63 11 2 36 115 22 12 10 13 116 215 22 12 10 13 115 1999999996 999999999 999999997 999999998 999999995Output21
11
3
62
46
3999999986NoteIn the first testcase, applying the first operation produces the following outcome:two minimums are $$$1$$$ and $$$2$$$; removing them leaves the array as $$$[5, 10, 6]$$$, with sum $$$21$$$;a maximum is $$$10$$$; removing it leaves the array as $$$[2, 5, 1, 6]$$$, with sum $$$14$$$.$$$21$$$ is the best answer.In the second testcase, it's optimal to first erase two minimums, then a maximum.



A. New Palindrometime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA palindrome is a string that reads the same from left to right as from right to left. For example,abacaba,aaaa,abba,racecarare palindromes.You are given a string $$$s$$$ consisting of lowercase Latin letters. The string $$$s$$$ is a palindrome.You have to check whether it is possible to rearrange the letters in it to getanotherpalindrome (not equal to the given string $$$s$$$).InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 1000$$$) — the number of test cases.The only line of each test case contains a string $$$s$$$ ($$$2 \le |s| \le 50$$$) consisting of lowercase Latin letters. This string is a palindrome.OutputFor each test case, printYESif it is possible to rearrange the letters in the given string to getanotherpalindrome. Otherwise, printNO.You may print each letter in any case (YES,yes,Yeswill all be recognized as positive answer,NO,noandnOwill all be recognized as negative answer).ExampleInput3codedocggaabaaOutputYES
NO
NONoteIn the first test case, it is possible to rearrange the letters in the palindromecodedocto obtain the stringocdedco, which is different from the given string, but also a palindrome.



H. Don't Blame Metime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputSadly, the problem setter couldn't think of an interesting story, thus he just asks you to solve the following problem.Given an array $$$a$$$ consisting of $$$n$$$ positive integers, count the number ofnon-emptysubsequences for which the bitwise $$$\mathsf{AND}$$$ of the elements in the subsequence has exactly $$$k$$$ set bits in its binary representation. The answer may be large, so output it modulo $$$10^9+7$$$.Recall that the subsequence of an array $$$a$$$ is a sequence that can be obtained from $$$a$$$ by removing some (possibly, zero) elements. For example, $$$[1, 2, 3]$$$, $$$[3]$$$, $$$[1, 3]$$$ are subsequences of $$$[1, 2, 3]$$$, but $$$[3, 2]$$$ and $$$[4, 5, 6]$$$ are not.Note that $$$\mathsf{AND}$$$ represents thebitwise AND operation.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 10^4$$$). The description of the test cases follows.The first line of each test case consists of two integers $$$n$$$ and $$$k$$$ ($$$1 \leq n \leq 2 \cdot 10^5$$$, $$$0 \le k \le 6$$$) — the length of the array and the number of set bits that the bitwise $$$\mathsf{AND}$$$ the counted subsequences should have in their binary representation.The second line of each test case consists of $$$n$$$ integers $$$a_i$$$ ($$$0 \leq a_i \leq 63$$$) — the array $$$a$$$.It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output a single integer — the number of subsequences that have exactly $$$k$$$ set bits in their bitwise $$$\mathsf{AND}$$$ value's binary representation. The answer may be large, so output it modulo $$$10^9+7$$$.ExampleInput65 11 1 1 1 14 00 1 2 35 15 5 7 4 21 2312 00 2 0 2 0 2 0 2 0 2 0 210 663 0 63 5 5 63 63 4 12 13Output31
10
10
1
4032
15



G. Hits Differenttime limit per test2.5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputIn a carnival game, there is a huge pyramid of cans with $$$2023$$$ rows, numbered in a regular pattern as shown.If can $$$9^2$$$ is hit initially, then all cans colored red in the picture above would fall.You throw a ball at the pyramid, and it hits a single can with number $$$n^2$$$. This causes all cans that are stacked on top of this can to fall (that is, can $$$n^2$$$ falls, then the cans directly above $$$n^2$$$ fall, then the cans directly above those cans, and so on). For example, the picture above shows the cans that would fall if can $$$9^2$$$ is hit.What is thesumof the numbers on all cans that fall? Recall that $$$n^2 = n \times n$$$.InputThe first line contains an integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases.The only line of each test case contains a single integer $$$n$$$ ($$$1 \leq n \leq 10^6$$$) — it means that the can you hit has label $$$n^2$$$.OutputFor each test case, output a single integer — the sum of the numbers on all cans that fall.Please note, that the answer for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language (likelong longfor C++). For all valid inputs, the answer will always fit into 64-bit integer type.ExampleInput1091234561014341000000Output156
1
5
10
21
39
46
146
63145186
58116199242129511NoteThe first test case is pictured in the statement. The sum of the numbers that fall is $$$$$$1^2 + 2^2 + 3^2 + 5^2 + 6^2 + 9^2 = 1 + 4 + 9 + 25 + 36 + 81 = 156.$$$$$$In the second test case, only the can labeled $$$1^2$$$ falls, so the answer is $$$1^2=1$$$.In the third test case, the cans labeled $$$1^2$$$ and $$$2^2$$$ fall, so the answer is $$$1^2+2^2=1+4=5$$$.In the fourth test case, the cans labeled $$$1^2$$$ and $$$3^2$$$ fall, so the answer is $$$1^2+3^2=1+9=10$$$.In the fifth test case, the cans labeled $$$1^2$$$, $$$2^2$$$, and $$$4^2$$$ fall, so the answer is $$$1^2+2^2+4^2=1+4+16=21$$$.



F. Forever Wintertime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputAsnowflakegraph is generated from two integers $$$x$$$ and $$$y$$$, both greater than $$$1$$$, as follows:Start with one central vertex.Connect $$$x$$$ new vertices to this central vertex.Connect $$$y$$$ new vertices toeachof these $$$x$$$ vertices.For example, below is a snowflake graph for $$$x=5$$$ and $$$y=3$$$.The snowflake graph above has a central vertex $$$15$$$, then $$$x=5$$$ vertices attached to it ($$$3$$$, $$$6$$$, $$$7$$$, $$$8$$$, and $$$20$$$), and then $$$y=3$$$ vertices attached to each of those.Given a snowflake graph, determine the values of $$$x$$$ and $$$y$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases.The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$2 \leq n \leq 200$$$; $$$1 \leq m \leq \min\left(1000, \frac{n(n-1)}{2}\right)$$$) — the number of vertices and edges in the graph, respectively.The next $$$m$$$ lines each contain two integers each $$$u$$$ and $$$v$$$ ($$$1 \leq u, v \leq n$$$, $$$u \neq v$$$) — the numbers of vertices connected by an edge. The graph does not contain multiple edges and self-loops.It is guaranteed that this graph is a snowflake graph for some integers $$$x$$$ and $$$y$$$ both greater than $$$1$$$.OutputFor each test case, on a separate line output the values of $$$x$$$ and $$$y$$$, in that order, separated by a space.ExampleInput321 2021 205 2013 201 311 310 34 819 814 89 712 717 718 616 62 66 157 158 1520 153 157 61 21 32 42 53 63 79 89 33 66 22 15 22 74 33 8Output5 3
2 2
2 3NoteThe first test case is pictured in the statement. Note that the output3 5isincorrect, since $$$x$$$ should be output before $$$y$$$.



E. The Lakestime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an $$$n \times m$$$ grid $$$a$$$ of non-negative integers. The value $$$a_{i,j}$$$ represents the depth of water at the $$$i$$$-th row and $$$j$$$-th column.A lake is a set of cells such that:each cell in the set has $$$a_{i,j} > 0$$$, andthere exists a path between any pair of cells in the lake by going up, down, left, or right a number of times and without stepping on a cell with $$$a_{i,j} = 0$$$.The volume of a lake is the sum of depths of all the cells in the lake.Find the largest volume of a lake in the grid.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^4$$$) — the number of test cases.The first line of each test case contains two integers $$$n, m$$$ ($$$1 \leq n, m \leq 1000$$$) — the number of rows and columns of the grid, respectively.Then $$$n$$$ lines follow each with $$$m$$$ integers $$$a_{i,j}$$$ ($$$0 \leq a_{i,j} \leq 1000$$$) — the depth of the water at each cell.It is guaranteed that the sum of $$$n \cdot m$$$ over all test cases does not exceed $$$10^6$$$.OutputFor each test case, output a single integer — the largest volume of a lake in the grid.ExampleInput53 31 2 03 4 00 0 51 103 30 1 11 0 11 1 15 51 1 1 1 11 0 0 0 11 0 5 0 11 0 0 0 11 1 1 1 15 51 1 1 1 11 0 0 0 11 1 4 0 11 0 0 0 11 1 1 1 1Output10
0
7
16
21



D. Gold Rushtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputInitially you have a single pile with $$$n$$$ gold nuggets. In an operation you can do the following:Take any pile and split it into two piles, so that one of the resulting piles has exactly twice as many gold nuggets as the other. (All piles should have an integer number of nuggets.)One possible move is to take a pile of size $$$6$$$ and split it into piles of sizes $$$2$$$ and $$$4$$$, which is valid since $$$4$$$ is twice as large as $$$2$$$.Can you make a pile withexactly$$$m$$$ gold nuggets using zero or more operations?InputThe first line contains an integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases.The only line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \leq n, m \leq 10^7$$$) — the starting and target pile sizes, respectively.OutputFor each test case, output "YES" if you can make a pile of size exactly $$$m$$$, and "NO" otherwise.You can output the answer in any case (for example, the strings "yEs", "yes", "Yes" and "YES" will be recognized as a positive answer).ExampleInput116 49 44 218 2727 427 227 101 13 15 1746001 2984004OutputYES
YES
NO
NO
YES
YES
NO
YES
YES
NO
NONoteThe first test case is pictured in the statement. We can make a pile of size $$$4$$$.In the second test case, we can perform the following operations: $$$\{\color{red}{9}\} \to \{\color{red}{6},3\} \to \{4,2,3\}$$$. The pile that is split apart is colored red before each operation.In the third test case, we can't perform a single operation.In the fourth test case, we can't end up with a larger pile than we started with.



C. Mr. Perfectly Finetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputVictor wants to become "Mr. Perfectly Fine". For that, he needs to acquire a certain set of skills. More precisely, he has $$$2$$$ skills he needs to acquire.Victor has $$$n$$$ books. Reading book $$$i$$$ takes him $$$m_i$$$ minutes and will give him some (possibly none) of the required two skills, represented by a binary string of length $$$2$$$.What is the minimum amount of time required so that Victor acquires all of the two skills?InputThe input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains an integer $$$n$$$ ($$$1 \leq n \leq 2 \cdot 10^5$$$) — the number of books available.Then $$$n$$$ lines follow. Line $$$i$$$ contains a positive integer $$$m_i$$$ ($$$1 \leq m_i \leq 2 \cdot 10^5$$$) and a binary string of length $$$2$$$, where $$$s_{i1} = 1$$$ if reading book $$$i$$$ acquires Victor skill $$$1$$$, and $$$s_{i1} = 0$$$ otherwise, and $$$s_{i2} = 1$$$ if reading book $$$i$$$ acquires Victor skill $$$2$$$, and $$$s_{i2} = 0$$$ otherwise.It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output a single integer denoting the minimum amount of minutes required for Victor to obtain both needed skills and $$$-1$$$ in case it's impossible to obtain the two skills after reading any amount of books.ExampleInput642 003 104 014 0053 013 015 012 109 1015 1139 118 017 1064 016 017 018 009 011 0048 009 109 118 11Output7
5
5
9
-1
8NoteIn the first test case, we can use books $$$2$$$ and $$$3$$$, with a total amount of minutes spent equal to $$$3 + 4 = 7$$$.In the second test case, we can use the books $$$1$$$ and $$$4$$$, with a total amount of minutes spent equal to $$$3 + 2 = 5$$$.In the third test case, we have only one option and that is reading book $$$1$$$ for a total amount of minutes spent equal to $$$5$$$.



B. Blank Spacetime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a binary array $$$a$$$ of $$$n$$$ elements, a binary array is an array consisting only of $$$0$$$s and $$$1$$$s.A blank space is a segment ofconsecutiveelements consisting of only $$$0$$$s.Your task is to find the length of the longest blank space.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$1 \leq n \leq 100$$$) — the length of the array.The second line of each test case contains $$$n$$$ space-separated integers $$$a_i$$$ ($$$0 \leq a_i \leq 1$$$) — the elements of the array.OutputFor each test case, output a single integer — the length of the longest blank space.ExampleInput551 0 0 1 040 1 1 11031 1 191 0 0 0 1 0 0 0 1Output2
1
1
0
3



A. Love Storytime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputTimur loves codeforces. That's why he has a string $$$s$$$ having length $$$10$$$ made containing only lowercase Latin letters. Timur wants to know how many indices string $$$s$$$differsfrom the string "codeforces".For example string $$$s =$$$ "coolforsez" differs from "codeforces" in $$$4$$$ indices, shown in bold.Help Timur by finding the number of indices where string $$$s$$$ differs from "codeforces".Note that you can't reorder the characters in the string $$$s$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases.Each test case is one line and contains the string $$$s$$$, consisting of exactly $$$10$$$ lowercase Latin characters.OutputFor each test case, output a single integer — the number of indices where string $$$s$$$ differs.ExampleInput5coolforsezcadafurciecodeforcespaiuforcesforcescodeOutput4
5
0
4
9



F. Fading into Fogtime limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an interactive problem.There are $$$n$$$ distinct hidden points with real coordinates on a two-dimensional Euclidean plane. In one query, you can ask some line $$$ax + by + c = 0$$$ and get the projections of all $$$n$$$ points to this line in some order. The given projections are not exact, please read the interaction section for more clarity.Using the minimum number of queries, guess all $$$n$$$ points and output them in some order. Here minimality means the minimum number of queries required to solve any possible test case with $$$n$$$ points.The hidden points are fixed in advance and do not change throughout the interaction. In other words, the interactor is not adaptive.A projection of point $$$A$$$ to line $$$ax + by + c = 0$$$ is the point on the line closest to $$$A$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 50$$$) — the number of test cases.The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$2 \leq n \leq 25$$$) — the number of hidden points.For each test case, it is guaranteed that for any pair of hidden points, their $$$x$$$ coordinates differ by at least $$$1$$$. Analogously, $$$y$$$ coordinates of any pair also differ by at least $$$1$$$.Coordinates $$$x$$$ and $$$y$$$ of all hidden points do not exceed $$$100$$$ by absolute value.InteractionTo query a line $$$ax + by + c = 0$$$ you should print "? a b c" where alla,bandcare real numbers up to $$$100$$$ by absolute value. For less precision issues numbers $$$a$$$ and $$$b$$$must satisfy the condition$$$|a| + |b| \geq 0.1$$$, where $$$|a|$$$ is the absolute value of $$$a$$$.As an answer to the query you will get $$$n$$$ points in the form "x_1 y_1 ... x_n y_n", where points $$$(x_i, y_i)$$$ are projections to the line $$$ax + by + c = 0$$$. It is guaranteed that each printed point is no more than $$$10^{-4}$$$ away from the real projection point. Every coordinate is printed with at most 9 decimal places.See the interaction example for more clarity.If you ask too many queries, you will getWrong answer.To output an answer you should print "! x_1 y_1 ... x_n y_n", where $$$(x_i, y_i)$$$ are coordinates of the hidden points. You could output the hidden points in any order. The answer would be considered correct if each of the printed points is no more than $$$10^{-3}$$$ away from the corresponding hidden point.Printing the answer doesn't count as a query.After printing a query or the answer, do not forget to output end of line and flush the output. Otherwise, you will getIdleness limit exceeded. To do this, use:fflush(stdout)orcout.flush()in C++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see the documentation for other languagesHacksTo make a hack, use the following test format.In the first line output a single integer $$$t$$$ ($$$1 \leq t \leq 50$$$) — the number of test cases.The description of the test cases follows.In the first line of each test case output a single integer $$$n$$$ ($$$2 \leq n \leq 25$$$). In the next $$$n$$$ lines output two rational numbers each. The numbers in line $$$i$$$ should correspond to $$$x_i$$$ and $$$y_i$$$ respectively. Printed points must comply with all constraints from the input section.ExampleInput1
2

1 1 2.5 1

1.500000001 1.500000000 2 2Output? 0 1 -1

? 0.2 -0.2 0

! 1 3 2.5 0.500000001NoteIn the sample the hidden points are $$$(1, 3)$$$ and $$$(2.5, 0.5)$$$A picture, which describes the first query:A picture, which describes the second query:



E. Walk the Runwaytime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA fashion tour consists of $$$m$$$ identical runway shows in different cities. There are $$$n$$$ models willing to participate in the tour, numbered from $$$1$$$ to $$$n$$$. People in different cities have different views on the fashion industry, so they rate each model differently. In particular, people in city $$$i$$$ rate model $$$j$$$ with rating $$$r_{i, j}$$$.You are to choose some number of $$$k$$$ models, and their order, let the chosen models have indices $$$j_1, j_2, \dots, j_k$$$ in the chosen order. In each city, these $$$k$$$ models will walk the runway one after another in this order. To make the show exciting, in each city, the ratings of models should be strictly increasing in the order of their performance. More formally, for any city $$$i$$$ and index $$$t$$$ ($$$2 \leq t \leq k$$$), the ratings must satisfy $$$r_{i,j_{t - 1}} < r_{i,j_t}$$$.After all, the fashion industry is all about money, so choosing model $$$j$$$ to participate in the tour profits you $$$p_j$$$ money. Compute the maximum total profit you can make by choosing the models and their order while satisfying all the requirements.InputThe first line contains two integers $$$m$$$ and $$$n$$$ ($$$1 \leq m \leq 500$$$, $$$1 \leq n \leq 5000$$$) — the number of shows and the number of models willing to participate respectively.The second line contains $$$n$$$ integers $$$p_j$$$ ($$$1 \leq p_j \leq 10^9$$$) — the profit you get inviting the $$$j$$$-th model to the tour.The next $$$m$$$ lines each contain $$$n$$$ integers. Line number $$$i$$$ contains $$$n$$$ integers $$$r_{i, j}$$$ ($$$1 \leq r_{i, j} \leq n$$$) — the ratings of models in city $$$i$$$.OutputOutput a single integer — the largest total amount of money you can get.ExamplesInput3 5
10 10 10 10 10
1 2 3 4 5
1 5 2 3 4
2 3 4 5 1Output30Input3 5
10 10 10 10 50
1 2 3 4 5
1 5 2 3 4
2 3 4 5 1Output50Input1 1
1000000000
1Output1000000000Input5 5
1000000000 1000000000 1000000000 1000000000 1000000000
5 4 3 2 1
5 4 3 2 1
5 4 3 2 1
5 4 3 2 1
5 4 3 2 1Output5000000000Input1 3
1 2 3
3 3 3Output3NoteIn the first example, there are $$$3$$$ invited models. The show consists of models in the order $$$[1, 3, 4]$$$.Then, the corresponding ratings in the cities are as follows:City $$$1$$$ — $$$[ 1, 3, 4 ]$$$.City $$$2$$$ — $$$[ 1, 2, 3 ]$$$.City $$$3$$$ — $$$[ 2, 4, 5 ]$$$.You can see that the ratings are increasing. So the total profit is $$$10 + 10 + 10 = 30$$$. It can be proven that we can't achieve a bigger profit.In the second example, we can invite the fifth model to the tour, which would result in a total profit of $$$50$$$. It can be proven that we can't achieve a bigger profit.In the third example, we invite the single model to the tour, which results in a total profit of $$$1\,000\,000\,000$$$.In the fourth test case, we can invite all the models and make the show in the order $$$[ 5, 4, 3, 2, 1 ]$$$. The total profit is $$$5 \cdot 1\,000\,000\,000 = 5\,000\,000\,000$$$.



D. Running Milestime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere is a street with $$$n$$$ sights, with sight number $$$i$$$ being $$$i$$$ miles from the beginning of the street. Sight number $$$i$$$ has beauty $$$b_i$$$. You want to start your morning jog $$$l$$$ miles and end it $$$r$$$ miles from the beginning of the street. By the time you run, you will see sights you run by (including sights at $$$l$$$ and $$$r$$$ miles from the start). You are interested in the $$$3$$$ most beautiful sights along your jog, but every mile you run, you get more and more tired.So choose $$$l$$$ and $$$r$$$, such that there are at least $$$3$$$ sights you run by, and the sum of beauties of the $$$3$$$ most beautiful sights minus the distance in miles you have to run is maximized. More formally, choose $$$l$$$ and $$$r$$$, such that $$$b_{i_1} + b_{i_2} + b_{i_3} - (r - l)$$$ is maximum possible, where $$$i_1, i_2, i_3$$$ are the indices of the three maximum elements in range $$$[l, r]$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^5$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$3 \leq n \leq 10^5$$$).The second line of each test case contains $$$n$$$ integers $$$b_i$$$ ($$$1 \leq b_i \leq 10^8$$$) — beauties of sights $$$i$$$ miles from the beginning of the street.It's guaranteed that the sum of all $$$n$$$ does not exceed $$$10^5$$$.OutputFor each test case output a single integer equal to the maximum value $$$b_{i_1} + b_{i_2} + b_{i_3} - (r - l)$$$ for some running range $$$[l, r]$$$.ExampleInput455 1 4 2 341 1 1 169 8 7 6 5 47100000000 1 100000000 1 100000000 1 100000000Output8
1
22
299999996NoteIn the first example, we can choose $$$l$$$ and $$$r$$$ to be $$$1$$$ and $$$5$$$. So we visit all the sights and the three sights with the maximum beauty are the sights with indices $$$1$$$, $$$3$$$, and $$$5$$$ with beauties $$$5$$$, $$$4$$$, and $$$3$$$, respectively. So the total value is $$$5 + 4 + 3 - (5 - 1) = 8$$$.In the second example, the range $$$[l, r]$$$ can be $$$[1, 3]$$$ or $$$[2, 4]$$$, the total value is $$$1 + 1 + 1 - (3 - 1) = 1$$$.



C. Dreaming of Freedomtime limit per test2.5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputBecause to take away a man's freedom of choice, even his freedom to make the wrong choice, is to manipulate him as though he were a puppet and not a person.— Madeleine L'EngleThere are $$$n$$$ programmers choosing their favorite algorithm amongst $$$m$$$ different choice options. Before the first round, all $$$m$$$ options are available. In each round, every programmer makes a vote for one of the remaining algorithms. After the round, only the algorithms with the maximum number of votes remain. The voting process ends when there is only one option left. Determine whether the voting process can continue indefinitely or no matter how people vote, they will eventually choose a single option after some finite amount of rounds?InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^5$$$) — the number of test cases.Each test case consists of a single line containing two integers $$$n$$$ and $$$m$$$ ($$$1 \leq n, m \leq 10^6$$$) — the number of people and choice options respectively.OutputFor each test case output "YES" if the programmers will eventually choose a single option, and "NO" otherwise.You may print each letter in any case (for example,YES,Yes,yes,yEswill all be recognized as a positive answer).ExampleInput53 24 25 31000000 10000001 1000000OutputYES
NO
YES
NO
YESNoteIn the first example, there are $$$8$$$ ways people could vote: $$$\{1|1|1, 1|1|2, 1|2|1, 1|2|2, 2|1|1, 2|1|2, 2|2|1, 2|2|2\}$$$.In cases $$$1$$$, $$$2$$$, $$$3$$$, and $$$5$$$, the programmers are left with the first algorithm, and in the remaining cases people are left with the second one, so the voting ends in one round in any case.In the second example, the programmers could always vote $$$1|1|2|2$$$. Both algorithms have the maximum number of votes and remain for the next round, so the voting never ends.



B. Lunatic Never Contenttime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou have an array $$$a$$$ of $$$n$$$ non-negative integers. Let's define $$$f(a, x) = [a_1 \bmod x, a_2 \bmod x, \dots, a_n \bmod x]$$$ for some positive integer $$$x$$$. Find the biggest $$$x$$$, such that $$$f(a, x)$$$ is a palindrome.Here, $$$a \bmod x$$$ is the remainder of the integer division of $$$a$$$ by $$$x$$$.An array is a palindrome if it reads the same backward as forward. More formally, an array $$$a$$$ of length $$$n$$$ is a palindrome if for every $$$i$$$ ($$$1 \leq i \leq n$$$) $$$a_i = a_{n - i + 1}$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^5$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$1 \leq n \leq 10^5$$$).The second line of each test case contains $$$n$$$ integers $$$a_i$$$ ($$$0 \leq a_i \leq 10^9$$$).It's guaranteed that the sum of all $$$n$$$ does not exceed $$$10^5$$$.OutputFor each test case output the biggest $$$x$$$, such that $$$f(a, x)$$$ is a palindrome. If $$$x$$$ can be infinitely large, output $$$0$$$ instead.ExampleInput421 283 0 1 2 0 3 2 1103100 1 1000000000Output1
2
0
999999900NoteIn the first example, $$$f(a, x = 1) = [0, 0]$$$ which is a palindrome.In the second example, $$$f(a, x = 2) = [1, 0, 1, 0, 0, 1, 0, 1]$$$ which is a palindrome.It can be proven that in the first two examples, no larger $$$x$$$ satisfies the condition.In the third example, $$$f(a, x) = [0]$$$ for any $$$x$$$, so we can choose it infinitely large, so the answer is $$$0$$$.



A. Trust Nobodytime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere is a group of $$$n$$$ people. Some of them might be liars, whoalwaystell lies. Other peoplealwaystell the truth. The $$$i$$$-th person says "There are at least $$$l_i$$$ liars amongst us". Determine if what people are saying is contradictory, or if it is possible. If it is possible, output the number of liars in the group. If there are multiple possible answers, output any one of them.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$1 \leq n \leq 100$$$).The second line of each test case contains $$$n$$$ integers $$$l_i$$$ ($$$0 \leq l_i \leq n$$$) — the number said by the $$$i$$$-th person.It's guaranteed that the sum of all $$$n$$$ does not exceed $$$10^4$$$.OutputFor each test case output a single integer. If what people are saying is contradictory, output $$$-1$$$. Otherwise, output the number of liars in the group. If there are multiple possible answers, output any one of them.ExampleInput721 222 220 0111055 5 3 3 565 3 6 6 3 5Output1
-1
0
-1
0
3
4NoteIn the first example, the only possible answer is that the second person is a liar, so the answer is $$$1$$$ liar.In the second example, it can be proven that we can't choose the liars so that all the requirements are satisfied.In the third example, everybody tells the truth, so the answer is $$$0$$$ liars.



B. LuoTianyi and the Tabletime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputLuoTianyi gave an array $$$b$$$ of $$$n \cdot m$$$ integers. She asks you to construct a table $$$a$$$ of size $$$n \times m$$$, filled with these $$$n \cdot m$$$ numbers, and each element of the array must be usedexactly once. Also she asked you to maximize the following value:$$$\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{m}\left(\max\limits_{1 \le x \le i, 1 \le y \le j}a_{x,y}-\min\limits_{1 \le x \le i, 1 \le y \le j}a_{x,y}\right)$$$This means that we consider $$$n \cdot m$$$ subtables with the upper left corner in $$$(1,1)$$$ and the bottom right corner in $$$(i, j)$$$ ($$$1 \le i \le n$$$, $$$1 \le j \le m$$$), for each such subtable calculate the difference of the maximum and minimum elements in it, then sum up all these differences. You should maximize the resulting sum.Help her find the maximal possible value, you don't need to reconstruct the table itself.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 200$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$2 \le n, m \le 100$$$) — the number of rows and columns of the table.The second line of each test case contains $$$n \cdot m$$$ integers $$$b_1, b_2, \ldots, b_{n\cdot m}$$$ ($$$-10^5 \le b_{i} \le 10^5$$$) — the numbers you can put in the table.Note, that integers in the array $$$b$$$can be negative.It is guaranteed that the sum of $$$n \cdot m$$$ over all test cases doesn't exceed $$$2\cdot 10^5$$$.OutputFor each test case, output a single integer — the maximal value, that can be obtained.ExampleInput52 21 3 1 42 2-1 -1 -1 -12 37 8 9 -3 10 83 24 8 -3 0 -7 14 3-32030 59554 16854 -85927 68060 -64460 -79547 90932 85063 82703 -12001 38762Output9
0
64
71
1933711NoteIn the first test case, the table is follows:4113In the subtable with the bottom right corner in $$$(1, 1)$$$, the difference of the maximal and minimal elements is $$$4 - 4 = 0$$$.In the subtable with the bottom right corner in $$$(1, 2)$$$, the difference of the maximal and minimal elements is $$$4 - 1 = 3$$$.In the subtable with the bottom right corner in $$$(2, 1)$$$, the difference of the maximal and minimal elements is $$$4 - 1 = 3$$$.In the subtable with the bottom right corner in $$$(2, 2)$$$, the difference of the maximal and minimal elements is $$$4 - 1 = 3$$$.Then the maximum possible value is $$$0+3+3+3=9$$$.In the second test case, all elements are equal, so all differences are $$$0$$$, and the answer is $$$0$$$.



A. LuoTianyi and the Palindrome Stringtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputLuoTianyi gives youa palindrome$$$^{\dagger}$$$ string $$$s$$$, and she wants you to find out the length of the longest non-empty subsequence$$$^{\ddagger}$$$ of $$$s$$$ which is not a palindrome string. If there is no such subsequence, output $$$-1$$$ instead.$$$^{\dagger}$$$ A palindrome is a string that reads the same backward as forward. For example, strings "z", "aaa", "aba", "abccba" are palindromes, but strings "codeforces", "reality", "ab" are not.$$$^{\ddagger}$$$ A string $$$a$$$ is a subsequence of a string $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) characters from $$$b$$$. For example, strings "a", "aaa", "bab" are subsequences of string "abaab", but strings "codeforces", "bbb", "h" are not.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 1000$$$) — the number of test cases. The description of test cases follows.The first and the only line of each test case contains a single string $$$s$$$ ($$$1 \le |s| \le 50$$$) consisting of lowercase English letters — the string that LuoTianyi gives you. It's guaranteed that $$$s$$$ is a palindrome string.OutputFor each test case, output a single integer — the length of the longest non-empty subsequence which is not a palindrome string. If there is no such subsequence, output $$$-1$$$.ExampleInput4abacabaaaacodeforcesecrofedoclolOutput6
-1
18
2NoteIn the first test case, "abcaba" is a subsequence of "abacaba" as we can delete the third letter of "abacaba" to get "abcaba", and "abcaba" is not a palindrome string. We can prove that "abcaba" is an example of the longest subsequences of "abacaba" that isn't palindrome, so that the answer is $$$6$$$.In the second test case, we can only get "a" and "aa", but they are all palindrome strings, so the answer is $$$-1$$$.



E. LuoTianyi and Cartridgetime limit per test3 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputLuoTianyi is watching the animeMade in Abyss. She finds that making a Cartridge is interesting. To describe the process of making a Cartridge more clearly, she abstracts the original problem and gives you the following problem.You are given a tree $$$T$$$ consisting of $$$n$$$ vertices. Each vertex has values $$$a_i$$$ and $$$b_i$$$ and each edge has values $$$c_j$$$ and $$$d_j$$$.Now you are aim to build atree$$$T'$$$ as follows:First, select $$$p$$$ vertices from $$$T$$$ ($$$p$$$ is a number chosen by yourself) as the vertex set $$$S'$$$ of $$$T'$$$.Next, select $$$p-1$$$ edges from $$$T$$$ one by one (you cannot select one edge more than once).May you have chosen the $$$j$$$-th edge connects vertices $$$x_j$$$ and $$$y_j$$$ with values $$$(c_j,d_j)$$$, then you can choose two vertices $$$u$$$ and $$$v$$$ in $$$S'$$$ that satisfy the edge $$$(x_j,y_j)$$$ is contained in the simple path from $$$u$$$ to $$$v$$$ in $$$T$$$, and link $$$u$$$ and $$$v$$$ in $$$T'$$$ by the edge with values $$$(c_j,d_j)$$$ ($$$u$$$ and $$$v$$$ shouldn't be contained in one connected component before in $$$T'$$$).A tree with three vertices, $$$\min(A,C)=1,B+D=7$$$, the cost is $$$7$$$.Selected vertices $$$2$$$ and $$$3$$$ as $$$S'$$$, used the edge $$$(1,2)$$$ with $$$c_j = 2$$$ and $$$d_j = 1$$$ to link this vertices, now $$$\min(A,C)=2,B+D=4$$$, the cost is $$$8$$$.Let $$$A$$$ be the minimum of values $$$a_i$$$ in $$$T'$$$ and $$$C$$$ be the minimum of values $$$c_i$$$ in $$$T'$$$. Let $$$B$$$ be the sum of $$$b_i$$$ in $$$T'$$$ and $$$D$$$ be the sum of values $$$d_i$$$ in $$$T'$$$. Let $$$\min(A, C) \cdot (B + D)$$$ be thecostof $$$T'$$$. You need to find the maximum possible cost of $$$T'$$$.InputThe first line contains one integer $$$n$$$ ($$$3\le n \le 2\cdot 10^5$$$) — the number of vertices in the tree $$$T$$$.The second line contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1\le a_i\le 2\cdot 10^5$$$), where the $$$i$$$-th integer represents the $$$a_i$$$ value of the $$$i$$$-th vertex.The third line contains $$$n$$$ integers $$$b_1, b_2, \ldots, b_n$$$ ($$$1\le b_i\le 2\cdot 10^5$$$), where the $$$i$$$-th integer represents the $$$b_i$$$ value of the $$$i$$$-th vertex.Then $$$n-1$$$ lines follow, the $$$j$$$-th of them contains four integers $$$x_j,y_j,c_j,d_j$$$ ($$$1\le x_j,y_j\le n,1\le c_j,d_j\le 2\cdot 10^5$$$) representing the edge $$$(x_j,y_j)$$$ and its values $$$c_j$$$ and $$$d_j$$$ respectively. It's guaranteed that edges form a tree.OutputPrint a single integer — the maximum possible cost of $$$T'$$$.ExamplesInput3
1 2 2
1 1 2
1 2 2 1
1 3 1 2Output8Input5
2 4 2 1 1
2 4 4 4 4
2 5 3 3
3 5 2 4
4 2 5 5
5 1 1 5Output35Input6
5 7 10 7 9 4
6 9 7 9 8 5
2 1 5 1
3 2 2 4
4 3 6 3
5 1 7 4
6 5 6 8Output216Input5
1000 1000 1 1000 1000
1000 1000 1 1000 1000
1 2 1 1
2 3 1000 1000
3 4 1000 1000
3 5 1000 1000Output7000000NoteThe tree from the first example is shown in the statement.The tree from the second example is shown below:$$$A = 1, B = 18, C = 1, D = 17$$$, so the cost is $$$\min(1,1) \cdot (18 + 17) = 35$$$.



D. LuoTianyi and the Functiontime limit per test7 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputLuoTianyi gives you an array $$$a$$$ of $$$n$$$ integers and the index begins from $$$1$$$.Define $$$g(i,j)$$$ as follows:$$$g(i,j)$$$ is the largest integer $$$x$$$ that satisfies $$$\{a_p:i\le p\le j\}\subseteq\{a_q:x\le q\le j\}$$$ while $$$i \le j$$$;and $$$g(i,j)=0$$$ while $$$i>j$$$.There are $$$q$$$ queries. For each query you are given four integers $$$l,r,x,y$$$, you need to calculate $$$\sum\limits_{i=l}^{r}\sum\limits_{j=x}^{y}g(i,j)$$$.InputThe first line contains two integers $$$n$$$ and $$$q$$$ ($$$1\le n,q\le 10^6$$$) — the length of the array $$$a$$$ and the number of queries.The second line contains $$$n$$$ integers $$$a_1,a_2,\ldots,a_n$$$ ($$$1\le a_i\le n$$$) — the elements of the array $$$a$$$.Next $$$q$$$ lines describe a query. The $$$i$$$-th line contains four integers $$$l,r,x,y$$$ ($$$1\le l\le r\le n, 1\le x\le y\le n$$$) — the integers in the $$$i$$$-th query.OutputPrint $$$q$$$ lines where $$$i$$$-th line contains one integer — the answer for the $$$i$$$-th query.ExamplesInput6 4
1 2 2 1 3 4
1 1 4 5
2 3 3 3
3 6 1 2
6 6 6 6Output6
6
0
6Input10 5
10 2 8 10 9 8 2 1 1 8
1 1 10 10
2 2 3 3
6 6 6 6
1 1 4 5
4 8 4 8Output4
2
6
4
80NoteIn the first example:In the first query, the answer is $$$g(1,4)+g(1,5)=3+3=6$$$.$$$x=1,2,3$$$ can satisfies $$$\{a_p:1\le p\le 4\}\subseteq\{a_q:x\le q\le 4\}$$$, $$$3$$$ is the largest integer so $$$g(1,4)=3$$$.In the second query, the answer is $$$g(2,3)+g(3,3)=3+3=6$$$.In the third query, the answer is $$$0$$$, because all $$$i > j$$$ and $$$g(i,j)=0$$$.In the fourth query, the answer is $$$g(6,6)=6$$$.In the second example:In the second query, the answer is $$$g(2,3)=2$$$.In the fourth query, the answer is $$$g(1,4)+g(1,5)=2+2=4$$$.



C. LuoTianyi and XOR-Treetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputLuoTianyi gives you a tree with values in its vertices, and the root of the tree is vertex $$$1$$$.In one operation, you can change the value in one vertex to any non-negative integer.Now you need to find the minimum number of operations you need to perform to make each path from the root to leaf$$$^{\dagger}$$$ has abitwise XORvalue of zero.$$$^{\dagger}$$$A leaf in a rooted tree is a vertex that has exactly one neighbor and is not a root.InputThe first line contains a single integer $$$n$$$ ($$$2 \le n \le 10^5$$$) — the number of vertices in the tree.The second line contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \le a_i \le 10^9$$$), the $$$i$$$-th number represents the value in the $$$i$$$-th vertex.Next $$$n−1$$$ lines describe the edges of the tree. The $$$i$$$-th line contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \le u_i,v_i \le n, u_i \neq v_i$$$) — the vertices connected by an edge of the tree. It's guaranteed that the given edges form a tree.OutputPrint a single integer — the minimum number of operations.ExamplesInput6
3 5 7 5 8 4
1 2
1 3
1 4
3 5
4 6Output3Input8
7 10 7 16 19 9 16 11
1 5
4 2
6 5
5 2
7 2
2 3
3 8Output3Input4
1 2 1 2
1 2
2 3
4 3Output0Input9
4 3 6 1 5 5 5 2 7
1 2
2 3
4 1
4 5
4 6
4 7
8 1
8 9Output2NoteThe tree in the first example:If we change the value in the vertex $$$2$$$ to $$$3$$$, the value in the vertex $$$5$$$ to $$$4$$$, and the value in the vertex $$$6$$$ to $$$6$$$, then the tree will be ok.The bitwise XOR from the root to the leaf $$$2$$$ will be $$$3 \oplus 3=0$$$.The bitwise XOR from the root to the leaf $$$5$$$ will be $$$4 \oplus 7 \oplus 3=0$$$.The bitwise XOR from the root to the leaf $$$6$$$ will be $$$6 \oplus 5 \oplus 3=0$$$.The tree in the second example:If we change the value in the vertex $$$2$$$ to $$$4$$$, the value in the vertex $$$3$$$ to $$$27$$$, and the value in the vertex $$$6$$$ to $$$20$$$, then the tree will be ok.The bitwise XOR from the root to the leaf $$$6$$$ will be $$$20 \oplus 19 \oplus 7=0$$$.The bitwise XOR from the root to the leaf $$$8$$$ will be $$$11 \oplus 27 \oplus 4 \oplus 19 \oplus 7=0$$$.The bitwise XOR from the root to the leaf $$$4$$$ will be $$$16 \oplus 4 \oplus 19 \oplus 7=0$$$.The bitwise XOR from the root to the leaf $$$7$$$ will be $$$16 \oplus 4 \oplus 19 \oplus 7=0$$$.In the third example, the only leaf is the vertex $$$4$$$ and the bitwise XOR on the path to it is $$$1 \oplus 2 \oplus 1 \oplus 2 = 0$$$, so we don't need to change values.In the fourth example, we can change the value in the vertex $$$1$$$ to $$$5$$$, and the value in the vertex $$$4$$$ to $$$0$$$.Here $$$\oplus$$$ denotes the bitwise XOR operation.



B2. LuoTianyi and the Floating Islands (Hard Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the hard version of the problem. The only difference is that in this version $$$k\le n$$$. You can make hacks only if both versions of the problem are solved.Chtholly and the floating islands.LuoTianyi now lives in a world with $$$n$$$ floating islands. The floating islands are connected by $$$n-1$$$ undirected air routes, and any two of them can reach each other by passing the routes. That means, the $$$n$$$ floating islands form a tree.One day, LuoTianyi wants to meet her friends: Chtholly, Nephren, William, .... Totally, she wants to meet $$$k$$$ people. She doesn't know the exact positions of them, but she knows that they are inpairwise distinctislands. She define an island isgoodif and only if the sum of the distances$$$^{\dagger}$$$ from it to the islands with $$$k$$$ people is the minimal among all the $$$n$$$ islands.Now, LuoTianyi wants to know that, if the $$$k$$$ people are randomly set in $$$k$$$ distinct of the $$$n$$$ islands, then what is the expect number of the good islands? You just need to tell her the expect number modulo $$$10^9+7$$$.$$$^{\dagger}$$$The distance between two islands is the minimum number of air routes you need to take to get from one island to the other.InputThe first line contains two integers $$$n$$$ and $$$k$$$ ($$$1\le k \le n \le 2\cdot 10^5$$$) — the number of the islands and people respectively.Next $$$n−1$$$ lines describe the air routes. The $$$i$$$-th of them contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \le u_i,v_i \le n, u_i \neq v_i$$$) — the islands connected by the $$$i$$$-th air route.OutputPrint a single integer — the expect number of the good islands modulo $$$10^9 + 7$$$.Formally, let $$$M = 10^9 + 7$$$. It can be shown that the answer can be expressed as an irreducible fraction $$$\frac{p}{q}$$$, where $$$p$$$ and $$$q$$$ are integers and $$$q \not \equiv 0$$$ ($$$\operatorname{mod} M$$$). Output the integer equal to $$$p \cdot q^{-1}$$$ $$$\operatorname{mod} M$$$. In other words, output such an integer $$$x$$$ that $$$0 \le x < M$$$ and $$$x \cdot q \equiv p$$$ ($$$\operatorname{mod} M$$$).ExamplesInput4 2
1 2
2 3
3 4Output666666674Input5 5
1 2
2 3
3 4
3 5Output1NoteIn the first example the air routes form the following tree:If the people are in the islands $$$1$$$ and $$$2$$$, then islands $$$1$$$ and $$$2$$$ will be good.The sum of the distances from island $$$1$$$ or $$$2$$$ to all the people is $$$1+0=1$$$, which is the minimal. While the sum of the distances from island $$$3$$$ to all the people is $$$2+1=3$$$, which is greater than $$$1$$$.Like this, when the people are in island $$$1$$$ and $$$3$$$, then islands $$$1,2$$$ and $$$3$$$ will be good.When the people are in islands $$$1$$$ and $$$4$$$, then islands $$$1,2,3$$$ and $$$4$$$ will be good.When the people are in islands $$$2$$$ and $$$3$$$, then islands $$$2$$$ and $$$3$$$ will be good.When the people are in islands $$$2$$$ and $$$4$$$, then islands $$$2,3$$$ and $$$4$$$ will be good.When the people are in islands $$$3$$$ and $$$4$$$, then islands $$$3$$$ and $$$4$$$ will be good.So the expect of the number of the good islands is $$$\frac{16}{6}$$$, which equals to $$$666666674$$$ modulo $$$10^9+7$$$.In the second example the air routes form the following tree:We can see that there is one person in each island, and only the island $$$3$$$ is good. So the expect number is $$$1$$$.



B1. LuoTianyi and the Floating Islands (Easy Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the easy version of the problem. The only difference is that in this version $$$k\le\min(n,3)$$$. You can make hacks only if both versions of the problem are solved.Chtholly and the floating islands.LuoTianyi now lives in a world with $$$n$$$ floating islands. The floating islands are connected by $$$n-1$$$ undirected air routes, and any two of them can reach each other by passing the routes. That means, the $$$n$$$ floating islands form a tree.One day, LuoTianyi wants to meet her friends: Chtholly, Nephren, William, .... Totally, she wants to meet $$$k$$$ people. She doesn't know the exact positions of them, but she knows that they are inpairwise distinctislands. She define an island isgoodif and only if the sum of the distances$$$^{\dagger}$$$ from it to the islands with $$$k$$$ people is the minimal among all the $$$n$$$ islands.Now, LuoTianyi wants to know that, if the $$$k$$$ people are randomly set in $$$k$$$ distinct of the $$$n$$$ islands, then what is the expect number of the good islands? You just need to tell her the expect number modulo $$$10^9+7$$$.$$$^{\dagger}$$$The distance between two islands is the minimum number of air routes you need to take to get from one island to the other.InputThe first line contains two integers $$$n$$$ and $$$k$$$ ($$$1\le k \le \min(n,3), 1\le n \le 2\cdot 10^5$$$) — the number of the islands and people respectively.Next $$$n−1$$$ lines describe the air routes. The $$$i$$$-th of them contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \le u_i,v_i \le n, u_i \neq v_i$$$) — the islands connected by the $$$i$$$-th air route.OutputPrint a single integer — the expect number of the good islands modulo $$$10^9 + 7$$$.Formally, let $$$M = 10^9 + 7$$$. It can be shown that the answer can be expressed as an irreducible fraction $$$\frac{p}{q}$$$, where $$$p$$$ and $$$q$$$ are integers and $$$q \not \equiv 0$$$ ($$$\operatorname{mod} M$$$). Output the integer equal to $$$p \cdot q^{-1}$$$ $$$\operatorname{mod} M$$$. In other words, output such an integer $$$x$$$ that $$$0 \le x < M$$$ and $$$x \cdot q \equiv p$$$ ($$$\operatorname{mod} M$$$).ExamplesInput4 2
1 2
2 3
3 4Output666666674Input5 1
1 2
2 3
3 4
3 5Output1NoteIn the first example the air routes form the following tree:If the people are in the islands $$$1$$$ and $$$2$$$, then islands $$$1$$$ and $$$2$$$ will be good.The sum of the distances from island $$$1$$$ or $$$2$$$ to all the people is $$$1+0=1$$$, which is the minimal. While the sum of the distances from island $$$3$$$ to all the people is $$$2+1=3$$$, which is greater than $$$1$$$.Like this, when the people are in island $$$1$$$ and $$$3$$$, then islands $$$1,2$$$ and $$$3$$$ will be good.When the people are in islands $$$1$$$ and $$$4$$$, then islands $$$1,2,3$$$ and $$$4$$$ will be good.When the people are in islands $$$2$$$ and $$$3$$$, then islands $$$2$$$ and $$$3$$$ will be good.When the people are in islands $$$2$$$ and $$$4$$$, then islands $$$2,3$$$ and $$$4$$$ will be good.When the people are in islands $$$3$$$ and $$$4$$$, then islands $$$3$$$ and $$$4$$$ will be good.So the expect of the number of the good islands is $$$\frac{16}{6}$$$, which equals to $$$666666674$$$ modulo $$$10^9+7$$$.In the second example the air routes form the following tree:There is always the only good island, so the expected number is $$$1$$$.



A. LuoTianyi and the Showtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere are $$$n$$$ people taking part in a show about VOCALOID. They will sit in the row of seats, numbered $$$1$$$ to $$$m$$$ from left to right.The $$$n$$$ people come and sit in order. Each person occupies a seat in one of three ways:Sit in the seat next to the left of the leftmost person who is already sitting, or if seat $$$1$$$ is taken, then leave the show. If there is no one currently sitting, sit in seat $$$m$$$.Sit in the seat next to the right of the rightmost person who is already sitting, or if seat $$$m$$$ is taken, then leave the show. If there is no one currently sitting, sit in seat $$$1$$$.Sit in the seat numbered $$$x_i$$$. If this seat is taken, then leave the show.Now you want to know what is the maximum number of people that can take a seat, if you can let people into the show in any order?InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \le n, m \le 10^5$$$) — the number of people and the number of seats.The second line of each test case contains $$$n$$$ integers $$$x_1, x_2, \ldots, x_n$$$ ($$$-2 \le x_i \le m$$$, $$$x_i \ne 0$$$), the $$$i$$$-th of which describes the way in which the $$$i$$$-th person occupies a seat:If $$$x_i=-1$$$, then $$$i$$$-th person takes the seat in the first way.If $$$x_i=-2$$$, then $$$i$$$-th person takes the seat in the second way.If $$$x_i > 0$$$, then the $$$i$$$-th person takes a seat in the third way, i.e. he wants to sit in the seat with the number $$$x_i$$$ or leave the show if it is occupied..It is guaranteed that sum of $$$n$$$ and the sum of $$$m$$$ over all test cases don't exceed $$$10^5$$$.OutputFor each test case output a single integer — the maximum number of people who can occupy a seat.ExampleInput103 105 5 54 61 -2 -2 15 7-1 -1 4 -2 -26 75 -2 -2 -2 -2 -26 6-1 1 4 5 -1 46 8-1 -1 -1 3 -1 -26 75 -1 -2 -2 -2 -23 1-2 -2 12 55 -21 2-1Output1
3
5
6
5
5
5
1
2
1NoteIn the first test case, all the people want to occupy the $$$5$$$ seat, so only $$$1$$$ people can occupy the seat.In the second test case, we can let people in order $$$1, 2, 3, 4$$$, then all but the last person can take a seat.In the third test case, we can let people into the show in that order:Let the third person in:–––3–––Let the fourth person in:–––34––Let the fifth person in:–––345–Let the first person in:––1345–Let the second person in:–21345–Thus, all $$$5$$$ people took seats.In the fifth test case, we can let people into the show in this order:Let the fourth person in:––––4–Let the third person in:–––34–Let the sixth person in, he'll leave the show because he takes the third seat the third way and has to sit in the $$$4$$$ seat, but it's already taken:–––34–Let the fifth person in:––534–Let the first person in:–1534–Let the second person in:21534–Thus, $$$5$$$ of people took seats.In the seventh test case, we can let people into the show in this order:Let the third person in:3––––––Let the fourth person in:34–––––Let the fifth person in:345––––Let the sixth person in:3456–––Let the first person in:34561––Let the second person in, he will leave the show because he occupies the first way, but the $$$1$$$ seat is taken:34561––Thus, $$$5$$$ people took seats.



F. Random Walktime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a tree consisting of $$$n$$$ vertices and $$$n - 1$$$ edges, and each vertex $$$v$$$ has a counter $$$c(v)$$$ assigned to it.Initially, there is a chip placed at vertex $$$s$$$ and all counters, except $$$c(s)$$$, are set to $$$0$$$; $$$c(s)$$$ is set to $$$1$$$.Your goal is to place the chip at vertex $$$t$$$. You can achieve it by a series of moves. Suppose right now the chip is placed at the vertex $$$v$$$. In one move, you do the following:choose one of neighbors $$$to$$$ of vertex $$$v$$$uniformly at random($$$to$$$ is neighbor of $$$v$$$ if and only if there is an edge $$$\{v, to\}$$$ in the tree);move the chip to vertex $$$to$$$ and increase $$$c(to)$$$ by $$$1$$$;You'll repeat the move above until you reach the vertex $$$t$$$.For each vertex $$$v$$$ calculate theexpected valueof $$$c(v)$$$ modulo $$$998\,244\,353$$$.InputThe first line contains three integers $$$n$$$, $$$s$$$ and $$$t$$$ ($$$2 \le n \le 2 \cdot 10^5$$$; $$$1 \le s, t \le n$$$; $$$s \neq t$$$) — number of vertices in the tree and the starting and finishing vertices.Next $$$n - 1$$$ lines contain edges of the tree: one edge per line. The $$$i$$$-th line contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \le u_i, v_i \le n$$$; $$$u_i \neq v_i$$$), denoting the edge between the nodes $$$u_i$$$ and $$$v_i$$$.It's guaranteed that the given edges form a tree.OutputPrint $$$n$$$ numbers:expected valuesof $$$c(v)$$$ modulo $$$998\,244\,353$$$ for each $$$v$$$ from $$$1$$$ to $$$n$$$.Formally, let $$$M = 998\,244\,353$$$. It can be shown that the answer can be expressed as an irreducible fraction $$$\frac{p}{q}$$$, where $$$p$$$ and $$$q$$$ are integers and $$$q \not \equiv 0 \pmod{M}$$$. Output the integer equal to $$$p \cdot q^{-1} \bmod M$$$. In other words, output such an integer $$$x$$$ that $$$0 \le x < M$$$ and $$$x \cdot q \equiv p \pmod{M}$$$.ExamplesInput3 1 3
1 2
2 3Output2 2 1Input4 1 3
1 2
2 3
1 4Output4 2 1 2Input8 2 6
6 4
6 2
5 4
3 1
2 3
7 4
8 2Output1 3 2 0 0 1 0 1NoteThe tree from the first example is shown below:Let's calculate expected value $$$E[c(1)]$$$:$$$P(c(1) = 0) = 0$$$, since $$$c(1)$$$ is set to $$$1$$$ from the start.$$$P(c(1) = 1) = \frac{1}{2}$$$, since there is the only one series of moves that leads $$$c(1) = 1$$$. It's $$$1 \rightarrow 2 \rightarrow 3$$$ with probability $$$1 \cdot \frac{1}{2}$$$.$$$P(c(1) = 2) = \frac{1}{4}$$$: the only path is $$$1 \rightarrow_{1} 2 \rightarrow_{0.5} 1 \rightarrow_{1} 2 \rightarrow_{0.5} 3$$$.$$$P(c(1) = 3) = \frac{1}{8}$$$: the only path is $$$1 \rightarrow_{1} 2 \rightarrow_{0.5} 1 \rightarrow_{1} 2 \rightarrow_{0.5} 1 \rightarrow_{1} 2 \rightarrow_{0.5} 3$$$.$$$P(c(1) = i) = \frac{1}{2^i}$$$ in general case.As a result, $$$E[c(1)] = \sum\limits_{i=1}^{\infty}{i \frac{1}{2^i}} = 2$$$.Image of tree in second testImage of tree in third test



E. Removing Graphtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputAlice and Bob are playing a game on a graph. They have an undirected graph without self-loops and multiple edges. All vertices of the graph havedegree equal to $$$2$$$. The graph may consist of several components. Note that if such graph has $$$n$$$ vertices, it will have exactly $$$n$$$ edges.Alice and Bob take turn. Alice goes first. In each turn, the player can choose $$$k$$$ ($$$l \le k \le r$$$; $$$l < r$$$) vertices that forma connected subgraphand erase these vertices from the graph, including all incident edges.The player who can't make a step loses.For example, suppose they are playing on the given graph with given $$$l = 2$$$ and $$$r = 3$$$:A valid vertex set for Alice to choose at the first move is one of the following:$$$\{1, 2\}$$$$$$\{1, 3\}$$$$$$\{2, 3\}$$$$$$\{4, 5\}$$$$$$\{4, 6\}$$$$$$\{5, 6\}$$$$$$\{1, 2, 3\}$$$$$$\{4, 5, 6\}$$$Suppose, Alice chooses subgraph $$$\{4, 6\}$$$.Then a valid vertex set for Bob to choose at the first move is one of the following:$$$\{1, 2\}$$$$$$\{1, 3\}$$$$$$\{2, 3\}$$$$$$\{1, 2, 3\}$$$Suppose, Bob chooses subgraph $$$\{1, 2, 3\}$$$.Alice can't make a move, so she loses.You are given a graph of size $$$n$$$ and integers $$$l$$$ and $$$r$$$. Who will win if both Alice and Bob play optimally.InputThe first line contains three integers $$$n$$$, $$$l$$$ and $$$r$$$ ($$$3 \le n \le 2 \cdot 10^5$$$; $$$1 \le l < r \le n$$$) — the number of vertices in the graph, and the constraints on the number of vertices Alice or Bob can choose in one move.Next $$$n$$$ lines contains edges of the graph: one edge per line. The $$$i$$$-th line contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \le u_i, v_i \le n$$$; $$$u_i \neq v_i$$$) — description of the $$$i$$$-th edge.It's guaranteed that the degree of each vertex of the given graph is equal to $$$2$$$.OutputPrintAlice(case-insensitive) if Alice wins, orBobotherwise.ExamplesInput6 2 3
1 2
2 3
3 1
4 5
5 6
6 4OutputBobInput6 1 2
1 2
2 3
3 1
4 5
5 6
6 4OutputBobInput12 1 3
1 2
2 3
3 1
4 5
5 6
6 7
7 4
8 9
9 10
10 11
11 12
12 8OutputAliceNoteIn the first test the same input as in legend is shown.In the second test the same graph as in legend is shown, but with $$$l = 1$$$ and $$$r = 2$$$.



D. Unique Palindromestime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputApalindromeis a string that reads the same backwards as forwards. For example, the stringabcbais palindrome, while the stringabcais not.Let $$$p(t)$$$ be the number ofunique palindromic substringsof string $$$t$$$, i. e. the number of substrings $$$t[l \dots r]$$$ that are palindromes themselves. Even if some substring occurs in $$$t$$$ several times, it's counted exactly once. (The whole string $$$t$$$ is also counted as a substring of $$$t$$$).For example, string $$$t$$$ $$$=$$$abcbbcabcbhas $$$p(t) = 6$$$ unique palindromic substrings:a,b,c,bb,bcbandcbbc.Now, let's define $$$p(s, m) = p(t)$$$ where $$$t = s[1 \dots m]$$$. In other words, $$$p(s, m)$$$ is the number of palindromic substrings in the prefix of $$$s$$$ of length $$$m$$$. For example, $$$p($$$abcbbcabcb$$$, 5)$$$ $$$=$$$ $$$p($$$abcbb$$$) = 5$$$.You are given an integer $$$n$$$ and $$$k$$$ "conditions" ($$$k \le 20$$$). Let's say that string $$$s$$$, consisting of $$$n$$$ lowercase Latin letters, isgoodif all $$$k$$$ conditions are satisfiedat the same time. A condition is a pair $$$(x_i, c_i)$$$ and have the following meaning:$$$p(s, x_i) = c_i$$$, i. e. a prefix of $$$s$$$ of length $$$x_i$$$ contains exactly $$$c_i$$$ unique palindromic substrings.Find a good string $$$s$$$ or report that such $$$s$$$ doesn't exist.Look in Notes if you need further clarifications.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 10^4$$$). The description of the test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$3 \le n \le 2 \cdot 10^5$$$; $$$1 \le k \le 20$$$) — length of good string $$$s$$$ and number of conditions.The second line of each test case contains $$$k$$$ integers $$$x_1, x_2, \dots, x_k$$$ ($$$3 \le x_1 < x_2 < \dots < x_k = n$$$) where $$$x_i$$$ is the length of the prefix in the $$$i$$$-th condition.The third line of each test case contains $$$k$$$ integers $$$c_1, c_2, \dots, c_k$$$ ($$$3 \le c_1 \le c_2 \le \dots \le c_k \le \min{\left(10^9, \frac{(n + 1) n}{2} \right)}$$$) where $$$c_i$$$ is the number of palindromic substrings in the $$$i$$$-th condition.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10 ^ 5$$$.OutputFor each test case, if there is no good string $$$s$$$ of length $$$n$$$ that satisfies all conditions, printNO.Otherwise, printYESand a string $$$s$$$ of length $$$n$$$, consisting of lowercase Latin letters, that satisfies all conditions. If there are multiple answers, print any of them.ExampleInput710 25 105 63 1334 23 43 34 23 43 44 14510 34 6 104 5 810 44 6 7 104 5 7 8OutputYES
abcbbcabcb
YES
foo
YES
ayda
YES
wada
NO
YES
abcbcacbab
NONoteIn the first test case, string $$$s$$$ $$$=$$$abcbbcabcbsatisfies $$$k = 2$$$ conditions:$$$p(s, x_1) = p(s, 5) =$$$ $$$p($$$abcbb$$$) = 5 = s_1$$$. Palindromic substrings area,b,c,bbandbcb.$$$p(s, x_2) = p(s, 10) =$$$ $$$p($$$abcbbcabcb$$$) = 6 = s_2$$$. Palindromic substrings are the same as above, and one extra substringcbbc.In the second test case, stringfoosatisfies $$$k = 1$$$ condition:$$$p($$$foo$$$) = 3$$$. Palindromic substrings aref,oandoo.There are other possible answers.In the third test case, stringaydasatisfies $$$k = 2$$$ conditions:$$$p($$$ayd$$$) = 3$$$. Palindromic substrings area,yandd.$$$p($$$ayda$$$) = 3$$$. Palindromic substrings are the same.In the fourth test case, stringwadasatisfies $$$k = 2$$$ conditions:$$$p($$$wad$$$) = 3$$$. Palindromic substrings arew,aandd.$$$p($$$wada$$$) = 4$$$. Palindromic substrings are the same, and one extra substringada.In the fifth test case, it can be proven that there is no string of length $$$4$$$ which has $$$5$$$ palindromic substrings.In the sixth test case, stringabcbcacbabsatisfies $$$k = 3$$$ conditions:$$$p($$$abcb$$$) = 4$$$. Palindromic substrings area,b,candbcb.$$$p($$$abcbca$$$) = 5$$$. Palindromic substrings are the same, and one extra substringcbc.$$$p($$$abcbcacbab$$$) = 8$$$. Palindromic substrings are the same, and three extra substringscac,babandbcacb.



C. Strongly Compositetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputAprimenumber is an integer greater than $$$1$$$, which has exactly two divisors. For example, $$$7$$$ is a prime, since it has two divisors $$$\{1, 7\}$$$. Acompositenumber is an integer greater than $$$1$$$, which has more than two different divisors.Note that the integer $$$1$$$ is neither prime nor composite.Let's look at some composite number $$$v$$$. It has several divisors: some divisors are prime, others are composite themselves. If the number of prime divisors of $$$v$$$ isless or equalto the number of composite divisors, let's name $$$v$$$ asstrongly composite.For example, number $$$12$$$ has $$$6$$$ divisors: $$$\{1, 2, 3, 4, 6, 12\}$$$, two divisors $$$2$$$ and $$$3$$$ are prime, while three divisors $$$4$$$, $$$6$$$ and $$$12$$$ are composite. So, $$$12$$$ is strongly composite. Other examples of strongly composite numbers are $$$4$$$, $$$8$$$, $$$9$$$, $$$16$$$ and so on.On the other side, divisors of $$$15$$$ are $$$\{1, 3, 5, 15\}$$$: $$$3$$$ and $$$5$$$ are prime, $$$15$$$ is composite. So, $$$15$$$ is not a strongly composite. Other examples are: $$$2$$$, $$$3$$$, $$$5$$$, $$$6$$$, $$$7$$$, $$$10$$$ and so on.You are given $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$a_i > 1$$$). You have to build an array $$$b_1, b_2, \dots, b_k$$$ such that following conditions are satisfied:Product of all elements of array $$$a$$$ is equal to product of all elements of array $$$b$$$: $$$a_1 \cdot a_2 \cdot \ldots \cdot a_n = b_1 \cdot b_2 \cdot \ldots \cdot b_k$$$;All elements of array $$$b$$$ are integers greater than $$$1$$$ andstrongly composite;The size $$$k$$$ of array $$$b$$$ is the maximum possible.Find the size $$$k$$$ of array $$$b$$$, or report, that there is no array $$$b$$$ satisfying the conditions.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 1000$$$). The description of the test cases follows.The first line of each test case contains one integer $$$n$$$ ($$$1 \le n \le 1000$$$) — the size of the array $$$a$$$.The second line of each test case contains $$$n$$$ integer $$$a_1, a_2, \dots a_n$$$ ($$$2 \le a_i \le 10^7$$$) — the array $$$a$$$ itself.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$1000$$$.OutputFor each test case, print the size $$$k$$$ of array $$$b$$$, or $$$0$$$, if there is no array $$$b$$$ satisfying the conditions.ExampleInput823 633 4 522 333 10 14225 301108093 3 3 5 5 5 7 7 72012 15 2 2 2 2 2 3 3 3 17 21 21 21 30 6 6 33 31 39Output1
1
0
2
2
3
4
15NoteIn the first test case, we can get array $$$b = [18]$$$: $$$a_1 \cdot a_2 = 18 = b_1$$$; $$$18$$$ is strongly composite number.In the second test case, we can get array $$$b = [60]$$$: $$$a_1 \cdot a_2 \cdot a_3 = 60 = b_1$$$; $$$60$$$ is strongly composite number.In the third test case, there is no array $$$b$$$ satisfying the conditions.In the fourth test case, we can get array $$$b = [4, 105]$$$: $$$a_1 \cdot a_2 \cdot a_3 = 420 = b_1 \cdot b_2$$$; $$$4$$$ and $$$105$$$ are strongly composite numbers.



B. Sort with Steptime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputLet's define apermutationof length $$$n$$$ as an array $$$p$$$ of length $$$n$$$, which contains every number from $$$1$$$ to $$$n$$$ exactly once.You are given a permutation $$$p_1, p_2, \dots, p_n$$$ and a number $$$k$$$. You need to sort this permutation in the ascending order. In order to do it, you can repeat the following operation any number of times (possibly, zero):pick two elements of the permutation $$$p_i$$$ and $$$p_j$$$ such that $$$|i - j| = k$$$, and swap them.Unfortunately, some permutations can't be sorted with some fixed numbers $$$k$$$. For example, it's impossible to sort $$$[2, 4, 3, 1]$$$ with $$$k = 2$$$.That's why, before starting the sorting, you can make at most onepreliminary exchange:choose any pair $$$p_i$$$ and $$$p_j$$$ and swap them.Your task is to:check whether is it possible to sort the permutationwithoutany preliminary exchanges,if it's not, check, whether is it possible to sort the permutation using exactlyonepreliminary exchange.For example, if $$$k = 2$$$ and permutation is $$$[2, 4, 3, 1]$$$, then you can make a preliminary exchange of $$$p_1$$$ and $$$p_4$$$, which will produce permutation $$$[1, 4, 3, 2]$$$, which is possible to sort with given $$$k$$$.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 10^4$$$). The description of the test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$2 \le n \le 2 \cdot 10^5$$$; $$$1 \le k \le n - 1$$$) — length of the permutation, and a distance between elements that can be swapped.The second line of each test case contains $$$n$$$ integers $$$p_1, p_2, \dots, p_n$$$ ($$$1 \le p_i \le n$$$) — elements of the permutation $$$p$$$.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10 ^ 5$$$.OutputFor each test case print0, if it is possible to sort the permutation without preliminary exchange;1, if it is possible to sort the permutation with one preliminary exchange, but not possible without preliminary exchange;-1, if it is not possible to sort the permutation with at most one preliminary exchange.ExampleInput64 13 1 2 44 23 4 1 24 23 1 4 210 34 5 9 1 8 6 10 2 3 710 34 6 9 1 8 5 10 2 3 710 34 6 9 1 8 5 10 3 2 7Output0
0
1
0
1
-1NoteIn the first test case, there is no need inpreliminary exchange, as it is possible to swap $$$(p_1, p_2)$$$ and then $$$(p_2, p_3)$$$.In the second test case, there is no need inpreliminary exchange, as it is possible to swap $$$(p_1, p_3)$$$ and then $$$(p_2, p_4)$$$.In the third test case, you need to applypreliminary exchangeto $$$(p_2, p_3)$$$. After that the permutation becomes $$$[3, 4, 1, 2]$$$ and can be sorted with $$$k = 2$$$.



A. A-characteristictime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputConsider an array $$$a_1, a_2, \dots, a_n$$$ consisting of numbers $$$1$$$ and $$$-1$$$. Define $$$A$$$-characteristic of this array as a number of pairs of indices $$$1 \le i < j \le n$$$, such that $$$a_i \cdot a_j = 1$$$.Find any array $$$a$$$ with given length $$$n$$$ with $$$A$$$-characteristic equal to the given value $$$k$$$.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 100$$$). The description of the test cases follows.The only line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$2 \le n \le 100$$$; $$$0 \le k \le \frac{(n-1) n}{2}$$$) — the length of required array and required $$$A$$$-characteristic.OutputFor each test case, if there is no array $$$a$$$ with given $$$A$$$-characteristic $$$k$$$, printNO.Otherwise, printYESand $$$n$$$ numbers $$$1$$$ and $$$-1$$$, which form the required array $$$a$$$. If there are multiple answers, print any of them.ExampleInput72 02 13 13 23 35 45 5OutputYES
1 -1 
YES
1 1 
YES
1 -1 1 
NO
YES
1 1 1 
YES
-1 1 -1 1 1 
NONoteIn the first test case, there is only one pair of different elements in the array, and their product is $$$a_1 \cdot a_2 = -1 \neq 1$$$, hence its $$$A$$$-characteristic is $$$0$$$.In the second test case, there is only one pair of different elements in the array, and their product is $$$a_1 \cdot a_2 = 1$$$, hence its $$$A$$$-characteristic is $$$1$$$.In the third test case, there are three pairs of different elements in the array, and their product are: $$$a_1 \cdot a_2 = -1$$$, $$$a_1 \cdot a_3 = 1$$$, $$$a_2 \cdot a_3 = -1$$$, hence its $$$A$$$-characteristic is $$$1$$$.In the fourth test case, we can show, that there is no array with length $$$3$$$, which $$$A$$$-characteristic is $$$2$$$.



G2. Magic Triples (Hard Version)time limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the hard version of the problem. The only difference is that in this version, $$$a_i \le 10^9$$$.For a given sequence of $$$n$$$ integers $$$a$$$, a triple $$$(i, j, k)$$$ is calledmagicif:$$$1 \le i, j, k \le n$$$.$$$i$$$, $$$j$$$, $$$k$$$ are pairwise distinct.there exists a positive integer $$$b$$$ such that $$$a_i \cdot b = a_j$$$ and $$$a_j \cdot b = a_k$$$.Kolya received a sequence of integers $$$a$$$ as a gift and now wants to count the number ofmagictriples for it. Help him with this task!Note that there are no constraints on the order of integers $$$i$$$, $$$j$$$ and $$$k$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. The description of the test cases follows.The first line of the test case contains a single integer $$$n$$$ ($$$3 \le n \le 2 \cdot 10^5$$$) — the length of the sequence.The second line of the test contains $$$n$$$ integers $$$a_1, a_2, a_3, \dots, a_n$$$ ($$$1 \le a_i \le 10^9$$$) — the elements of the sequence $$$a$$$.The sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output a single integer — the number ofmagictriples for the sequence $$$a$$$.ExampleInput751 7 7 2 736 2 1891 2 3 4 5 6 7 8 941000 993 986 17971 10 100 1000 10000 100000 100000081 1 2 2 4 4 8 891 1 1 2 2 2 4 4 4Output6
1
3
0
9
16
45NoteIn the first example, there are $$$6$$$magictriples for the sequence $$$a$$$ — $$$(2, 3, 5)$$$, $$$(2, 5, 3)$$$, $$$(3, 2, 5)$$$, $$$(3, 5, 2)$$$, $$$(5, 2, 3)$$$, $$$(5, 3, 2)$$$.In the second example, there is a singlemagictriple for the sequence $$$a$$$ — $$$(2, 1, 3)$$$.



G1. Magic Triples (Easy Version)time limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the easy version of the problem. The only difference is that in this version, $$$a_i \le 10^6$$$.For a given sequence of $$$n$$$ integers $$$a$$$, a triple $$$(i, j, k)$$$ is calledmagicif:$$$1 \le i, j, k \le n$$$.$$$i$$$, $$$j$$$, $$$k$$$ are pairwise distinct.there exists a positive integer $$$b$$$ such that $$$a_i \cdot b = a_j$$$ and $$$a_j \cdot b = a_k$$$.Kolya received a sequence of integers $$$a$$$ as a gift and now wants to count the number ofmagictriples for it. Help him with this task!Note that there are no constraints on the order of integers $$$i$$$, $$$j$$$ and $$$k$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. The description of the test cases follows.The first line of the test case contains a single integer $$$n$$$ ($$$3 \le n \le 2 \cdot 10^5$$$) — the length of the sequence.The second line of the test contains $$$n$$$ integers $$$a_1, a_2, a_3, \dots, a_n$$$ ($$$1 \le a_i \le 10^6$$$) — the elements of the sequence $$$a$$$.The sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output a single integer — the number ofmagictriples for the sequence $$$a$$$.ExampleInput751 7 7 2 736 2 1891 2 3 4 5 6 7 8 941000 993 986 17971 10 100 1000 10000 100000 100000081 1 2 2 4 4 8 891 1 1 2 2 2 4 4 4Output6
1
3
0
9
16
45NoteIn the first example, there are $$$6$$$magictriples for the sequence $$$a$$$ — $$$(2, 3, 5)$$$, $$$(2, 5, 3)$$$, $$$(3, 2, 5)$$$, $$$(3, 5, 2)$$$, $$$(5, 2, 3)$$$, $$$(5, 3, 2)$$$.In the second example, there is a singlemagictriple for the sequence $$$a$$$ — $$$(2, 1, 3)$$$.



F. Gardening Friendstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputTwo friends, Alisa and Yuki, planted a tree with $$$n$$$ vertices in their garden. A tree is an undirected graph without cycles, loops, or multiple edges. Each edge in this tree has a length of $$$k$$$. Initially, vertex $$$1$$$ is the root of the tree.Alisa and Yuki are growing the tree not just for fun, they want to sell it. Thecostof the tree is defined as the maximum distance from the root to a vertex among all vertices of the tree. The distance between two vertices $$$u$$$ and $$$v$$$ is the sum of the lengths of the edges on the path from $$$u$$$ to $$$v$$$.The girls took a course in gardening, so they know how to modify the tree. Alisa and Yuki can spend $$$c$$$ coins to shift the root of the tree to one of theneighbors of the current root. This operation can be performed any number of times (possibly zero). Note that the structure of the tree is left unchanged; the only change is which vertex is the root.The friends want to sell the tree with the maximumprofit. Theprofitis defined as the difference between thecostof the tree and the total cost of operations.The profit iscostof the tree minus the total cost of operations.Help the girls and find the maximumprofitthey can get by applying operations to the tree any number of times (possibly zero).InputThe first line of the input contains one integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The description of the test cases follows.The first line of each test case contains integers $$$n$$$, $$$k$$$, $$$c$$$ ($$$2 \le n \le 2 \cdot 10^5$$$; $$$1 \le k, c \le 10^9$$$) — the number of vertices in the tree, the length of each edge, and the cost of the operation.The next $$$n - 1$$$ lines of the test case contain pairs of integers $$$u_i$$$, $$$v_i$$$ ($$$1 \le u_i, v_i \le n$$$) — the edges of the graph. These edges form a tree.The sum of the values of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output a single integer — the maximumprofitthat Yuki and Alisa can get.ExampleInput43 2 32 13 15 4 12 14 25 43 46 5 34 16 12 65 13 210 6 41 31 99 77 66 49 22 88 55 10Output2
12
17
32



E. Making Anti-Palindromestime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a string $$$s$$$, consisting of lowercase English letters. In one operation, you are allowed to swap any two characters of the string $$$s$$$.A string $$$s$$$ of length $$$n$$$ is called ananti-palindrome, if $$$s[i] \ne s[n - i + 1]$$$ for every $$$i$$$ ($$$1 \le i \le n$$$). For example, the strings"codeforces","string"areanti-palindromes, but the strings"abacaba","abc","test"are not.Determine the minimum number of operations required to make the string $$$s$$$ ananti-palindrome, or output $$$-1$$$, if this is not possible.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. The description of the test cases follows.Each test case consists of two lines. The first line contains a single integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$) — the length of the string $$$s$$$.The second line contains the string $$$s$$$, consisting of $$$n$$$ lowercase English letters.The sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output a single integer — the minimum number of operations required to make the string $$$s$$$ ananti-palindrome, or $$$-1$$$ if this is not possible.ExampleInput1010codeforces3abc10taarrrataa10dcbdbdcccc4wwww12cabbaccabaac10aadaaaaddc14aacdaaaacadcdc6abccba12dcbcaebacccdOutput0
-1
1
1
-1
3
-1
2
2
2NoteIn the first test case, the string"codeforces"is already ananti-palindrome, so the answer is $$$0$$$.In the second test case, it can be shown that the string"abc"cannot be transformed into ananti-palindromeby performing the allowed operations, so the answer is $$$-1$$$.In the third test case, it is enough to swap the second and the fifth characters of the string"taarrrataa", and the new string"trararataa"will be ananti-palindrome, so the answer is $$$1$$$.



D. Super-Permutationtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA permutation is a sequence $$$n$$$ integers, where each integer from $$$1$$$ to $$$n$$$ appears exactly once. For example, $$$[1]$$$, $$$[3,5,2,1,4]$$$, $$$[1,3,2]$$$ are permutations, while $$$[2,3,2]$$$, $$$[4,3,1]$$$, $$$[0]$$$ are not.Given a permutation $$$a$$$, we construct an array $$$b$$$, where $$$b_i = (a_1 + a_2 +~\dots~+ a_i) \bmod n$$$.A permutation of numbers $$$[a_1, a_2, \dots, a_n]$$$ is called asuper-permutationif $$$[b_1 + 1, b_2 + 1, \dots, b_n + 1]$$$ is also a permutation of length $$$n$$$.Grisha became interested whether asuper-permutationof length $$$n$$$ exists. Help him solve this non-trivial problem. Output anysuper-permutationof length $$$n$$$, if it exists. Otherwise, output $$$-1$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. The description of the test cases follows.Each test case consists of a single line containing one integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$) — the length of the desired permutation.The sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output in a separate line:$$$n$$$ integers — asuper-permutationof length $$$n$$$, if it exists.$$$-1$$$, otherwise.If there are several suitable permutations, output any of them.ExampleInput41236Output1
2 1
-1
6 5 2 3 4 1



C. Bun Lovertime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputTema loves cinnabon rolls — buns with cinnabon and chocolate in the shape of a "snail".Cinnabon rolls come in different sizes and are square when viewed from above. The most delicious part of a roll is the chocolate, which is poured in a thin layer over the cinnabon roll in the form of a spiral and around the bun, as in the following picture:Cinnabon rolls of sizes 4, 5, 6For a cinnabon roll of size $$$n$$$, the length of the outer side of the square is $$$n$$$, and the length of the shortest vertical chocolate segment in the central part is one.Formally, the bun consists of two dough spirals separated by chocolate. A cinnabon roll of size $$$n + 1$$$ is obtained from a cinnabon roll of size $$$n$$$ by wrapping each of the dough spirals around the cinnabon roll for another layer.It is important that a cinnabon roll of size $$$n$$$ is defined in a unique way.Tema is interested in how much chocolate is in his cinnabon roll of size $$$n$$$. Since Tema has long stopped buying small cinnabon rolls, it is guaranteed that $$$n \ge 4$$$.Answer this non-obvious question by calculating the total length of the chocolate layer.InputThe first line of the input contains a single integer $$$t$$$ ($$$1 \le t \le 10^5$$$) — the number of test cases.The following $$$t$$$ lines describe the test cases.Each test case is described by a single integer $$$n$$$ ($$$4 \le n \le 10^9$$$) — the size of the cinnabon roll.OutputOutput $$$t$$$ integers. The $$$i$$$-th of them should be equal to the total length of the chocolate layer in the $$$i$$$-th test case.ExampleInput4456179179179Output26
37
50
32105178545472401



B. Karina and Arraytime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputKarina has an array of $$$n$$$ integers $$$a_1, a_2, a_3, \dots, a_n$$$. She loves multiplying numbers, so she decided that thebeautyof a pair of numbers is their product. And thebeautyof an array is the maximumbeautyof a pair ofadjacentelements in the array.For example, for $$$n = 4$$$, $$$a=[3, 5, 7, 4]$$$, thebeautyof the array is $$$\max$$$($$$3 \cdot 5$$$, $$$5 \cdot 7$$$, $$$7 \cdot 4$$$) = $$$\max$$$($$$15$$$, $$$35$$$, $$$28$$$) = $$$35$$$.Karina wants her array to be asbeautifulas possible. In order to achieve her goal, she can remove some elements (possibly zero) from the array. After Karina removes all elements she wants to, the array must contain at least two elements.Unfortunately, Karina doesn't have enough time to do all her tasks, so she asks you to calculate the maximumbeautyof the array that she can get by removing any number of elements (possibly zero).InputThe first line of the input contains an integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The description of the test cases follows.The first line of a test case contains an integer $$$n$$$ ($$$2 \le n \le 2 \cdot 10^5$$$) — the length of the array $$$a$$$.The second line of a test case contains $$$n$$$ integers $$$a_1, a_2, a_3, \dots, a_n$$$ ($$$-10^9 \le a_i \le 10^9$$$) — the elements of the array $$$a$$$.The sum of all values of $$$n$$$ across all test cases does not exceed $$$2 \cdot 10^5$$$.OutputOutput $$$t$$$ integers, each of which is the answer to the corresponding test case — the maximumbeautyof the array that Karina can get.ExampleInput745 0 2 13-1 1 052 0 -1 -4 06-8 4 3 7 1 -960 3 -2 5 -4 -421000000000 9100000007-1 -7 -2 -5 -4 -6 -3Output10
0
4
72
16
910000000000000000
42NoteIn the first test case of the example, to get the maximum beauty, you need to remove the $$$2$$$-nd element.In the second and third test cases of the example, there is no need to remove any elements to achieve maximum beauty.In the fourth test case of the example, you need to leave only the first and last elements.



A. TubeTube Feedtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputMushroom Filippov cooked himself a meal and while having his lunch, he decided to watch a video onTubeTube. He can not spend more than $$$t$$$ seconds for lunch, so he asks you for help with the selection of video.TheTubeTubefeed is a list of $$$n$$$ videos, indexed from $$$1$$$ to $$$n$$$. The $$$i$$$-th video lasts $$$a_i$$$ seconds and has an entertainment value $$$b_i$$$. Initially, the feed is opened on the first video, and Mushroom can skip to the next video in $$$1$$$ second (if the next video exists). Mushroom can skip videos any number of times (including zero).Help Mushroom chooseonevideo that he can open and watch in $$$t$$$ seconds. If there are several of them, he wants to choose the most entertaining one. Print the index of any appropriate video, or $$$-1$$$ if there is no such.InputThe first line of the input data contains a single integer $$$q$$$ ($$$1 \le q \le 1000$$$) — the number of test cases in the test.The description of the test cases follows.The first line of a test case contains two integers $$$n$$$ and $$$t$$$ ($$$1 \le n \le 50$$$, $$$1 \le t \le 200$$$) — the number of videos in the feed and seconds for lunch, respectively.The second line of a test case contains $$$n$$$ integers $$$a_1, a_2, a_3, \dots, a_n$$$ ($$$1 \le a_i \le 100$$$) — durations of videos.The third line of a test case contains $$$n$$$ integers $$$b_1, b_2, b_3, \dots, b_n$$$ ($$$1 \le b_i \le 100$$$) — entertainment values of videos.OutputOutput $$$q$$$ integers, each of which is the answer to the corresponding test case. As an answer, output theindexof the most entertaining video that Mushroom will have time to watch. If there are several answers, you are allowed to output any of them. Output $$$-1$$$, if there is no video he can watch during his lunch break.ExampleInput55 91 5 7 6 63 4 7 1 94 44 3 3 21 2 3 45 75 5 5 5 52 1 3 9 74 3354 71 69 9642 24 99 12 17955 6677 88Output3
2
3
-1
2



F. Timbertime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere is a beautiful alley with trees in front of a shopping mall. Unfortunately, it has to go to make space for the parking lot.The trees on the alley all grow in a single line. There are $$$n$$$ spots for trees, index $$$0$$$ is the shopping mall, index $$$n+1$$$ is the road and indices from $$$1$$$ to $$$n$$$ are the spots for trees. Some of them are taken — there grow trees of the same height $$$k$$$. No more than one tree grows in each spot.When you chop down a tree in the spot $$$x$$$, you can make it fall either left or right. If it falls to the left, it takes up spots from $$$x-k$$$ to $$$x$$$, inclusive. If it falls to the right, it takes up spots from $$$x$$$ to $$$x+k$$$, inclusive.Let $$$m$$$ trees on the alley grow in some spots $$$x_1, x_2, \dots, x_m$$$. Let an alley be calledunfortunateif all $$$m$$$ trees can be chopped down in such a way that:no tree falls on the shopping mall or the road;each spot is taken up by no more than one fallen tree.Calculate the number of differentunfortunatealleys with $$$m$$$ trees of height $$$k$$$. Two alleys are considered different if there is a spot $$$y$$$ such that a tree grows in $$$y$$$ on the first alley and doesn't grow in $$$y$$$ on the second alley.Output the number modulo $$$998\,244\,353$$$.InputThe only line contains three integers $$$n, m$$$ and $$$k$$$ ($$$1 \le m, k \le n \le 3 \cdot 10^5$$$) — the number of spots for the trees, the number of trees and the height of each tree.OutputPrint a single integer — the number of differentunfortunatealleys with $$$m$$$ trees of height $$$k$$$, modulo $$$998\,244\,353$$$.ExamplesInput6 1 4Output4Input5 2 2Output0Input6 2 2Output4Input15 3 2Output311



E. Rearrange Bracketstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA regular bracket sequence is a bracket sequence that can be transformed into a correct arithmetic expression by inserting characters "1" and "+" between the original characters of the sequence. For example:bracket sequences "()()" and "(())" are regular (the resulting expressions are: "(1)+(1)" and "((1+1)+1)");bracket sequences ")(", "(" and ")" are not.You are given a regular bracket sequence. In one move, you can remove a pair ofadjacentbrackets such that the left one is an opening bracket and the right one is a closing bracket. Then concatenate the resulting parts without changing the order. The cost of this move is the number of brackets to the right of the right bracket of this pair.Thecostof the regular bracket sequence is the smallest total cost of the moves required to make the sequence empty.Actually, you are not removing any brackets. Instead, you are given a regular bracket sequence and an integer $$$k$$$. You can perform the following operationat most $$$k$$$ times:extract some bracket from the sequence and insert it back at any position (between any two brackets, at the start or at the end; possibly, at the same place it was before).After all operations are performed, the bracket sequence has to be regular. What is the smallest possiblecostof the resulting regular bracket sequence?InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of testcases.The first line of each testcase contains a single integer $$$k$$$ ($$$0 \le k \le 5$$$) — the maximum number of operations you can perform.The second line contains a non-empty regular bracket sequence, it consists only of characters '(' and ')'.The total length of the regular bracket sequences over all testcases doesn't exceed $$$2 \cdot 10^5$$$.OutputFor each testcase, print a single integer — the smallest possiblecostof the regular bracket sequence after you perform at most $$$k$$$ operations on it.ExampleInput70()0(())1(())5()1(()()(()))2((())()(()())((())))3((())()(()())((())))Output0
1
0
0
1
4
2



D. Black Cellstime limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are playing with a really long strip consisting of $$$10^{18}$$$ white cells, numbered from left to right as $$$0$$$, $$$1$$$, $$$2$$$ and so on. You are controlling a special pointer that is initially in cell $$$0$$$. Also, you have a "Shift" button you can press and hold.In one move, you can do one of three actions:move the pointer to the right (from cell $$$x$$$ to cell $$$x + 1$$$);press and hold the "Shift" button;release the "Shift" button: the moment you release "Shift", all cells that were visited while "Shift" was pressed are colored in black.(Of course, you can't press Shift if you already hold it. Similarly, you can't release Shift if you haven't pressed it.)Your goal is to color at least $$$k$$$ cells, but there is a restriction: you are given $$$n$$$ segments $$$[l_i, r_i]$$$ — you can color cells only inside these segments, i. e. you can color the cell $$$x$$$ if and only if $$$l_i \le x \le r_i$$$ for some $$$i$$$.What is the minimum number of moves you need to make in order to color at least $$$k$$$ cells black?InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \le n \le 2 \cdot 10^5$$$; $$$1 \le k \le 10^9$$$) — the number of segments and the desired number of black cells, respectively.The second line contains $$$n$$$ integers $$$l_1, l_2, \dots, l_n$$$ ($$$1 \le l_1 < l_2 < \dots < l_n \le 10^9$$$), where $$$l_i$$$ is the left border of the $$$i$$$-th segment.The third line contains $$$n$$$ integers $$$r_1, r_2, \dots, r_n$$$ ($$$1 \le r_i \le 10^9$$$; $$$l_i \le r_i < l_{i + 1} - 1$$$), where $$$r_i$$$ is the right border of the $$$i$$$-th segment.Additional constraints on the input:every cell belongs to at most one segment;the sum of $$$n$$$ doesn't exceed $$$2 \cdot 10^5$$$.OutputFor each test case, print the minimum number of moves to color at least $$$k$$$ cells black, or $$$-1$$$ if it's impossible.ExampleInput42 31 31 44 2010 13 16 1911 14 17 202 31 31 102 499 999999999100 1000000000Output8
-1
7
1000000004NoteIn the first test case, one of the optimal sequences of operations is the following:Move right: pointer is moving into cell $$$1$$$;Press Shift;Release Shift: cell $$$1$$$ is colored black;Move right: pointer is moving into cell $$$2$$$;Move right: pointer is moving into cell $$$3$$$;Press Shift;Move right: pointer is moving into cell $$$4$$$;Release Shift: cells $$$3$$$ and $$$4$$$ are colored in black.We've colored $$$3$$$ cells in $$$8$$$ moves.In the second test case, we can color at most $$$8$$$ cells, while we need $$$20$$$ cell to color.In the third test case, one of the optimal sequences of operations is the following:Move right: pointer is moving into cell $$$1$$$;Move right: pointer is moving into cell $$$2$$$;Move right: pointer is moving into cell $$$3$$$;Press Shift;Move right: pointer is moving into cell $$$4$$$;Move right: pointer is moving into cell $$$5$$$;Release Shift: cells $$$3$$$, $$$4$$$ and $$$5$$$ are colored in black.We've colored $$$3$$$ cells in $$$7$$$ moves.



C. Tear It Aparttime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a string $$$s$$$, consisting of lowercase Latin letters.In one operation, you can select several (one or more) positions in it such that no two selected positions are adjacent to each other. Then you remove the letters on the selected positions from the string. The resulting parts are concatenated without changing their order.What is the smallest number of operations required to make all the letters in $$$s$$$ the same?InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of testcases.The only line of each testcase contains a string $$$s$$$, consisting of lowercase Latin letters. Its length is from $$$1$$$ to $$$2 \cdot 10^5$$$.The total length of the strings over all testcases doesn't exceed $$$2 \cdot 10^5$$$.OutputFor each testcase, print a single integer — the smallest number of operations required to make all the letters in the given string $$$s$$$ the same.ExampleInput5abacabacodeforcesooooooooabcdefmewheniseearulhiiarulOutput1
3
0
2
4NoteIn the first testcase, you can select positions $$$2, 4$$$ and $$$6$$$ and remove the corresponding letters 'b', 'c' and 'b'.In the third testcase, the letters in the string are already the same, so you don't have to make any operations.In the fourth testcase, one of the possible solutions in $$$2$$$ operations is the following. You can select positions $$$1, 4, 6$$$ first. The string becomes "bce". Then select positions $$$1$$$ and $$$3$$$. The string becomes "c". All letters in it are the same, since it's just one letter.



B. Sort the Subarraytime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputMonocarp had an array $$$a$$$ consisting of $$$n$$$ integers. He has decided to choose two integers $$$l$$$ and $$$r$$$ such that $$$1 \le l \le r \le n$$$, and then sort the subarray $$$a[l..r]$$$ (the subarray $$$a[l..r]$$$ is the part of the array $$$a$$$ containing the elements $$$a_l, a_{l+1}, a_{l+2}, \dots, a_{r-1}, a_r$$$) innon-descending order. After sorting the subarray, Monocarp has obtained a new array, which we denote as $$$a'$$$.For example, if $$$a = [6, 7, 3, 4, 4, 6, 5]$$$, and Monocarp has chosen $$$l = 2, r = 5$$$, then $$$a' = [6, 3, 4, 4, 7, 6, 5]$$$.You are given the arrays $$$a$$$ and $$$a'$$$. Find the integers $$$l$$$ and $$$r$$$ that Monocarp could have chosen. If there are multiple pairs of values $$$(l, r)$$$, find the one whichcorresponds to the longest subarray.InputThe first line contains one integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.Each test case consists of three lines:the first line contains one integer $$$n$$$ ($$$2 \le n \le 2 \cdot 10^5$$$);the second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$1 \le a_i \le n$$$);the third line contains $$$n$$$ integers $$$a'_1, a'_2, \dots, a'_n$$$ ($$$1 \le a'_i \le n$$$).Additional constraints on the input:the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$;it is possible to obtain the array $$$a'$$$ by sorting one subarray of $$$a$$$;$$$a' \ne a$$$ (there exists at least one position in which these two arrays are different).OutputFor each test case, print two integers — the values of $$$l$$$ and $$$r$$$ ($$$1 \le l \le r \le n$$$). If there are multiple answers, print the values that correspond to thelongest subarray. If there are still multiple answers, print any of them.ExampleInput376 7 3 4 4 6 56 3 4 4 7 6 531 2 11 1 232 2 12 1 2Output2 5
1 3
2 3



A. Matchingtime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputAninteger templateis a string consisting of digits and/or question marks.A positive (strictly greater than $$$0$$$) integer matches the integer template if it is possible to replace every question mark in the template with a digit in such a way that we get the decimal representation of that integerwithout any leading zeroes.For example:$$$42$$$ matches4?;$$$1337$$$ matches????;$$$1337$$$ matches1?3?;$$$1337$$$ matches1337;$$$3$$$ does not match??;$$$8$$$ does not match???8;$$$1337$$$ does not match1?7.You are given an integer template consisting ofat most $$$5$$$ characters. Calculate the number of positive (strictly greater than $$$0$$$) integers that match it.InputThe first line contains one integer $$$t$$$ ($$$1 \le t \le 2 \cdot 10^4$$$) — the number of test cases.Each test case consists of one line containing the string $$$s$$$ ($$$1 \le |s| \le 5$$$) consisting of digits and/or question marks — the integer template for the corresponding test case.OutputFor each test case, print one integer — the number of positive (strictly greater than $$$0$$$) integers that match the template.ExampleInput8???09031??7?5?9??99Output90
9
0
1
0
100
90
100



B. JoJo's Incredible Adventurestime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputDid you think there was going to be a JoJo legend here? But no, that was me, Dio!Given a binary string $$$s$$$ of length $$$n$$$, consisting of characters0and1. Let's build asquaretable of size $$$n \times n$$$, consisting of0and1characters as follows.In the first row of the table write the original string $$$s$$$. In the second row of the table writecyclic shiftof the string $$$s$$$ by one to the right. In the third row of the table, write the cyclic shift of line $$$s$$$ by two to the right. And so on. Thus, the row with number $$$k$$$ will contain a cyclic shift of string $$$s$$$ by $$$k$$$ to the right. The rowsare numbered from $$$0$$$ to $$$n - 1$$$ top-to-bottom.In the resulting table we need to find the rectangle consisting only of ones that has the largest area.We call a rectangle the set of all cells $$$(i, j)$$$ in the table, such that $$$x_1 \le i \le x_2$$$ and $$$y_1 \le j \le y_2$$$ for some integers $$$0 \le x_1 \le x_2 < n$$$ and $$$0 \le y_1 \le y_2 < n$$$.Recall that the cyclic shift of string $$$s$$$ by $$$k$$$ to the right is the string $$$s_{n-k+1} \ldots s_n s_1 s_2 \ldots s_{n-k}$$$. For example, the cyclic shift of the string "01011" by $$$0$$$ to the right is the string itself "01011", its cyclic shift by $$$3$$$ to the right is the string "01101".InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 2 \cdot 10^4$$$) — the number of test cases. The description of test cases follows.The first and the only line of each test case contains a single binary string $$$s$$$ ($$$1 \le \lvert s \rvert \le 2 \cdot 10^5$$$), consisting of characters0and1.It is guaranteed that the sum of string lengths $$$|s|$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output a single integer — the maximum area of a rectangle consisting only of ones. If there is no such rectangle, output $$$0$$$.ExampleInput501101011110101010Output0
1
2
6
1NoteIn the first test case, there is a table $$$1 \times 1$$$ consisting of a single character0, so there are no rectangles consisting of ones, and the answer is $$$0$$$.In the second test case, there is a table $$$1 \times 1$$$, consisting of a single character1, so the answer is $$$1$$$.In the third test case, there is a table:101110011In the fourth test case, there is a table:011110001111100111110011111001111100In the fifth test case, there is a table:101010010101101010010101101010010101Rectangles with maximum area are shown in bold.



A. Yura's New Nametime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputAfter holding one team contest, boy Yura got very tired and wanted to change his life and move to Japan. In honor of such a change, Yura changed his name to something nice.Fascinated by this idea he already thought up a name $$$s$$$ consisting only of characters "_" and "^". But there's a problem — Yura likes smiley faces "^_^" and "^^". Therefore any character of the name must be a part of at least one such smiley. Note that only theconsecutivecharacters of the name can be a smiley face.More formally, consider all occurrences of the strings "^_^" and "^^" in the string $$$s$$$. Then all such occurrences must cover the whole string $$$s$$$, possibly with intersections. For example, in the string "^^__^_^^__^" the characters at positions $$$3,4,9,10$$$ and $$$11$$$ are not contained inside any smileys, and the other characters at positions $$$1,2,5,6,7$$$ and $$$8$$$ are contained inside smileys.In one operation Jura can insert one of the characters "_" and "^" into his name $$$s$$$ (you can insert it at any position in the string). He asks you to tell him the minimum number of operations you need to do to make the name fit Yura's criteria.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 100$$$) —the number of test cases. The description of test cases follows.The first and only line of each test case contains a single string $$$s$$$ ($$$1 \leq |s| \leq 100$$$), consisting of characters "_" and "^",  — the name to change.OutputFor each test case, output a single integer — the minimum number of characters you need to add to the name to make it fit for Yura. If you don't need to change anything in the name, print $$$0$$$.ExampleInput7^______^___^_^^^_^___^^_^^_^^^^^_^_^^___^^_Output5
5
1
1
0
3
2NoteIn the first test case, you can get the following name by adding $$$5$$$ characters:^_^_^_^_^_^_^In the third test case, we can add one character "^" to the end of the name, then we get the name:^_^In the fourth test case, we can add one character "^" to the end of the name, then we get the name:^^In the fifth test case, all of the characters are already contained in smiley faces, so the answer is $$$0$$$.In the seventh test case, you can add one character "^" at the beginning of the name and one character "^" at the end of the name, then you get the name:^_^



F. Willy-nilly, Crack, Into Release!time limit per test3 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputYou have long dreamed of working in a large IT company and finally got a job there. You have studied all existing modern technologies for a long time and are ready to apply all your knowledge in practice. But then you sit down at your desk and see a sheet of paper with the company's motto printed in large letters:abcdabcdabcdabcd....The company's motto contains four main principles—a(Willi),b(Nilli),c(Crack),d(Release). Therefore, you consider strings of length $$$n$$$ consisting of these four Latin letters.Unorderedpairs of letters "ab", "bc", "cd", and "da" in this motto are adjacent, so we will call such pairs of symbolsgood. So, if you are given a string $$$s$$$ of length $$$n$$$, and it is known that the unordered pair of symbols $$$\{ x, y \}$$$ is good, then you can perform one of the following operations on the string:if $$$s_n = x$$$, then you are allowed to replace this symbol with $$$y$$$,if there exists $$$1 \le i < n$$$ such that $$$s_i = x$$$ and $$$s_{i+1} = \ldots = s_n = y$$$, then you are allowed to replace the $$$i$$$-th symbol of the string with $$$y$$$, and all subsequent symbols with $$$x$$$.For example, the stringbacddcan be replaced with one of the stringsbacda,bacdc, orbadcc, and the stringaaccan be replaced withaaboraad.A non-empty sequence of operations for the string $$$s$$$ will be calledcorrectif the following two conditions are met:after performing all operations, the string becomes $$$s$$$ again,no string, except for $$$s$$$, will occur more than once during the operations. At the same time, the string $$$s$$$ can occur exactly twice - before the start of the operations and after performing all operations.Now we are ready to move on to the problem statement! You have a set of strings that is initially empty. Then, each of $$$q$$$ queries adds another string $$$t_i$$$ to the set, or removes the string $$$t_i$$$ from the set. After each query, you need to output the minimum and maximum size of a correct sequence of operations in which each word occurs at least once. The choice of the initial string $$$s$$$ is up to you.InputThe first line contains two integers $$$n$$$ and $$$q$$$ ($$$1 \le n \le 20$$$, $$$1 \le q \le 100\,000$$$) — the length of the strings under consideration and the number of queries to modify the set of strings.Each of the next $$$q$$$ lines contains a string $$$t_i$$$ ($$$\lvert t_i \rvert = n$$$). All strings consist of characters "a", "b", "c" and "d". If the string $$$t_i$$$ was not in the set before the query, it is added to the set, otherwise it is removed from the set.OutputFor each of the $$$q$$$ queries, output two integers: the minimum and maximum size of a correct sequence of operations in which each word from the set appears at least once.If there is no sequence of operations that satisfies the condition of the problem, output a single number $$$-1$$$.ExamplesInput2 4
aa
ac
dd
acOutput2 12
4 4
-1
12 12Input3 2
acc
bddOutput2 44
28 44NoteLet's consider the first test example.After the first query, the set of important words is equal to $$$\{$$$aa$$$\}$$$, the minimum sequence of actions has the following form:aa,ab,aa. The maximum sequence of actions that fits isaa,ab,ba,bb,bc,cb,cc,cd,dc,dd,da,ad,aa.After the second query, the set of important words is equal to $$$\{$$$aa, ac$$$\}$$$. The minimum and maximum sequences of actions are:aa,ab,ac,ad,aa.After the third query, the set of important words is equal to $$$\{$$$aa, ac, dd$$$\}$$$. There is no sequence of actions that fits the condition, so $$$-1$$$ should be outputted.After the fourth query, the set of important words is equal to $$$\{$$$aa, dd$$$\}$$$. The minimum and maximum sequences of actions are as follows:aa,ab,ba,bb,bc,cb,cc,cd,dc,dd,da,ad,aa.



E. Roads in E Citytime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an interactive problem.As is well known, the city "E" has never had its roads repaired in its a thousand and a half years old history. And only recently the city administration repaired some of them.It is known that in total in the city "E" there are $$$n$$$ intersections and $$$m$$$ roads, which can be used in both directions, numbered with integers from $$$1$$$ to $$$m$$$. The $$$i$$$-th road connects intersections with numbers $$$a_i$$$ and $$$b_i$$$.Among all $$$m$$$ roads, some subset of the roads has been repaired, but you do not know which one. The only information you could get from the city's road services is that you can get from any intersection to any other intersection by driving only on the roads that have been repaired.You are a young entrepreneur, and decided to organize a delivery service of fresh raw meat in the city "E" (in this city such meat is called "steaks", it is very popular among the locals). You have already recruited a staff of couriers, but the couriers are willing to travel only on repaired roads. Now you have to find out which roads have already been repaired.The city administration has given you the city for a period of time, so you can make different queries of one of three types:Block the road with the number $$$x$$$. In this case, movement on the road for couriers will be forbidden.Initially all roads are unblocked.Unblock the road with the number $$$x$$$. In this case, couriers will be able to move on the road $$$x$$$ if it is repaired.Try to deliver the order to the intersection with the number $$$y$$$. In this case, one of your couriers will start moving from intersection with number $$$s$$$ you don't know and deliver the order to intersection with number $$$y$$$ if there is a path on unblocked repaired roads from intersection $$$s$$$ to intersection $$$y$$$. It is guaranteed that intersection $$$s$$$will be chosen beforehand.Unfortunately, the city is placed at your complete disposal for a short period of time, so you can make no more than $$$100 \cdot m$$$ requests.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 1\,000$$$) — the number of test cases. The description of test cases follows.The first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \le n \le 2\,000$$$, $$$n - 1 \le m \le 2\,000$$$) —the number of intersections and roads in the city "E".Each of the following $$$m$$$ lines describes one road. The $$$i$$$-th of these lines contains two integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \le a_i, b_i \le n$$$) — the ends of the $$$i$$$-th road. It is guaranteed that no road connects the city to itself, while it is possible that there are several roads between a pair of different intersections.It is guaranteed that the sum of $$$n$$$ and the sum of $$$m$$$ over all test cases does not exceed $$$2\,000$$$.InteractionOnce you have read the description of the test case, you can make queries. Queries can be of three types:"-$$$x$$$" ($$$1 \le x \le m$$$). In this case the road with the number $$$x$$$ is blocked if it has not already been blocked."+$$$x$$$" ($$$1 \le x \le m$$$). In this case the road with the number $$$x$$$ is unblocked. Note that road $$$x$$$ must be blocked beforehand.All roads are initially unblocked."?$$$y$$$" ($$$1 \le y \le n$$$). In this case the jury program chooses some city $$$s$$$. If you can get from town $$$s$$$ to town $$$y$$$ by unblocked repaired roads, the jury program will output $$$1$$$, otherwise the jury program will output $$$0$$$. Note that city $$$s$$$will be selected before getting information about city $$$y$$$, but your previous requests may be taken into account when selecting city $$$s$$$.In total, you can make no more than $$$100 \cdot m$$$ queries for each set of input data.After you have found all repaired roads, output "!$$$c_1,\ c_2,\ c_3,\ \ldots,\ c_m$$$", where $$$c_i$$$ is $$$1$$$ if road $$$i$$$ is repaired, and $$$0$$$ if road is not repaired. This outputwill not countin the total number of queries. The jury program will output $$$1$$$ if your answer is correct, and $$$0$$$ if the answer is not correct. If you received $$$0$$$, your program must terminate immediately to receive aWrong Answerverdict. Otherwise you can get any verdict, because the program will continue reading from the closed stream. If you read $$$1$$$, move on to the next test case, or terminate the program if there is none.Note that you do not have to unblock all roads before outputting the answer. It is guaranteed that all repaired roads are fixed initially and will not be changed by the jury program depending on queries.After outputting a query or the answer do not forget to output the end of line and flush the output. Otherwise, you will getIdleness limit exceeded. To do this, use:fflush(stdout)orcout.flush()in C++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see the documentation for other languages.HacksYou can't do hacks on this problem.ExampleInput2
2 2
1 2
2 1


1

0



1

1
3 3
1 2
2 3
3 1


1

1


1

0


1

1

1

1Output- 1
? 1

? 2

- 2
+ 1
? 1

! 1 0





- 1
? 2

? 1

- 2
? 3

? 3

+ 1
? 3

? 2

? 1

! 1 1 1NoteIn the first test case, road $$$1$$$ was repaired, while road $$$2$$$ was not. For the first delivery request, intersection $$$1$$$ was selected as $$$s$$$, and the path from intersection $$$1$$$ to $$$1$$$ exists. For the second delivery request, intersection $$$1$$$ was selected as $$$s$$$. Since the only repaired road was blocked, there was no path between intersections $$$1$$$ and $$$2$$$. For the third delivery request, intersection $$$2$$$ was selected as $$$s$$$, the path between intersections $$$2$$$ and $$$1$$$ exists along road $$$1$$$, which is repaired and unblocked.In the second test case, intersections $$$1$$$, $$$3$$$, $$$1$$$, $$$2$$$, $$$2$$$, $$$3$$$, $$$1$$$ were selected as starting intersections for delivery requests.



D. Misha and Applestime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputSchoolboy Misha got tired of doing sports programming, so he decided to quit everything and go to the magical forest to sell magic apples.His friend Danya came to the magical forest to visit Misha. What was his surprise when he found out that Misha found a lot of friends there, the same former sports programmers. And all of them, like Misha, have their own shop where they sell magic apples. To support his friends, who have changed their lives so drastically, he decided to buy up their entire assortment.The buying process works as follows: in total there are $$$n$$$ stalls, numbered with integers from $$$1$$$ to $$$n$$$, and $$$m$$$ kinds of magic apples, numbered with integers from $$$1$$$ to $$$m$$$. Each shop sells some number of kinds of apples. Danya visits all the shops in order of increasing number, starting with the first one. Upon entering the shop he buys one magic apple of each kind sold in that shop and puts them in his backpack.However, magical apples wouldn't be magical if they were all right. The point is that when two apples of the same type end up together in the backpack, all of the apples in it magically disappear. Importantly, the disappearance happens after Danya has put the apples in the backpack and left the shop.Upon returning home, Danya realized that somewhere in the forest he had managed to lose his backpack. Unfortunately, for some shops Danya had forgotten what assortment of apples there was. Remembering only for some shops, what kinds of magical apples were sold in them, he wants to know what is the maximum number of apples he could have in his backpack after all his purchases at best.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 2 \cdot 10^5$$$) —the number of test cases. The description of test cases follows.The first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \leq n, m \leq 2 \cdot 10^5$$$) —the number of stalls and kinds of apples.Each of the following $$$n$$$ lines describes the assortment of the next stall in the format described below.Each line starts with an integer $$$k_i$$$ ($$$0 \le k_i \le 2 \cdot 10^5$$$). This is followed by $$$k_i$$$ of different integers $$$a_{ij}$$$ ($$$1 \le a_{ij} \le m$$$) —the kinds of apples sold in the $$$i$$$-th stall. If $$$k_i = 0$$$, then Danya does not remember what assortment was in that shop, and the set of apple kinds can be anything (including empty).It is guaranteed that the sum of all $$$k_i$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$ and the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$OutputFor each test case, output a single integer — the maximum number of apples that could be in Dani's backpack after visiting all the shops at best.ExampleInput43 42 1 22 4 12 1 24 42 1 22 3 401 12 5005 303 1 2 32 3 101 3Output2
1
5
3NoteIn the first test case, Danya remembers all the shops, so the process will be deterministic. He will take two apples at the first shop and two more at the second, but after he puts them in his backpack, they will disappear. So at the end there will only be $$$2$$$ apples left, which he will take at the third shop.In the second test case, if the third shop is empty, then after visiting the fourth shop all the apples will disappear. In any other case the apples will disappear after the third shop, and in the fourth shop Dan can take one apple, so the answer is $$$1$$$.In the third test case, the first shop may sell all kinds of apples, and the second shop may sell nothing. Then all $$$5$$$ apples will be left at the end.



C. The Fox and the Complete Tree Traversaltime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe fox Yae climbed thetreeof the Sacred Sakura. A tree is a connected undirected graph that does not contain cycles.The fox uses her magical powers to move around the tree. Yae can jump from vertex $$$v$$$ to another vertex $$$u$$$ if and only if the distance between these vertices does not exceed $$$2$$$. In other words, in one jump Yae can jump from vertex $$$v$$$ to vertex $$$u$$$ if vertices $$$v$$$ and $$$u$$$ are connected by an edge, or if there exists such vertex $$$w$$$ that vertices $$$v$$$ and $$$w$$$ are connected by an edge, and also vertices $$$u$$$ and $$$w$$$ are connected by an edge.After Yae was able to get the sakura petal, she wondered if there was acyclicroute in the tree $$$v_1, v_2, \ldots, v_n$$$ such that:the fox can jump from vertex $$$v_i$$$ to vertex $$$v_{i + 1}$$$,the fox can jump from vertex $$$v_n$$$ to vertex $$$v_1$$$,all $$$v_i$$$ are pairwise distinct.Help the fox determine if the required traversal exists.InputThe first line contains one integer $$$n$$$ ($$$2 \le n \le 2 \cdot 10^5$$$) —the number of vertices of the tree.Each of the following $$$n - 1$$$ lines contains two integers $$$u$$$ and $$$v$$$ ($$$1 \le u, v \le n$$$, $$$u \ne v$$$) — vertices connected by an edge. It is guaranteed that these edges form a tree.OutputOn the first line, print "Yes" (without quotes) if the required route of the tree exists, or "No" (without quotes) otherwise.If the required tree traversal exists, on the second line print $$$n$$$ integers of different integers $$$v_1, v_2, \ldots, v_n$$$ ($$$1 \le v_i \le n$$$) — the vertices of the tree in traversal order.If there are several correct traversals, output any of them.ExamplesInput5
1 2
1 3
3 4
3 5OutputYes
4 5 1 2 3Input3
1 2
1 3OutputYes
1 2 3Input15
1 2
1 3
2 4
2 5
3 6
3 7
4 8
4 9
5 10
5 11
6 12
6 13
7 14
7 15OutputNoNoteThe tree from the first example is shown below. The bold arrows indicate the fox's route.In the second example, any sequence of three different vertices is a correct route, because the fox can jump from any vertex to any vertex.The tree from the third example is shown below. It can be shown that there is no required route for it.



B. The Butchertime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputAnton plays his favorite game "Defense of The Ancients 2" for his favorite hero — The Butcher. Now he wants to make his own dinner. To do this he will take a rectangle of height $$$h$$$ and width $$$w$$$, then make a vertical or horizontal cut so that both resulting parts have integer sides. After that, he will put one of the parts in the box and cut the other again, and so on.More formally, a rectangle of size $$$h \times w$$$ can be cut into two parts of sizes $$$x \times w$$$ and $$$(h - x) \times w$$$, where $$$x$$$ is an integer from $$$1$$$ to $$$(h - 1)$$$, or into two parts of sizes $$$h \times y$$$ and $$$h \times (w - y)$$$, where $$$y$$$ is an integer from $$$1$$$ to $$$(w - 1)$$$.He will repeat this operation $$$n - 1$$$ times, and then put the remaining rectangle into the box too. Thus, the box will contain $$$n$$$ rectangles, of which $$$n - 1$$$ rectangles were put in the box as a result of the cuts, and the $$$n$$$-th rectangle is the one that the Butcher has left after all $$$n - 1$$$ cuts.Unfortunately, Butcher forgot the numbers $$$h$$$ and $$$w$$$, but he still has $$$n$$$ rectangles mixed in random order. Note that Butcherdidn't rotate the rectangles, but only shuffled them. Now he wants to know all possible pairs $$$(h, w)$$$ from which this set of rectangles can be obtained. And you have to help him do it!It is guaranteed that there exists at least one pair $$$(h, w)$$$ from which this set of rectangles can be obtained.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$) — the number of rectangles obtained.The $$$i$$$-th of the next $$$n$$$ lines contains two integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \le a_i, b_i \le 10^6$$$) — the height and width of the $$$i$$$-th rectangle.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, on the first line output a single integer $$$m$$$ — the number of pairs $$$(h, w)$$$ denoting the sizes of rectangles from which the given rectangles can be obtained. Two rectangles are considered different if they have different heights or widths.On each of the following $$$m$$$ lines print output integers $$$h_i$$$ and $$$w_i$$$ — the height and width of the rectangle from which the given rectangles can be obtained. You can output the rectangles in any order.ExampleInput431 23 51 331 11 11 1110 1043 25 52 28 7Output1
4 5
2
1 3
3 1
1
10 10
1
13 7NoteIn the first test case, Butcher could only have a rectangle of size $$$4 \times 5$$$. Then the cuts could look like this (first the green cut was made, then the red one):In the second test case, Butcher could have either a rectangle of $$$1 \times 3$$$ or $$$3 \times 1$$$. The cuts would have looked like this (first the green cut was made, then the red cut):In the third test case, Butcher did not make any cuts, so the rectangle is $$$10 \times 10$$$.



A. Constructive Problemtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputAs you know, any problem that does not require the use of complex data structures is considered constructive. You are offered to solve one of such problems.You are given an array $$$a$$$ of $$$n$$$ non-negative integers. You are allowed to perform the following operationexactly once: choose some non-empty subsegment $$$a_l, a_{l+1}, \ldots, a_r$$$ of the array $$$a$$$ and a non-negative integer $$$k$$$, and assign value $$$k$$$ to all elements of the array on the chosen subsegment.The task is to find out whether $$$\operatorname{MEX}(a)$$$ can be increased by exactly one by performing such an operation. In other words, if before the operation $$$\operatorname{MEX}(a) = m$$$ held, then after the operation it must hold that $$$\operatorname{MEX}(a) = m + 1$$$.Recall that $$$\operatorname{MEX}$$$ of a set of integers $$$c_1, c_2, \ldots, c_k$$$ is defined as the smallest non-negative integer $$$x$$$ which does not occur in the set $$$c$$$.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 50\,000$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \le n \le 200\,000$$$) — the number of elements of array $$$a$$$.The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$0 \le a_i \le 10^9$$$) — elements of array $$$a$$$.It is guaranteed that the sum $$$n$$$ over all test cases does not exceed $$$200\,000$$$.OutputFor each test case, print "Yes" if you can increase $$$\operatorname{MEX}(a)$$$ by exactly one by performing the operation from the statement exactly once, otherwise print "No".You can output the answer in any case (upper or lower). For example, the strings "yEs", "yes", "Yes", and "YES" will be recognized as positive responses.ExampleInput431 2 140 2 2 043 2 0 210OutputYes
Yes
No
NoNoteIn the first test case, $$$\operatorname{MEX}(a) = 0$$$. If you set all elements of $$$a$$$ to $$$0$$$, then $$$\operatorname{MEX}$$$ of the resulting array will be $$$1$$$, and thus will increase by one.In the second test case, $$$\operatorname{MEX}(a) = 1$$$. If we assign a value of $$$1$$$ to the elements of $$$a$$$ on a subsegment from $$$2$$$ to $$$3$$$, we get an array $$$[0, 1, 1, 0]$$$ for which $$$\operatorname{MEX}$$$ is $$$2$$$, and thus is increased by one compared to the original.It can be shown that in the third and fourth test cases it is impossible to perform an operation so that the value of $$$\operatorname{MEX}(a)$$$ increases by exactly one.



B. Indivisibletime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou're given a positive integer $$$n$$$.Find a permutation $$$a_1, a_2, \dots, a_n$$$ such that for any $$$1 \leq l < r \leq n$$$, the sum $$$a_l + a_{l+1} + \dots + a_r$$$ is not divisible by $$$r-l+1$$$.A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array), and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 100$$$). Description of the test cases follows.The first line of each test case contain a single integer $$$n$$$ ($$$1 \leq n \leq 100$$$) — the size of the desired permutation.OutputFor each test case, if there is no such permutation print $$$-1$$$.Otherwise, print $$$n$$$ distinct integers $$$p_1, p_{2}, \dots, p_n$$$ ($$$1 \leq p_i \leq n$$$) — a permutation satisfying the condition described in the statement.If there are multiple solutions, print any.ExampleInput3
1
2
3Output1
1 2
-1NoteIn the first example, there are no valid pairs of $$$l < r$$$, meaning that the condition is true for all such pairs.In the second example, the only valid pair is $$$l=1$$$ and $$$r=2$$$, for which $$$a_1 + a_2 = 1+2=3$$$ is not divisible by $$$r-l+1=2$$$.in the third example, for $$$l=1$$$ and $$$r=3$$$ the sum $$$a_1+a_2+a_3$$$ is always $$$6$$$, which is divisible by $$$3$$$.



A. Politicstime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputIn a debate club with $$$n$$$ members, including yourself (member $$$1$$$), there are $$$k$$$ opinions to be discussed in sequence. During each discussion, members express their agreement or disagreement with the opinion. Let's define $$$Y$$$ as the number of members who agree and $$$N$$$ as the number of members who disagree. After each discussion, members leave the club based on the following criteria:If more members agree than disagree ($$$Y > N$$$), all members who disagreed leave the club.If more members disagree than agree ($$$Y < N$$$), all members who agreed leave the club.If there is a tie ($$$Y = N$$$), all members leave the club.As the club president, your goal is to stay in the club and maximize the number of members remaining after the meeting. You have access to each member's stance on all $$$k$$$ opinions before the meeting starts, and you can expel any number of members (excluding yourself) before the meeting begins.Determine the maximum number of members, including yourself, who can remain in the club after the meeting. You don't need to provide the specific expulsion strategy but only the maximum number of members that can stay. Ensure that you remain in the club after the meeting as well.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 1000$$$). Description of the test cases follows.The first line of each test case contains two positive integers $$$n$$$ and $$$k$$$ ($$$1 \le n, k \le 100$$$) — the number of members and the number of discussions.The $$$i$$$-th of the following $$$n$$$ lines contains a string $$$t_i$$$ of length $$$k$$$. The $$$j$$$-th character in the string $$$t_i$$$ indicates whether the $$$i$$$-th member agrees or disagrees with the $$$j$$$-th opinion if they are present during that discussion. A "+" symbol means the member agrees, while a "-" symbol means the member disagrees.It is guaranteed that the sum of $$$n \cdot k$$$ over all test cases does not exceed $$$5 \cdot 10^4$$$.OutputFor each test case, output the maximum number of members, including yourself, who can remain in the club after the meeting.ExampleInput52 2+++-1 3+-+4 1+--+5 4+++++--+++-++-++++++4 2++-----+Output1
1
2
2
1NoteFor convenience, we will analyze the examples based on who actually attended the meeting (i. e. wasnotexpelled) rather than who was expelled.Example 1:Only the first member could have attended the meeting, otherwise both members would have left after the second opinion is discussed.Example 2:There is only a single member that attends the meeting and stays till the end.Example 3:The club has $$$4$$$ members and only one opinion will be discussed during the meeting. Let's analyze the possible outcomes based on the participants in the meeting:If only the first member attends, they'll be the only one left after the meeting.If the first member attends with the second or third member, they will be a tie in the discussion, making them both leave.If the first member attends with the second and third members, the first member will be in the minority and will leave after the discussion, which contradicts the statement.If the first and fourth members attend, they will agree during the discussion and both remain till the end.If the first, second, and fourth members attend, the second member will be in the minority during the discussion, and only the first and fourth members will remain at the end. The same happens if the second member is replaced by the third member.If all four members attend, there will be a tie during the discussion, making everyone leave.The maximum number of members remaining after the meeting is $$$2$$$.Example 4:The club has $$$5$$$ members and $$$4$$$ opinions will be discussed during the meeting.One way to achieve the maximum number of members is if only the first, third, and fifth members attend the meeting. In this case, they all agree during the first two discussions, after which the third member is in the minority during the third discussion. Then, the first and fifth members agree in the last discussion, and those two members stay till the end of the meeting.Example 5:The club has $$$4$$$ members and $$$2$$$ opinions will be discussed.If the first three members attend the meeting, the first member will be in the minority during the first discussion and will leave the club. After that, the second and third members will both disagree with the second opinion, and they both will stay till the end of the meeting. In this way, there will be 2 members left after the meeting, but it is an invalid outcome, as it forces the first member to leave. Therefore, the maximum number of 1 member is achieved if only the first member attends the meeting.



F. Entangled Substringstime limit per test2 secondsmemory limit per test256 mebibytesinputstandard inputoutputstandard outputQuantum entanglement is when two particles link together in a certain way no matter how far apart they are in space.You are given a string $$$s$$$. A pair of its non-empty substrings $$$(a, b)$$$ is calledentangledif there is a (possibly empty) link string $$$c$$$ such that:Every occurrence of $$$a$$$ in $$$s$$$ is immediately followed by $$$cb$$$;Every occurrence of $$$b$$$ in $$$s$$$ is immediately preceded by $$$ac$$$.In other words, $$$a$$$ and $$$b$$$ occur in $$$s$$$ only as substrings of $$$acb$$$. Compute the total number of entangled pairs of substrings of $$$s$$$.A string $$$a$$$ is a substring of a string $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by the deletion of several (possibly zero or all) characters from the beginning and several (possibly zero or all) characters from the end.InputThe first and only line contains a string $$$s$$$ of lowercase English letters ($$$1 \leq |s| \leq 10^5$$$) — the string for which you should count pairs of entangled substrings.OutputOutput a single integer, the number of entangled pairs of substrings of $$$s$$$.ExamplesInputabbaOutput1InputabacabaOutput0InputabcabcabcabcOutput5InputadamantOutput82NoteIn the first example, the only entangled pair is (ab,ba). For this pair, the corresponding link string $$$c$$$ is empty, as they only occur as substrings of the whole stringabba, which doesn't have any characters betweenabandba.In the second example, there are no entangled pairs.In the third example, the entangled pairs are (a,b), (b,c), (a,c), (a,bc), and (ab,c). For most pairs, the corresponding link string $$$c$$$ is empty, except for the pair (a,c), for which the link string $$$c$$$ isb, asaandconly occur as substrings of the stringabc.



E. Half-sumtime limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou're given a multiset of non-negative integers $$$\{a_1, a_2, \dots, a_n\}$$$.In one step you take two elements $$$x$$$ and $$$y$$$ of the multiset, remove them and insert their mean value $$$\frac{x + y}{2}$$$ back into the multiset.You repeat the step described above until you are left with only two numbers $$$A$$$ and $$$B$$$. What is the maximum possible value of their absolute difference $$$|A-B|$$$?Since the answer is not an integer number, output it modulo $$$10^9+7$$$.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 100$$$). Description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$2 \le n \le 10^6$$$) — the size of the multiset.The second line contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$0 \le a_i \le 10^9$$$) — the elements of the multiset.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^6$$$.OutputFor each test case, output a single integer, the answer to the problem modulo $$$10^9+7$$$.Formally, let $$$M = 10^9+7$$$. It can be shown that the answer can be expressed as an irreducible fraction $$$\frac{p}{q}$$$, where $$$p$$$ and $$$q$$$ are integers and $$$q \not \equiv 0 \pmod{M}$$$. Output the integer equal to $$$p \cdot q^{-1} \bmod M$$$. In other words, output an integer $$$x$$$ such that $$$0 \le x < M$$$ and $$$x \cdot q \equiv p \pmod{M}$$$.ExampleInput527 341 2 10 1131 2 3664 32 64 16 64 041 1 1 1Output4
9
500000005
59
0NoteIn the first case, you can't do any operations, so the answer is $$$|7-3|=4$$$.In the second case, one of the optimal sequence of operations:Substitute $$$1$$$ and $$$2$$$ with $$$1.5$$$;Substitute $$$10$$$ and $$$11$$$ with $$$10.5$$$;The difference between $$$1.5$$$ and $$$10.5$$$ is $$$9$$$.In the third case, the exact answer is $$$\frac{3}{2}$$$, and $$$500\,000\,005 \cdot 2 \equiv 3 \pmod{10^9+7}$$$.



D. Toy Machinetime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere is a toy machine with toys arranged in two rows of $$$n$$$ cells each ($$$n$$$ is odd).Initial state for $$$n=9$$$.Initially, $$$n-2$$$ toys are placed in the non-corner cells of the top row. The bottom row is initially empty, and its leftmost, rightmost, and central cells are blocked. There are $$$4$$$ buttons to control the toy machine: left, right, up, and down marked by the lettersL,R,U, andDcorrespondingly.When pressingL,R,U, orD, all the toys will be moved simultaneously in the corresponding direction and will only stop if they push into another toy, the wall or a blocked cell. Your goal is to move the $$$k$$$-th toy into the leftmost cell of the top row. The toys are numbered from $$$1$$$ to $$$n-2$$$ from left to right. Given $$$n$$$ and $$$k$$$, find a solution that uses at most $$$1\,000\,000$$$ button presses.To test out the toy machine, aweb pageis available that lets you play the game in real time.InputThe first and only line contains two integers, $$$n$$$ and $$$k$$$ ($$$5 \le n \le 100\,000$$$, $$$n$$$ is odd, $$$1 \le k \le n-2$$$) — the number of cells in a row, and the index of the toy that has to be moved to the leftmost cell of the top row.OutputOn a single line, output a description of the button presses as a string of at most $$$1\,000\,000$$$ characters. The string should only contain the charactersL,R,U, andD. The $$$i$$$-th character in the string is the $$$i$$$-th button that is pressed. After all the button presses are performed, the $$$k$$$-th toy should be in the leftmost cell of the top row.If there are multiple solutions, print any. The number of button presses does not have to be minimized.ExamplesInput5 1OutputRDLInput7 2OutputRDLNoteIn the first example, there will be $$$5-2 = 3$$$ toys. The first toy needs to end up in the leftmost cell of the top row. The movesRDLwill achieve this, see the picture for a better understanding. Another possible solution would be to do one button pressL.Visualization of the moves for the first example.



C. Similar Polynomialstime limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA polynomial $$$A(x)$$$ of degree $$$d$$$ is an expression of the form $$$A(x) = a_0 + a_1 x + a_2 x^2 + \dots + a_d x^d$$$, where $$$a_i$$$ are integers, and $$$a_d \neq 0$$$. Two polynomials $$$A(x)$$$ and $$$B(x)$$$ are called similar if there is an integer $$$s$$$ such that for any integer $$$x$$$ it holds that$$$$$$ B(x) \equiv A(x+s) \pmod{10^9+7}. $$$$$$For two similar polynomials $$$A(x)$$$ and $$$B(x)$$$ of degree $$$d$$$, you're given their values in the points $$$x=0,1,\dots, d$$$ modulo $$$10^9+7$$$.Find a value $$$s$$$ such that $$$B(x) \equiv A(x+s) \pmod{10^9+7}$$$ for all integers $$$x$$$.InputThe first line contains a single integer $$$d$$$ ($$$1 \le d \le 2\,500\,000$$$).The second line contains $$$d+1$$$ integers $$$A(0), A(1), \ldots, A(d)$$$ ($$$0 \le A(i) < 10^9+7$$$) — the values of the polynomial $$$A(x)$$$.The third line contains $$$d+1$$$ integers $$$B(0), B(1), \ldots, B(d)$$$ ($$$0 \le B(i) < 10^9+7$$$) — the values of the polynomial $$$B(x)$$$.It is guaranteed that $$$A(x)$$$ and $$$B(x)$$$ are similar and that the leading coefficients (i.e., the coefficients in front of $$$x^d$$$) of $$$A(x)$$$ and $$$B(x)$$$ are not divisible by $$$10^9+7$$$.OutputPrint a single integer $$$s$$$ ($$$0 \leq s < 10^9+7$$$) such that $$$B(x) \equiv A(x+s) \pmod{10^9+7}$$$ for all integers $$$x$$$.If there are multiple solutions, print any.ExamplesInput1
1000000006 0
2 3Output3Input2
1 4 9
100 121 144Output9NoteIn the first example, $$$A(x) \equiv x-1 \pmod{10^9+7}$$$ and $$$B(x)\equiv x+2 \pmod{10^9+7}$$$. They're similar because $$$$$$B(x) \equiv A(x+3) \pmod{10^9+7}.$$$$$$In the second example, $$$A(x) \equiv (x+1)^2 \pmod{10^9+7}$$$ and $$$B(x) \equiv (x+10)^2 \pmod{10^9+7}$$$, hence $$$$$$B(x) \equiv A(x+9) \pmod{10^9+7}.$$$$$$



B. Fish Graphtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a simple undirected graph with $$$n$$$ nodes and $$$m$$$ edges. Note that the graph is not necessarily connected. The nodes are labeled from $$$1$$$ to $$$n$$$.We define a graph to be aFish Graphif it contains a simple cycle with a special node $$$u$$$ belonging to the cycle. Apart from the edges in the cycle, the graph should have exactly $$$2$$$ extra edges. Both edges should connect to node $$$u$$$, but they should not be connected to any other node of the cycle.Determine if the graph contains a subgraph that is a Fish Graph, and if so, find any such subgraph.In this problem, we define a subgraph as a graph obtained by taking any subset of the edges of the original graph.Visualization of example 1. The red edges form one possible subgraph that is a Fish Graph.InputThe first line of input contains the integer $$$t$$$ ($$$1 \leq t \leq 1000$$$), the number of test cases. The description of test cases follows.The first line of each test case contains two integers, $$$n$$$ and $$$m$$$ ($$$1 \le n, m \le 2\,000$$$) — the number of nodes and the number of edges.Each of the next $$$m$$$ lines contains the description of an edge. Each line contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \leq u_i, v_i \leq n$$$, $$$u_i\neq v_i$$$) — an edge connects node $$$u_i$$$ to node $$$v_i$$$.It is guaranteed that no two edges connect the same unordered pair of nodes.Furthermore, it is guaranteed that the sum of $$$n$$$ and the sum of $$$m$$$ over all test cases both do not exceed $$$2\,000$$$.OutputFor each testcase, output "YES" if the graph contains a subgraph that is a Fish Graph, otherwise print "NO". If the answer is "YES", on the following lines output a description of the subgraph.The first line of the description contains one integer $$$k$$$ — the number of edges of the subgraph.On the next $$$k$$$ lines, output the edges of the chosen subgraph. Each of the $$$k$$$ lines should contains two integers $$$u$$$ and $$$v$$$ ($$$1\le u, v\le n$$$, $$$u\neq v$$$) — the edge between $$$u$$$ and $$$v$$$ belongs to the subgraph. The order in which $$$u$$$ and $$$v$$$ are printed does not matter, as long as the two nodes are connected by an edge in the original graph. The order in which you print the edges does not matter, as long as the resulting subgraph is a fish graph.If there are multiple solutions, print any.ExampleInput37 81 22 33 44 14 54 64 26 77 76 71 22 33 44 11 33 54 41 33 44 11 2OutputYES
6
5 4
6 4
4 3
1 4
2 1
3 2
YES
5
5 3
2 3
3 1
4 3
1 4
NONoteIn the first example, a possible valid subgraph contains the cycle $$$1 \rightarrow 2 \rightarrow 3 \rightarrow 4 \rightarrow 1$$$. The special node of this cycle is node $$$4$$$. The two extra edges $$$4 - 5$$$ and $$$4 - 6$$$ are both connected to $$$4$$$, completing the Fish Graph.In the second example, a possible valid subgraph contains the cycle $$$1 \rightarrow 3 \rightarrow 4 \rightarrow 1$$$. The special node of this cycle is node $$$3$$$. The two extra edges $$$3 - 2$$$ and $$$3 - 5$$$ are both connected to $$$3$$$, completing the Fish Graph.In the last example, it can be proven that there is no valid subgraph.



A. Almost Increasing Subsequencetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA sequence isalmost-increasingif it does not contain threeconsecutiveelements $$$x, y, z$$$ such that $$$x\ge y\ge z$$$.You are given an array $$$a_1, a_2, \dots, a_n$$$ and $$$q$$$ queries.Each query consists of two integers $$$1\le l\le r\le n$$$. For each query, find the length of the longestalmost-increasingsubsequence of the subarray $$$a_l, a_{l+1}, \dots, a_r$$$.A subsequence is a sequence that can be derived from the given sequence by deleting zero or more elements without changing the order of the remaining elements.InputThe first line of input contains two integers, $$$n$$$ and $$$q$$$ ($$$1 \leq n, q \leq 200\,000$$$)  — the length of the array $$$a$$$ and the number of queries.The second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$1 \leq a_i \leq 10^9$$$)  — the values of the array $$$a$$$.Each of the next $$$q$$$ lines contains the description of a query. Each line contains two integers $$$l$$$ and $$$r$$$ ($$$1 \leq l \leq r \leq n$$$)  — the query is about the subarray $$$a_l, a_{l+1}, \dots, a_r$$$.OutputFor each of the $$$q$$$ queries, print a line containing the length of the longest almost-increasing subsequence of the subarray $$$a_l, a_{l+1}, \dots, a_r$$$.ExampleInput9 8
1 2 4 3 3 5 6 2 1
1 3
1 4
2 5
6 6
3 7
7 8
1 8
8 8Output3
4
3
1
4
2
7
1NoteIn the first query, the subarray is $$$a_1, a_2, a_3 = [1,2,4]$$$. The whole subarray is almost-increasing, so the answer is $$$3$$$.In the second query, the subarray is $$$a_1, a_2, a_3,a_4 = [1,2,4,3]$$$. The whole subarray is a almost-increasing, because there are no three consecutive elements such that $$$x \geq y \geq z$$$. So the answer is $$$4$$$.In the third query, the subarray is $$$a_2, a_3, a_4, a_5 = [2, 4, 3, 3]$$$. The whole subarray is not almost-increasing, because the last three elements satisfy $$$4 \geq 3 \geq 3$$$. An almost-increasing subsequence of length $$$3$$$ can be found (for example taking $$$a_2,a_3,a_5 = [2,4,3]$$$ ). So the answer is $$$3$$$.



B. Grid Reconstructiontime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputConsider a $$$2 \times n$$$ grid, where $$$n$$$ is aneveninteger. You may place the integers $$$1, 2, \ldots, 2n$$$ on the grid, using each integerexactly once.Apathis a sequence of cells achieved by starting at $$$(1, 1)$$$, then repeatedly walking either downwards or to the right, and stopping when $$$(2, n)$$$ is reached. The path should not extend beyond the grid.Thecostof a path is the alternating sum of the numbers written on the cells in a path. That is, let the numbers written on the cells be $$$a_1, a_2, \ldots, a_k$$$ (in the order that it is visited), the cost of the path is $$$a_1 - a_2 + a_3 - a_4 + \ldots = \sum_{i=1}^k a_i \cdot (-1)^{i+1}$$$.Construct a way to place the integers $$$1, 2, \ldots, 2n$$$ on the grid, such that the minimum cost over all paths from $$$(1, 1)$$$ to $$$(2, n)$$$ is maximized. If there are multiple such grids that result in the maximum value, output any of them.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases. The description of test cases follows.The first and the only line of each test case contains a single integer $$$n$$$ ($$$2 \leq n \leq 10^5$$$, $$$n$$$ is even) — the number of the columns in the grid.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^5$$$.OutputFor each test case, output $$$2$$$ lines, each containing $$$n$$$ integers — the desired grid. If there are multiple solutions, output any of them.ExampleInput3246Output3 2
1 4
8 2 6 4
1 5 3 7
11 5 9 1 7 3
6 10 2 8 4 12NoteIn the first test case, there are only two paths from cell $$$(1, 1)$$$ to cell $$$(2, 2)$$$. Their costs are $$$3-1+4=6$$$ and $$$3-2+4=5$$$. Then the minimum cost is $$$5$$$, which is the maximum possible value.In the second test case, there are four paths from cell $$$(1, 1)$$$ to cell $$$(2, 4)$$$. Their costs are $$$8-1+5-3+7=16$$$, $$$8-2+5-3+7=15$$$, $$$8-2+6-3+7=16$$$, and $$$8-2+6-4+7=15$$$. Then the minimum value is $$$15$$$, which is the maximum possible value.



A. Ian Visits Marytime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputIan and Mary are frogs living on lattice points of the Cartesian coordinate plane, with Ian living on $$$(0,0)$$$ and Mary living on $$$(a,b)$$$.Ian would like to visit Mary by jumping around the Cartesian coordinate plane. Every second, he jumps from his current position $$$(x_p, y_p)$$$ to another lattice point $$$(x_q, y_q)$$$, such that no lattice point other than $$$(x_p, y_p)$$$ and $$$(x_q, y_q)$$$ lies on the segment between point $$$(x_p, y_p)$$$ and point $$$(x_q, y_q)$$$.As Ian wants to meet Mary as soon as possible, he wants to jump towards point $$$(a,b)$$$ usingat most $$$2$$$ jumps. Unfortunately, Ian is not good at maths. Can you help him?A lattice point is defined as a point with both the $$$x$$$-coordinate and $$$y$$$-coordinate being integers.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 500$$$) — the number of test cases. The description of test cases follows.The first and only line of each test case contains two integers $$$a$$$ and $$$b$$$ ($$$1\le a,b\le 10^9$$$) — the coordinates of the lattice point where Mary lives.OutputFor each test case, print an integer $$$n$$$ ($$$1 \le n \le 2$$$) on the first line, denoting the number of jumps Ian uses in order to meet Mary. Note that you do not need to minimize the number of jumps.On the $$$i$$$-th line of the next $$$n$$$ lines, print two integers $$$0 \le x_i,y_i \le 10^9$$$ separated by a space, denoting Ian's location $$$(x_i,y_i)$$$ after the $$$i$$$-th jump. $$$x_n = a$$$, $$$y_n = b$$$ must hold.Ian's initial location and his locations after each of the $$$n$$$ jumpsneed notbe distinct.If there are multiple solutions, output any.ExampleInput83 44 43 62 21 17 32022 20231000000000 1000000000Output1
3 4
2
3 2
4 4
2
5 3
3 6
2
1 0
2 2
1
1 1
1
7 3
1
2022 2023
2
69420420 469696969
1000000000 1000000000NoteIn the first test case:$$$(0,0) \to (3,4)$$$In the second test case:$$$(0,0) \to (3,2) \to (4,4)$$$In the third test case:$$$(0,0) \to (5,3) \to (3,6)$$$



F. OH NO1 (-2-3-4)time limit per test4 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou are given an undirected graph with $$$n$$$ vertices and $$$3m$$$ edges. The graph may contain multi-edges, but does not contain self-loops.The graph satisfies the following property: the given edges can be divided into $$$m$$$ groups of $$$3$$$, such that each group is a triangle.A triangle is defined as three edges $$$(a,b)$$$, $$$(b,c)$$$ and $$$(c,a)$$$ for some three distinct vertices $$$a,b,c$$$ ($$$1 \leq a,b,c \leq n$$$).Initially, each vertex $$$v$$$ has a non-negative integer weight $$$a_v$$$. For every edge $$$(u,v)$$$ in the graph, youshouldperform the following operationexactly once:Choose an integer $$$x$$$ between $$$1$$$ and $$$4$$$. Then increase both $$$a_u$$$ and $$$a_v$$$ by $$$x$$$.After performing all operations, the following requirement should be satisfied: if $$$u$$$ and $$$v$$$ are connected by an edge, then $$$a_u \ne a_v$$$.It can be proven this is always possible under the constraints of the task. Output a way to do so, by outputting the choice of $$$x$$$ for each edge. It is easy to see that the order of operations does not matter. If there are multiple valid answers, output any.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^5$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$3 \le n \le 10^6$$$, $$$1 \le m \le 4 \cdot 10^5$$$) — denoting the graph have $$$n$$$ vertices and $$$3m$$$ edges.The second line of each test case contains $$$n$$$ integers $$$a_1,a_2,\ldots,a_n$$$ ($$$0 \leq a_i \leq 10^6$$$) — the initial weights of each vertex.Then $$$m$$$ lines follow. The $$$i$$$-th line contains three integers $$$a_i$$$, $$$b_i$$$, $$$c_i$$$ ($$$1 \leq a_i < b_i < c_i \leq n$$$) — denotes that three edges $$$(a_i,b_i)$$$, $$$(b_i,c_i)$$$ and $$$(c_i,a_i)$$$.Note that the graph may contain multi-edges: a pair $$$(x,y)$$$ may appear in multiple triangles.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^6$$$ and the sum of $$$m$$$ over all test cases does not exceed $$$4 \cdot 10^5$$$.OutputFor each test case, output $$$m$$$ lines of $$$3$$$ integers each.The $$$i$$$-th line should contains three integers $$$e_{ab},e_{bc},e_{ca}$$$ ($$$1 \leq e_{ab}, e_{bc} , e_{ca} \leq 4$$$), denoting the choice of value $$$x$$$ for edges $$$(a_i, b_i)$$$, $$$(b_i,c_i)$$$ and $$$(c_i, a_i)$$$ respectively.ExampleInput44 10 0 0 01 2 35 20 0 0 0 01 2 31 4 54 43 4 5 61 2 31 2 41 3 42 3 45 40 1000000 412 412 4121 2 31 4 52 4 53 4 5Output2 1 3
2 3 3
4 3 3
3 1 2
2 2 3
2 3 4
3 1 1
2 3 4
1 2 4
4 4 3
4 1 1NoteIn the first test case, the initial weights are $$$[0,0,0,0]$$$. We have added values as follows:Added $$$2$$$ to vertices $$$1$$$ and $$$2$$$Added $$$1$$$ to vertices $$$2$$$ and $$$3$$$Added $$$3$$$ to vertices $$$3$$$ and $$$1$$$The final weights are $$$[5,3,4,0]$$$. The output is valid because $$$a_1 \neq a_2$$$, $$$a_1 \neq a_3$$$, $$$a_2 \neq a_3$$$, and that all chosen values are between $$$1$$$ and $$$4$$$.In the second test case, the initial weights are $$$[0,0,0,0,0]$$$. The weights after the operations are $$$[12,5,6,7,6]$$$. The output is valid because $$$a_1 \neq a_2$$$, $$$a_1 \neq a_3$$$, $$$a_2 \neq a_3$$$, and that $$$a_1 \neq a_4$$$, $$$a_1 \neq a_5$$$, $$$a_4 \neq a_5$$$, and that all chosen values are between $$$1$$$ and $$$4$$$.In the third test case, the initial weights are $$$[3,4,5,6]$$$. The weights after the operations are $$$[19,16,17,20]$$$, and all final weights are distinct, which means no two adjacent vertices have the same weight.



E. Bosco and Particletime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputBosco is studying the behaviour of particles. He decided to investigate on the peculiar behaviour of the so-called "four-one-two" particle. He does the following:There is a line of length $$$n+1$$$, where the topmost point is position $$$0$$$ and bottommost is position $$$n+1$$$. The particle is initially (at time $$$t=0$$$) at position $$$0$$$ and heading downwards. The particle moves at the speed of $$$1$$$ unit per second. There are $$$n$$$ oscillators at positions $$$1,2,\ldots,n$$$.Each oscillator can be described by a binary string. The initial state of each oscillator is the first character of its binary string. When the particle hits with an oscillator, the particle reverses its direction if its current state is $$$\texttt{1}$$$ and continues to move at the same direction if its current state is $$$\texttt{0}$$$, and that oscillator moves on to the next state (the next state of the last state is defined as the first state). Additionally, the particle always reverses its direction when it is at position $$$0$$$ or $$$n+1$$$ at time $$$t > 0$$$.Bosco would like to know the cycle length of the movement of particle. The cycle length is defined as the minimum value of $$$c$$$ such that for any time $$$t \ge 0$$$, the position of the particle at time $$$t$$$ is same as the position of the particle at time $$$t+c$$$. It can be proved that such value $$$c$$$ always exists. As he realises the answer might be too large, he asks you to output your answer modulo $$$998244353$$$.InputThe first line contains an integer $$$n$$$ ($$$1\le n\le10^6$$$) — the number of oscillators.The $$$i$$$-th of the next $$$n$$$ line contains a binary string $$$s_i$$$ ($$$1\le\left|s_i\right|\le10^6$$$) — the binary string, that contains only characters $$$\texttt{0}$$$ and $$$\texttt{1}$$$, describing the oscillator at position $$$i$$$.It is guaranteed that the sum of all $$$|s_i|$$$ does not exceed $$$10^6$$$.OutputOutput a single integer integer — the cycle length of the movement of the particle, modulo $$$998244353$$$.ExamplesInput1
00Output4Input2
01
010Output16Input4
0101
000
1
01Output12Input4
01010
0001
11
0001Output120NoteIn the first sample, the only oscillator at position $$$1$$$ always has state $$$\texttt{0}$$$. At time moments $$$0,1,2,3$$$ positions the particle are $$$0,1,2,1$$$ respectively. Then the same positions will be repeated, so $$$c=4$$$.Animation for the second sample:hereora smoother animation.



D. XOR Countingtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputGiven two positive integers $$$n$$$ and $$$m$$$. Find the sum of all possible values of $$$a_1\bigoplus a_2\bigoplus\ldots\bigoplus a_m$$$, where $$$a_1,a_2,\ldots,a_m$$$ are non-negative integers such that $$$a_1+a_2+\ldots+a_m=n$$$.Note that all possible values $$$a_1\bigoplus a_2\bigoplus\ldots\bigoplus a_m$$$ should be counted in the sumexactly once.As the answer may be too large, output your answer modulo $$$998244353$$$.Here, $$$\bigoplus$$$ denotes thebitwise XOR operation.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. The description of test cases follows.The first and only line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$0\le n\le 10^{18}, 1\le m\le 10^5$$$) — the sum and the number of integers in the set, respectively.OutputFor each test case, output the sum of all possible values of $$$a_1\bigoplus a_2\bigoplus\ldots\bigoplus a_m$$$ among all non-negative integers $$$a_1,a_2,\ldots,a_m$$$ with $$$a_1+a_2+\ldots+a_m=n$$$. As the answer may be too large, output your answer modulo $$$998244353$$$.ExampleInput769 15 20 10420 6912 2673 341000000000000000000 10Output69
6
0
44310
42
1369
216734648NoteFor the first test case, we must have $$$a_1=69$$$, so it's the only possible value of $$$a_1$$$, therefore our answer is $$$69$$$.For the second test case, $$$(a_1,a_2)$$$ can be $$$(0,5), (1,4), (2,3), (3,2), (4,1)$$$ or $$$(5,0)$$$, in which $$$a_1\bigoplus a_2$$$ are $$$5,5,1,1,5,5$$$ respectively. So $$$a_1\bigoplus a_2$$$ can be $$$1$$$ or $$$5$$$, therefore our answer is $$$1+5=6$$$.For the third test case, $$$a_1,a_2,\ldots,a_{10}$$$ must be all $$$0$$$, so $$$a_1\bigoplus a_2\bigoplus\ldots\bigoplus a_{10}=0$$$. Therefore our answer is $$$0$$$.



C. Betweentime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an integer $$$n$$$, as well as $$$m$$$ pairs of integers $$$(a_i,b_i)$$$, where $$$1\leq a_i , b_i \leq n$$$, $$$a_i \ne b_i$$$.You want to construct a sequence satisfying the following requirements:All elements in the sequence are integers between $$$1$$$ and $$$n$$$.There is exactly one element with value $$$1$$$ in the sequence.For each $$$i$$$ ($$$1 \le i \le m$$$), between any two elements (on different positions) in the sequence with value $$$a_i$$$, there is at least one element with value $$$b_i$$$.The sequence constructed has themaximumlength among all possible sequences satisfying the above properties.Sometimes, it is possible that such a sequence can be arbitrarily long, in which case you should output "INFINITE". Otherwise, you should output "FINITE" and the sequence itself. If there are multiple possible constructions that yield the maximum length, output any.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 300$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \le n \le 1500$$$, $$$0 \le m \le 5000$$$) — the maximum possible value of the element of the sequence and the number of pairs.The $$$i$$$-th of the next $$$m$$$ lines contain two integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \le a_i , b_i \le n$$$, $$$a_i \ne b_i$$$).$$$(a_i, b_i) \ne (a_j, b_j)$$$ for all $$$1 \le i < j \le m$$$.It is guaranteed that sum of $$$n$$$ over all test cases doesn't exceed $$$1500$$$ and the sum of $$$m$$$ over all test cases doesn't exceed $$$5000$$$.OutputFor each test case, on the first line output "INFINITE" if the sequence can be arbitrarily long, and "FINITE" otherwise.If you have outputted "FINITE", then your output should be followed by $$$2$$$ lines.The first line contains an integer $$$s$$$, the maximum length of the sequence.The second line contains $$$s$$$ integers, each are between $$$1$$$ and $$$n$$$ inclusive, representing the elements of the sequence.If there are multiple sequences with the maximum length, output any of them.It can be shown that, for all test cases with answer "FINITE", then under the constraints, the maximum possible sum of sequence lengths of those test cases does not exceed $$$2\cdot10^6$$$.ExampleInput53 23 12 11 02 02 21 22 15 52 13 14 24 55 1OutputFINITE
5
2 3 1 2 3 
FINITE
1
1 
INFINITE
FINITE
3
2 1 2 
FINITE
10
4 2 3 5 4 1 3 2 5 4NoteIn the first test case, there is an element $$$1$$$ between two elements with value $$$3$$$ and an element $$$1$$$ between two elements with value $$$2$$$. It can be shown that there is no suitable sequences of length more than $$$5$$$.In the second case, $$$[1]$$$ is the only possible sequence because there should be exactly one element with value $$$1$$$ in the sequence.In the third case, we can get an arbitrary long sequence like $$$1, 2, 2, 2, \ldots$$$.



B. Sum Graphtime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an interactive problem.There is a hidden permutation $$$p_1, p_2, \dots, p_n$$$.Consider an undirected graph with $$$n$$$ nodes only with no edges. You can make two types of queries:Specify an integer $$$x$$$ satisfying $$$2 \le x \le 2n$$$. For all integers $$$i$$$ ($$$1 \le i \le n$$$) such that $$$1 \le x-i \le n$$$, an edge between node $$$i$$$ and node $$$x-i$$$ will be added.Query the number ofedgesin the shortest path between node $$$p_i$$$ and node $$$p_j$$$. As the answer to this question you will get the number of edges in the shortest path if such a path exists, or $$$-1$$$ if there is no such path.Note that you can make both types of queries inanyorder.Within $$$2n$$$ queries (including type $$$1$$$ and type $$$2$$$), guess two possible permutations, at least one of which is $$$p_1, p_2, \dots, p_n$$$. You get accepted if at least one of the permutations is correct. You are allowed to guess the same permutation twice.A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array), and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).InputEach test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 100$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$2 \le n \le 10^3$$$) — the length of the permutation.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^3$$$.InteractionThe interaction for each test case begins by reading the integer $$$n$$$.Then, make at most $$$2n$$$ queries:If you want to make a type $$$1$$$ query, output "+ x". $$$x$$$ must be an integer between $$$2$$$ and $$$2n$$$ inclusive.After doing that read $$$1$$$ or $$$-2$$$. If you read $$$1$$$ your query was valid, otherwise it was invalid or you exceed the limit of queries, and your program must terminate immediately to receive aWrong Answerverdict.If you want to make a type $$$2$$$ query, output "? i j". $$$i$$$ and $$$j$$$ must be integers between $$$1$$$ and $$$n$$$ inclusive. After that, read in a single integer $$$r$$$ ($$$-1 \le r \le n$$$) — the answer to your query. If you receive the integer $$$−2$$$ instead of an answer, it means your program has made an invalid query, or has exceeded the limit of queries. Your program must terminate immediately to receive aWrong Answerverdict.At any point of the interaction, if you want to guess two permutations, output "!$$$p_{1,1}$$$ $$$p_{1,2}$$$ $$$\dots$$$ $$$p_{1,n}$$$ $$$p_{2,1}$$$ $$$p_{2,2}$$$ $$$\dots$$$ $$$p_{2,n}$$$". Note that you should output the two permutationson the same line, andno exclamation markis needed to separate the two permutations.After doing that read $$$1$$$ or $$$-2$$$. If you read $$$1$$$ your answer was correct, otherwise it was incorrect and your program must terminate immediately to receive aWrong Answerverdict. After that, move on to the next test case, or terminate the program if there are none. Note that reporting the answerdoes not countas a query.Note that even if you output a correct permutation, the second permutation should be a permutation andnot an arbitrary array.At any point, if you continue interaction after reading in the integer $$$-2$$$, you can get an arbitrary verdict because your solution will continue to read from a closed stream.After printing a query or the answer do not forget to output the end of line and flush the output. Otherwise, you will getIdleness limit exceeded. To do this, use:fflush(stdout)orcout.flush()in C++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see the documentation for other languages.Interactor isnon-adaptive. This means that all permutations are fixed before the interaction starts.HacksTo make a hack, use the following format.The first line should contain a single integer $$$t$$$ ($$$1 \le t \le 100$$$) — the number of test cases.The first line of each test case should contain a single integer $$$n$$$ ($$$2 \le n \le 10^3$$$) — the length of the permutation.The second line of each test case should contain $$$n$$$ distinct integers $$$p_1, p_2, \ldots, p_n$$$ ($$$1 \le p_i \le n$$$) — the hidden permutation.The sum of $$$n$$$ over all test cases should not exceed $$$10^3$$$.ExampleInput2
6

1

1

1

1

1

2

-1

1
2

1Output+ 12

+ 2

+ 3

? 1 3

+ 5

? 1 5

? 4 5

! 1 4 2 5 3 6 1 2 3 4 5 6


! 1 2 2 1NoteIn the first test case, $$$n=6$$$ and the hidden permutation $$$p = [1,4,2,5,3,6]$$$.Firstly, make a type $$$1$$$ query on $$$x=12, 2, 3$$$ respectively. This adds four edges to the graph in total:An edge that connects node $$$6$$$ and node $$$6$$$.An edge that connects node $$$1$$$ and node $$$1$$$.An edge that connects node $$$1$$$ and node $$$2$$$.An edge that connects node $$$2$$$ and node $$$1$$$.Since all of these queries are valid, the interactor returns $$$1$$$ after each of them.Then, query the number of edges in the shortest path between node $$$p_1 = 1$$$ and $$$p_3 = 2$$$, which is equal to $$$1$$$.Then, make a type $$$1$$$ query on $$$x=5$$$. This adds four edges to the graph in total:An edge that connects node $$$1$$$ and node $$$4$$$.An edge that connects node $$$2$$$ and node $$$3$$$.An edge that connects node $$$3$$$ and node $$$2$$$.An edge that connects node $$$4$$$ and node $$$1$$$.Since this query is valid, the interactor returns $$$1$$$.Then, query the number of edges in the shortest path between node $$$p_1 = 1$$$ and $$$p_5 = 3$$$, which is equal to $$$2$$$.Then, query the number of edges in the shortest path between node $$$p_4 = 5$$$ and $$$p_5 = 3$$$. Such a path doesn't exist, therefore the interactor returns $$$-1$$$.Afterwards, due to some magic, two possible permutations that can be $$$p$$$ are determined: the first permutation is $$$[1,4,2,5,3,6]$$$ and the second permutation is $$$[1,2,3,4,5,6]$$$. Since the first permutation is equal to the hidden permutation, this test case is solved correctly. In total, $$$7$$$ queries are used, which is within the limit of $$$2 \cdot 6 = 12$$$ queries.Since the answer is correct, the interactor returns $$$1$$$.In the second test case, $$$n=2$$$ and the hidden permutation is $$$p = [2,1]$$$.Since there are only $$$2! = 2$$$ possible permutations, no queries are needed. It is sufficient to just output the two permutations, $$$[1,2]$$$ and $$$[2,1]$$$. In total, $$$0$$$ queries are used, which is within the limit of $$$2 \cdot 2 = 4$$$ queries.Since the answer is correct, the interactor returns $$$1$$$.



A. Ian and Array Sortingtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputTo thank Ian, Mary gifted an array $$$a$$$ of length $$$n$$$ to Ian. To make himself look smart, he wants to make the array in non-decreasing order by doing the following finitely many times: he chooses two adjacent elements $$$a_i$$$ and $$$a_{i+1}$$$ ($$$1\le i\le n-1$$$), and increases both of them by $$$1$$$ or decreases both of them by $$$1$$$. Note that, the elements of the arraycanbecome negative.As a smart person, you notice that, there are some arrays such that Ian cannot make it become non-decreasing order! Therefore, you decide to write a program to determine if it is possible to make the array in non-decreasing order.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^4$$$) — the number of test cases. The description of test cases follows.The first line of each test case consists of a single integer $$$n$$$ ($$$2\le n\le 3\cdot10^5$$$) — the number of elements in the array.The second line of each test case contains $$$n$$$ integers $$$a_1,a_2,\ldots,a_n$$$ ($$$1\le a_i\le 10^9$$$) — the elements of the array $$$a$$$.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$3\cdot10^5$$$.OutputFor each test case, output "YES" if there exists a sequence of operations which make the array non-decreasing, else output "NO".You may print each letter in any case (for example, "YES", "Yes", "yes", "yEs" will all be recognized as positive answer).ExampleInput531 3 222 141 3 5 742 1 4 355 4 3 2 1OutputYES
NO
YES
NO
YESNoteFor the first test case, we can increase $$$a_2$$$ and $$$a_3$$$ both by $$$1$$$. The array is now $$$[1, 4, 3]$$$.Then we can decrease $$$a_1$$$ and $$$a_2$$$ both by $$$1$$$. The array is now $$$[0, 3, 3]$$$, which is sorted in non-decreasing order. So the answer is "YES".For the second test case, no matter how Ian perform the operations, $$$a_1$$$ will always be larger than $$$a_2$$$. So the answer is "NO" and Ian cannot pretend to be smart.For the third test case, the array is already in non-decreasing order, so Ian does not need to do anything.



F. Communication Towerstime limit per test4 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputThere are $$$n$$$ communication towers, numbered from $$$1$$$ to $$$n$$$, and $$$m$$$ bidirectional wires between them. Each tower has a certain set of frequencies that it accepts, the $$$i$$$-th of them accepts frequencies from $$$l_i$$$ to $$$r_i$$$.Let's say that a tower $$$b$$$ is accessible from a tower $$$a$$$, if there exists a frequency $$$x$$$ and a sequence of towers $$$a=v_1, v_2, \dots, v_k=b$$$, where consecutive towers in the sequence are directly connected by a wire, and each of them accepts frequency $$$x$$$. Note that accessibility is not transitive, i. e if $$$b$$$ is accessible from $$$a$$$ and $$$c$$$ is accessible from $$$b$$$, then $$$c$$$ may not be accessible from $$$a$$$.Your task is to determine the towers that are accessible from the $$$1$$$-st tower.InputThe first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \le n \le 2 \cdot 10^5$$$; $$$0 \le m \le 4 \cdot 10^5$$$) — the number of communication towers and the number of wires, respectively.Then $$$n$$$ lines follows, the $$$i$$$-th of them contains two integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \le l_i \le r_i \le 2 \cdot 10^5$$$) — the boundaries of the acceptable frequencies for the $$$i$$$-th tower.Then $$$m$$$ lines follows, the $$$i$$$-th of them contains two integers $$$v_i$$$ and $$$u_i$$$ ($$$1 \le v_i, u_i \le n$$$; $$$v_i \ne u_i$$$) — the $$$i$$$-th wire that connects towers $$$v_i$$$ and $$$u_i$$$. There are no two wires connecting the same pair of towers.OutputIn a single line, print distinct integers from $$$1$$$ to $$$n$$$ in ascending order — the indices of the communication towers that are accessible from the $$$1$$$-st tower.ExamplesInput6 5
3 5
1 2
2 4
2 3
3 3
4 6
1 3
6 1
3 5
3 6
2 3Output1 3 5 6Input3 1
2 3
1 4
1 1
1 3Output1Input5 5
1 3
2 3
2 2
3 5
2 4
1 2
2 3
3 4
4 1
4 5Output1 2 3 4 5



E. Chain Chipstime limit per test3 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou are given an undirected graph consisting of $$$n$$$ vertices and $$$n-1$$$ edges. The $$$i$$$-th edge has weight $$$a_i$$$; it connects the vertices $$$i$$$ and $$$i+1$$$.Initially, each vertex contains a chip. Each chip has an integer written on it; the integer written on the chip in the $$$i$$$-th vertex is $$$i$$$.In one operation, you can choose a chip (if there are multiple chips in a single vertex, you may choose any one of them) and move it along one of the edges of the graph. The cost of this operation is equal to the weight of the edge.Thecostof the graph is the minimum cost of a sequence of such operations that meets the following condition:after all operations are performed, each vertex contains exactly one chip, and the integer on each chip isnot equalto the index of the vertex where that chip is located.You are given $$$q$$$ queries of the form:$$$k$$$ $$$x$$$ — change the weight of the $$$k$$$-th edge (the one which connects the vertices $$$k$$$ and $$$k+1$$$) to $$$x$$$.After each query, print thecostof the graph. Note that you don't actually move any chips; when you compute the cost, the chips are on their initial positions.InputThe first line contains one integer $$$n$$$ ($$$2 \le n \le 2 \cdot 10^5$$$).The second line contains $$$n-1$$$ integers $$$a_1, a_2, \dots, a_{n-1}$$$ ($$$1 \le a_i \le 10^9$$$).The third line contains one integer $$$q$$$ ($$$1 \le q \le 2 \cdot 10^5$$$).Then $$$q$$$ lines follow. The $$$i$$$-th of them contains two integers $$$k$$$ and $$$x$$$ ($$$1 \le k \le n-1$$$; $$$1 \le x \le 10^9$$$) for the $$$i$$$-th query.OutputFor each query, print one integer — thecostof the graph after the query is performed.ExampleInput10
12 6 12 15 20 8 17 12 15
8
4 10
7 3
6 14
9 9
2 10
3 5
4 11
7 11Output126
108
120
108
112
98
98
114



D. Balancing Weaponstime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou've got a job in a game studio that developed an online shooter, and your first big task is to help to balance weapons. The game has $$$n$$$ weapons: the $$$i$$$-th gun has an integer fire rate $$$f_i$$$ and an integer damage per bullet $$$d_i$$$. The $$$i$$$-th gun's total firepower is equal to $$$p_i = f_i \cdot d_i$$$.You have to modify the values $$$d_i$$$ of some guns in such a way that the new values $$$d_i$$$ will still be integers, and the firepower of all guns will become balanced. Given an integer $$$k$$$, the guns are said to bebalancedif $$$\max\limits_{1 \le i \le n}{p_i} - \min\limits_{1 \le i \le n}{p_i} \le k$$$.Since gamers that play your game don't like big changes, you need to change the values $$$d_i$$$ for the minimum possible number of guns. What is the minimum number of guns for which you have to change these values to make the guns balanced?Note that the new values $$$d_i$$$ must be integers greater than $$$0$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 1000$$$) — the number of test cases.The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$2 \le n \le 3000$$$; $$$0 \le k \le 1500$$$) — the number of guns to balance, and the maximum allowed gap between the most and the least powerful weapons.The second line contains $$$n$$$ integers $$$f_1, f_2, \dots, f_n$$$ ($$$1 \le f_i \le 2000$$$), where $$$f_i$$$ is the fire rate of the $$$i$$$-th gun.The third line contains $$$n$$$ integers $$$d_1, d_2, \dots, d_n$$$ ($$$1 \le d_i \le 10^9$$$), where $$$d_i$$$ is the damage per bullet of the $$$i$$$-th gun.It's guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$3000$$$.OutputFor each test case, print the minimum number of guns which damage $$$d_i$$$ you have to change in order to make the guns balanced.Note that the new values $$$d_i$$$ must be integers greater than $$$0$$$.ExampleInput54 26 3 13 71 2 1 23 2100 101 102100 99 985 01 12 4 4 312 1 3 3 42 501000 101000000000 13 51 19 1149 4 72Output2
3
0
1
2NoteIn the first test case, you can set $$$d_1 = 2$$$ and $$$d_2 = 4$$$. You'll get an array $$$d = [2, 4, 1, 2]$$$, and the values of firepower will be $$$p = [12, 12, 13, 14]$$$. The guns are balanced, since $$$14 - 12 \le 2$$$.In the second test case, you have to change the value $$$d_i$$$ for all three guns. For example, you can set $$$d = [5151, 5100, 5050]$$$.In the third test case, all guns are already balanced, so you don't have to change anything.



C. Search in Paralleltime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputSuppose you have $$$n$$$ boxes. The $$$i$$$-th box contains infinitely many balls of color $$$i$$$. Sometimes you need to get a ball with some specific color; but you're too lazy to do it yourself.You have bought two robots to retrieve the balls for you. Now you have to program them. In order to program the robots, you have to construct two lists $$$[a_1, a_2, \dots, a_k]$$$ and $$$[b_1, b_2, \dots, b_{n-k}]$$$, where the list $$$a$$$ represents the boxes assigned to the first robot, and the list $$$b$$$ represents the boxes assigned to the second robot.Every integer from $$$1$$$ to $$$n$$$ must be present in exactly one of these lists.When you request a ball with color $$$x$$$, the robots work as follows. Each robot looks through the boxes that were assigned to that robot, in the order they appear in the list. The first robot spends $$$s_1$$$ seconds analyzing the contents of a box; the second robot spends $$$s_2$$$. As soon as one of the robots finds the box with balls of color $$$x$$$ (and analyzes its contents), the search ends. The search time is the number of seconds from the beginning of the search until one of the robots finishes analyzing the contents of the $$$x$$$-th box. If a robot analyzes the contents of all boxes assigned to it, it stops searching.For example, suppose $$$s_1 = 2$$$, $$$s_2 = 3$$$, $$$a = [4, 1, 5, 3, 7]$$$, $$$b = [2, 6]$$$. If you request a ball with color $$$3$$$, the following happens:initially, the first robot starts analyzing the box $$$4$$$, and the second robot starts analyzing the box $$$2$$$;at the end of the $$$2$$$-nd second, the first robot finishes analyzing the box $$$4$$$. It is not the box you need, so the robot continues with the box $$$1$$$;at the end of the $$$3$$$-rd second, the second robot finishes analyzing the box $$$2$$$. It is not the box you need, so the robot continues with the box $$$6$$$;at the end of the $$$4$$$-th second, the first robot finishes analyzing the box $$$1$$$. It is not the box you need, so the robot continues with the box $$$5$$$;at the end of the $$$6$$$-th second, the first robot finishes analyzing the box $$$5$$$. It is not the box you need, so the robot continues with the box $$$3$$$. At the same time, the second robot finishes analyzing the box $$$6$$$. It is not the box you need, and the second robot has analyzed all the boxes in its list, so that robot stops searching;at the end of the $$$8$$$-th second, the first robot finishes analyzing the box $$$3$$$. It is the box you need, so the search ends;so, the search time is $$$8$$$ seconds.You know that you are going to request a ball of color $$$1$$$ $$$r_1$$$ times, a ball of color $$$2$$$ $$$r_2$$$ times, and so on. You want to construct the lists $$$a$$$ and $$$b$$$ for the robots in such a way that the total search time over all requests is the minimum possible.InputThe first line contains one integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.Each test case consists of two lines:the first line contains three integers $$$n$$$, $$$s_1$$$, $$$s_2$$$ ($$$2 \le n \le 2 \cdot 10^5$$$; $$$1 \le s_1, s_2 \le 10$$$);the second line contains $$$n$$$ integers $$$r_1, r_2, \dots, r_n$$$ ($$$1 \le r_i \le 10^6$$$).Additional constraint on the input: the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, print two lines. The first line should contain the list $$$a$$$, the second line — the list $$$b$$$. Each list has to be printed as follows: first, print the number of elements in it, and then the elements themselves.If there are multiple answers, you may print any of them.ExampleInput37 3 18 6 4 4 4 1 75 1 101 1 1 1 18 1 14 5 6 8 1 7 3 2Output2 5 6
5 1 7 2 4 3
5 4 3 5 2 1
0
4 4 2 7 5
4 6 3 1 8



B. Long Legstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA robot is placed in a cell $$$(0, 0)$$$ of an infinite grid. This robot has adjustable length legs. Initially, its legs have length $$$1$$$.Let the robot currently be in the cell $$$(x, y)$$$ and have legs of length $$$m$$$. In one move, it can perform one of the following three actions:jump into the cell $$$(x + m, y)$$$;jump into the cell $$$(x, y + m)$$$;increase the length of the legs by $$$1$$$, i. e. set it to $$$m + 1$$$.What's the smallest number of moves robot has to make to reach a cell $$$(a, b)$$$?InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 100$$$) — the number of test cases.The only line of each test case contains two integers $$$a$$$ and $$$b$$$ ($$$1 \le a, b \le 10^9$$$) — the ending cell.OutputFor each test case, print a single integer — the smallest number of moves the robot is required to make to reach a cell $$$(a, b)$$$ from a cell $$$(0, 0)$$$.ExampleInput31 11 68 4Output2
5
6NoteIn the first testcase, the robot can first jump to $$$(0, 1)$$$, then to $$$(1, 1)$$$. If it ever increases the length of its legs, it will only be able to jump past $$$(1, 1)$$$.In the second testcase, the robot can jump to $$$(1, 0)$$$, then increase the length of its length to $$$2$$$ and jump three times to reach $$$(1, 6)$$$.In the third testcase, the robot can increase the length of its legs three times to make it $$$4$$$. Then jump to $$$(0, 4)$$$. Then jump twice to reach $$$(8, 4)$$$.



A. Coinstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputIn Berland, there are two types of coins, having denominations of $$$2$$$ and $$$k$$$ burles.Your task is to determine whether it is possible to represent $$$n$$$ burles in coins, i. e. whether there exist non-negative integers $$$x$$$ and $$$y$$$ such that $$$2 \cdot x + k \cdot y = n$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The only line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \le k \le n \le 10^{18}$$$; $$$k \ne 2$$$).OutputFor each test case, printYESif it is possible to represent $$$n$$$ burles in coins; otherwise, printNO. You may print each letter in any case (YES,yes,Yeswill all be recognized as positive answer,NO,noandnOwill all be recognized as negative answer).ExampleInput45 36 17 48 8OutputYES
YES
NO
YESNoteIn the first test case, you can take one coin with denomination $$$2$$$ and one coin with denomination $$$k = 3$$$.In the second test case, you can take three coins with denomination $$$2$$$. Alternatively, you can take six coins with denomination $$$k = 1$$$.In the third test case, there is no way to represent $$$7$$$ burles.In the fourth test case, you can take one coin with denomination $$$k = 8$$$.



G2. Vlad and the Nice Paths (hard version)time limit per test3 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputThis is hard version of the problem, it differs from the easy one only by constraints on $$$n$$$ and $$$k$$$.Vlad found a row of $$$n$$$ tiles and the integer $$$k$$$. The tiles are indexed from left to right and the $$$i$$$-th tile has the color $$$c_i$$$. After a little thought, he decided what to do with it.You can start from any tile and jump to any number of tilesright, forming the path $$$p$$$. Let's call the path $$$p$$$ of length $$$m$$$niceif:$$$p$$$ can be divided into blocks of length exactly $$$k$$$, that is, $$$m$$$ is divisible by $$$k$$$;$$$c_{p_1} = c_{p_2} = \ldots = c_{p_k}$$$;$$$c_{p_{k+1}} = c_{p_{k+2}} = \ldots = c_{p_{2k}}$$$;$$$\ldots$$$$$$c_{p_{m-k+1}} = c_{p_{m-k+2}} = \ldots = c_{p_{m}}$$$;Your task is to find the number ofnicepaths ofmaximumlength. Since this number may be too large, print it modulo $$$10^9 + 7$$$.InputThe first line of each test contains the integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases in the test.The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \le k \le n \le 5000$$$) — the number of tiles in a row and the length of the block.The second line of each test case contains $$$n$$$ integers $$$c_1, c_2, c_3, \dots, c_n$$$ ($$$1 \le c_i \le n$$$) — tile colors.It is guaranteed that the sum of $$$n^2$$$ over all test cases does not exceed $$$25 \cdot 10^6$$$.OutputPrint $$$t$$$ numbers, each of which is the answer to the corresponding test case — the number ofnicepaths of maximum length modulo $$$10^9 + 7$$$.ExampleInput55 21 2 3 4 57 21 3 1 3 3 1 311 41 1 1 1 1 1 1 1 1 1 15 21 1 2 2 25 11 2 3 4 5Output1
4
165
3
1NoteIn the first sample, it is impossible to make anicepath with a length greater than $$$0$$$.In the second sample, we are interested in the following paths:$$$1 \rightarrow 3 \rightarrow 4 \rightarrow 5$$$$$$2 \rightarrow 4 \rightarrow 5 \rightarrow 7$$$$$$1 \rightarrow 3 \rightarrow 5 \rightarrow 7$$$$$$1 \rightarrow 3 \rightarrow 4 \rightarrow 7$$$In the third example, any path of length $$$8$$$ isnice.



G1. Vlad and the Nice Paths (easy version)time limit per test5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an easy version of the problem, it differs from the hard one only by constraints on $$$n$$$ and $$$k$$$.Vlad found a row of $$$n$$$ tiles and the integer $$$k$$$. The tiles are indexed from left to right and the $$$i$$$-th tile has the color $$$c_i$$$. After a little thought, he decided what to do with it.You can start from any tile and jump to any number of tilesright, forming the path $$$p$$$. Let's call the path $$$p$$$ of length $$$m$$$niceif:$$$p$$$ can be divided into blocks of length exactly $$$k$$$, that is, $$$m$$$ is divisible by $$$k$$$;$$$c_{p_1} = c_{p_2} = \ldots = c_{p_k}$$$;$$$c_{p_{k+1}} = c_{p_{k+2}} = \ldots = c_{p_{2k}}$$$;$$$\ldots$$$$$$c_{p_{m-k+1}} = c_{p_{m-k+2}} = \ldots = c_{p_{m}}$$$;Your task is to find the number ofnicepaths ofmaximumlength. Since this number may be too large, print it modulo $$$10^9 + 7$$$.InputThe first line of each test contains the integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases in the test.The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \le k \le n \le 100$$$) — the number of tiles in a row and the length of the block.The second line of each test case contains $$$n$$$ integers $$$c_1, c_2, c_3, \dots, c_n$$$ ($$$1 \le c_i \le n$$$) — tile colors.It is guaranteed that the sum of $$$n^3$$$ over all test cases does not exceed $$$5 \cdot 10^6$$$.OutputPrint $$$t$$$ numbers, each of which is the answer to the corresponding test case — the number ofnicepaths of maximum length modulo $$$10^9 + 7$$$.ExampleInput55 21 2 3 4 57 21 3 1 3 3 1 311 41 1 1 1 1 1 1 1 1 1 15 21 1 2 2 25 11 2 3 4 5Output1
4
165
3
1NoteIn the first sample, it is impossible to make anicepath with a length greater than $$$0$$$.In the second sample, we are interested in the following paths:$$$1 \rightarrow 3 \rightarrow 4 \rightarrow 5$$$$$$2 \rightarrow 4 \rightarrow 5 \rightarrow 7$$$$$$1 \rightarrow 3 \rightarrow 5 \rightarrow 7$$$$$$1 \rightarrow 3 \rightarrow 4 \rightarrow 7$$$In the third example, any path of length $$$8$$$ isnice.



F. Is It Flower?time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputVlad found a flowerbed with graphs in his yard and decided to take one for himself. Later he found out that in addition to the usual graphs, $$$k$$$-flowers also grew on that flowerbed. A graph is called a $$$k$$$-flower if it consists of a simple cycle of length $$$k$$$, through each vertex of which passes its own simple cycle of length $$$k$$$ and these cycles do not intersect at the vertices. For example, $$$3$$$-flower looks like this:Note that $$$1$$$-flower and $$$2$$$-flower do not exist, since at least $$$3$$$ vertices are needed to form a cycle.Vlad really liked the structure of the $$$k$$$-flowers and now he wants to find out if he was lucky to take one of them from the flowerbed.InputThe first line of input contains the single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases in the test.The descriptions of the cases follow. An empty string is written before each case.The first line of each case contains two integers $$$n$$$ and $$$m$$$ ($$$2 \le n \le 2 \cdot 10^5$$$, $$$1 \le m \le \min(2 \cdot 10^5, \frac{n \cdot (n-1)}{2})$$$) — the number of vertices and edges in the graph, respectively.The next $$$m$$$ lines contain two integers each $$$u$$$ and $$$v$$$ ($$$1 \le u, v \le n$$$, $$$u \ne v$$$) — numbers of vertices connected by an edge. It is guaranteed that the graph does not contain multiple edges and self-loops.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$. It is also guaranteed for the sum of $$$m$$$ over all test cases.OutputOutput $$$t$$$ lines, each of which is the answer to the corresponding test case. As an answer, output "YES" if Vlad's graph is a $$$k$$$-flower for some $$$k$$$, and "NO" otherwise.You can output the answer in any case (for example, the strings "yEs", "yes", "Yes" and "YES" will be recognized as a positive answer).ExamplesInput59 121 23 12 31 64 16 43 83 55 89 72 97 28 121 23 12 31 64 16 43 83 55 88 72 87 24 31 24 23 16 86 36 45 35 23 23 12 12 45 72 42 53 43 54 14 51 5OutputYES
NO
NO
NO
NOInput42 11 28 91 28 48 26 46 54 73 23 72 59 122 92 86 96 86 56 19 89 39 18 38 75 73 31 21 32 3OutputNO
NO
NO
NO



E. Living Sequencetime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputIn Japan, the number $$$4$$$ reads like death, so Bob decided to build alive sequence.Living sequence$$$a$$$ contains all natural numbers that do not contain the digit $$$4$$$. $$$a = [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, \ldots]$$$.For example, the number $$$1235$$$ is part of the sequence $$$a$$$, but the numbers $$$4321$$$, $$$443$$$ are not part of the sequence $$$a$$$.Bob realized that he does not know how to quickly search for a particular number by the position $$$k$$$ in the sequence, so he asks for your help.For example, if Bob wants to find the number at position $$$k = 4$$$ (indexing from $$$1$$$), you need to answer $$$a_k = 5$$$.InputThe first line of input data contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.In the only line of each test case, there is a single integer $$$k$$$ ($$$1 \le k \le 10^{12}$$$) — the position Bob is interested in.OutputFor each test case, print on a separate line the number $$$a_k$$$ in indexing with $$$1$$$.ExampleInput735221010012345827264634912Output3
6
25
11
121
18937
2932285320890



D. Umka and a Long Flighttime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe girl Umka loves to travel and participate in math olympiads. One day she was flying by plane to the next olympiad and out of boredom explored a huge checkered sheet of paper.Denote the $$$n$$$-th Fibonacci number as $$$F_n = \begin{cases} 1, & n = 0; \\ 1, & n = 1; \\ F_{n-2} + F_{n-1}, & n \ge 2. \end{cases}$$$A checkered rectangle with a height of $$$F_n$$$ and a width of $$$F_{n+1}$$$ is called a Fibonacci rectangleof order$$$n$$$.Umka has a Fibonacci rectangleof order$$$n$$$. Someone colored a cell in it at the intersection of the row $$$x$$$ and the column $$$y$$$.It is necessary to cut this rectangleexactlyinto $$$n+1$$$ squares in such way thatthe painted cell was in a square with a side of $$$1$$$;there wasat most onepair of squares with equal sides;the side of each square was equal to a Fibonacci number.Will Umka be able to cut this rectangle in that way?InputThe first line contains an integer $$$t$$$ ($$$1 \le t \le 2 \cdot 10^5$$$) — number of test cases.For each test case the integers $$$n$$$, $$$x$$$, $$$y$$$ are given ($$$1 \le n \le 44$$$, $$$1 \le x \le F_n$$$, $$$1 \le y \le F_{n+1}$$$) —the orderof the Fibonacci rectangle and the coordinates of the colored cell.OutputFor each test case, print "YES" if the answer is positive, and "NO" otherwise.You can print "YES" and "NO" in any case (for example, the strings "yEs", "yes" and "Yes" will be recognized as a positive answer).ExampleInput121 1 12 1 23 1 43 3 24 4 64 3 35 6 55 4 125 2 124 2 11 1 244 758465880 1277583853OutputYES
NO
YES
YES
YES
NO
YES
NO
NO
YES
YES
NONoteThe first, third and fourth test cases.



C. Restore the Arraytime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputKristina had an array $$$a$$$ of length $$$n$$$ consisting of non-negative integers.She built a new array $$$b$$$ of length $$$n-1$$$, such that $$$b_i = \max(a_i, a_{i+1})$$$ ($$$1 \le i \le n-1$$$).For example, suppose Kristina had an array $$$a$$$ = [$$$3, 0, 4, 0, 5$$$] of length $$$5$$$. Then she did the following:Calculated $$$b_1 = \max(a_1, a_2) = \max(3, 0) = 3$$$;Calculated $$$b_2 = \max(a_2, a_3) = \max(0, 4) = 4$$$;Calculated $$$b_3 = \max(a_3, a_4) = \max(4, 0) = 4$$$;Calculated $$$b_4 = \max(a_4, a_5) = \max(0, 5) = 5$$$.As a result, she got an array $$$b$$$ = [$$$3, 4, 4, 5$$$] of length $$$4$$$.You only know the array $$$b$$$. Find any matching array $$$a$$$ that Kristina may have originally had.InputThe first line of input data contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The description of the test cases follows.The first line of each test case contains one integer $$$n$$$ ($$$2 \le n \le 2 \cdot 10^5$$$) — the number of elements in the array $$$a$$$ that Kristina originally had.The second line of each test case contains exactly $$$n-1$$$ non-negative integer — elements of array $$$b$$$ ($$$0 \le b_i \le 10^9$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$, and that array $$$b$$$ was built correctly from some array $$$a$$$.OutputFor each test case on a separate line, print exactly $$$n$$$ non-negative integers — the elements of the array $$$a$$$ that Kristina originally had.If there are several possible answers — output any of them.ExampleInput1153 4 4 542 2 150 0 0 060 3 4 4 321043 3 354 2 5 543 3 342 1 034 468 1 3 5 10Output3 0 4 0 5
2 2 1 1
0 0 0 0 0
0 0 3 4 3 3
10 10
3 3 3 1
4 2 2 5 5
3 3 3 3
2 1 0 0
2 4 4
8 1 1 3 5 10NoteThe first test case is explained in the problem statement.In the second test case, we can get array $$$b$$$ = [$$$2, 2, 1$$$] from the array $$$a$$$ = [$$$2, 2, 1, 1$$$]:$$$b_1 = \max(a_1, a_2) = \max(2, 2) = 2$$$;$$$b_2 = \max(a_2, a_3) = \max(2, 1) = 2$$$;$$$b_3 = \max(a_3, a_4) = \max(1, 1) = 1$$$.In the third test case, all elements of the array $$$b$$$ are zeros. Since each $$$b_i$$$ is the maximum of two adjacent elements of array $$$a$$$, array $$$a$$$ can only consist entirely of zeros.In the fourth test case, we can get array $$$b$$$ = [$$$0, 3, 4, 4, 3$$$] from the array $$$a$$$ = [$$$0, 0, 3, 4, 3, 3$$$] :$$$b_1 = \max(a_1, a_2) = \max(0, 0) = 0$$$;$$$b_2 = \max(a_2, a_3) = \max(0, 3) = 3$$$;$$$b_3 = \max(a_3, a_4) = \max(3, 4) = 4$$$;$$$b_4 = \max(a_4, a_5) = \max(4, 3) = 4$$$;$$$b_5 = \max(a_5, a_6) = \max(3, 3) = 3$$$.



B. Conveyor Beltstime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputConveyor matrix $$$m_n$$$ is matrix of size $$$n \times n$$$, where $$$n$$$ is anevennumber. The matrix consists of concentric ribbons moving clockwise.In other words, the conveyor matrix for $$$n = 2$$$ is simply a matrix $$$2 \times 2$$$, whose cells form a cycle of length $$$4$$$ clockwise. For any natural $$$k \ge 2$$$, the matrix $$$m_{2k}$$$ is obtained by adding to the matrix $$$m_{2k - 2}$$$ an outer layer forming a clockwise cycle.The conveyor matrix $$$8 \times 8$$$.You are standing in a cell with coordinates $$$x_1, y_1$$$ and you want to get into a cell with coordinates $$$x_2, y_2$$$. A cell has coordinates $$$x, y$$$ if it is located at the intersection of the $$$x$$$th row and the $$$y$$$th column.Standing on some cell, every second you will move to the cell next in the direction of movement of the tape on which you are. You can also move to a neighboring cell by spending one unit of energy. Movements happen instantly and you can make an unlimited number of them at any time.Your task is to find the minimum amount of energy that will have to be spent to get from the cell with coordinates $$$x_1, y_1$$$ to the cell with coordinates $$$x_2, y_2$$$.For example, $$$n=8$$$ initially you are in a cell with coordinates $$$1,3$$$ and you want to get into a cell with coordinates $$$6, 4$$$. You can immediately make $$$2$$$ movements, once you are in a cell with coordinates $$$3, 3$$$, and then after $$$8$$$ seconds you will be in the right cell.InputThe first line contains an integer $$$t$$$ ($$$1 \le t \le 2 \cdot 10^5$$$) — the number of test cases.The descriptions of the test cases follow.The description of each test case consists of one string containing five integers $$$n$$$, $$$x_1$$$, $$$y_1$$$, $$$x_2$$$ and $$$y_2$$$ ($$$1 \le x_1, y_1, x_2, y_2 \le n \le 10^9$$$) — matrix size and the coordinates of the start and end cells. It is guaranteed that the number $$$n$$$ is even.OutputFor each test case, print one integer in a separate line — the minimum amount of energy that will have to be spent to get from the cell with coordinates $$$x_1, y_1$$$ to the cell with coordinates $$$x_2, y_2$$$.ExampleInput52 1 1 2 24 1 4 3 38 1 3 4 6100 10 20 50 1001000000000 123456789 987654321 998244353 500000004Output0
1
2
9
10590032



A. Insert Digittime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou have apositivenumber of length $$$n$$$ and one additional digit.You can insert this digit anywhere in the number, including at the beginning or at the end.Your task is to make the result as large as possible.For example, you have the number $$$76543$$$, and the additional digit is $$$4$$$. Then the maximum number you can get is $$$765443$$$, and it can be obtained in two ways — by inserting a digit after the $$$3$$$th or after the $$$4$$$th digit of the number.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The descriptions of the test cases follow.The first line of the description of each test case contains two integers $$$n$$$ and $$$d$$$ ($$$1 \le n \le 2 \cdot 10^5$$$; $$$0 \le d \le 9$$$) — the length of the number and an additional digit, respectively.The second line of the description of each test case contains a string consisting of $$$n$$$ digits — the number that you have initially. It is guaranteed that the number does not contain leading zeros.It is guaranteed that the sum of $$$n$$$ for all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output a string consisting of $$$n + 1$$$ digits — the maximum possible number that can be obtained.ExampleInput115 4765431 012 5443 66665 6135795 89753119 498765432101234567895 7737378 1200000007 0705895912 1828127127732Output765443
10
544
6666
613579
987531
98765443210123456789
773737
210000000
70589590
8281271277321



H. Last Numbertime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a multiset $$$S$$$. Initially, $$$S = \{1,2,3, \ldots, n\}$$$.You will perform the following operation $$$n-1$$$ times.Choose the largest number $$$S_{\text{max}}$$$ in $$$S$$$ and the smallest number $$$S_{\text{min}}$$$ in $$$S$$$. Remove the two numbers from $$$S$$$, and add $$$S_{\text{max}} - S_{\text{min}}$$$ into $$$S$$$.It's easy to show that there will be exactly one number left after $$$n-1$$$ operations. Output that number.InputEach test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^5$$$) — the number of test cases. Their description follows.For each test case, one single line contains a single integer $$$n$$$ ($$$2 \le n \le 10^9$$$) — the initial size of the multiset $$$S$$$.OutputFor each test case, output an integer denoting the only number left after $$$n-1$$$ operations.ExampleInput524715177567Output1
2
2
4
33914NoteWe show how the multiset $$$S$$$ changes for $$$n=4$$$.Operation $$$1$$$: $$$S=\{1,2,3,4\}$$$, remove $$$4$$$, $$$1$$$, add $$$3$$$.Operation $$$2$$$: $$$S=\{2,3,3\}$$$, remove $$$3$$$, $$$2$$$, add $$$1$$$.Operation $$$3$$$: $$$S=\{1,3\}$$$, remove $$$3$$$, $$$1$$$, add $$$2$$$.Final: $$$S = \{2\}$$$.Thus, the answer for $$$n = 4$$$ is $$$2$$$.



G. The Maximum Prefixtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou're going to generate an array $$$a$$$ with a length of at most $$$n$$$, where each $$$a_{i}$$$ equals either $$$1$$$ or $$$-1$$$.You generate this array in the following way.First, you choose some integer $$$k$$$ ($$$1\le k \le n$$$), which decides the length of $$$a$$$.Then, for each $$$i$$$ ($$$1\le i \le k$$$), you set $$$a_{i} = 1$$$ with probability $$$p_{i}$$$, otherwise set $$$a_{i} = -1$$$ (with probability $$$1 - p_{i}$$$).After the array is generated, you calculate $$$s_{i} = a_{1} + a_{2} + a_{3}+ \ldots + a_{i}$$$. Specially, $$$s_{0} = 0$$$. Then you let $$$S$$$ equal to $$$\displaystyle \max_{i=0}^{k}{s_{i}}$$$. That is, $$$S$$$ is the maximum prefix sum of the array $$$a$$$.You are given $$$n+1$$$ integers $$$h_{0} , h_{1}, \ldots ,h_{n}$$$. Thescoreof an array $$$a$$$ with maximum prefix sum $$$S$$$ is $$$h_{S}$$$. Now, for each $$$k$$$, you want to know the expected score for an array of length $$$k$$$ modulo $$$10^9+7$$$.InputEach test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 5000$$$) — the number of test cases. Their description follows.The first line contains an integer $$$n$$$ ($$$1\le n \le 5000$$$).Then for the following $$$n$$$ lines, each line contains two integers $$$x_{i}$$$ and $$$y_{i}$$$ ($$$0 \le x_{i} < 10^9 + 7$$$, $$$1\le y_{i} < 10^9 + 7$$$, $$$x_{i} \le y_{i}$$$), indicating $$$p_{i} = \frac{x_{i}}{y_{i}}$$$.The next line contains $$$n+1$$$ integers $$$h_{0},h_{1}, \ldots, h_{n}$$$ ($$$0 \le h_{i} < 10^9 + 7$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5000$$$.OutputFor each test case, output $$$n$$$ integers in one single line, the $$$i$$$-th of which denotes the expected score for an array of length $$$i$$$, modulo $$$10^9 + 7$$$.Formally, let $$$M = 10^9 + 7$$$. It can be shown that the answer can be expressed as an irreducible fraction $$$\frac{p}{q}$$$, where $$$p$$$ and $$$q$$$ are integers and $$$q \not \equiv 0 \pmod{M}$$$. Output the integer equal to $$$p \cdot q^{-1} \bmod M$$$. In other words, output such an integer $$$x$$$ that $$$0 \le x < M$$$ and $$$x \cdot q \equiv p \pmod{M}$$$.ExampleInput421 21 21 2 331 31 45 51 1 1 132 54 60 24 3 2 155 65 71 61 34 79 0 4 5 2 4Output500000005 750000007 
1 1 1 
200000005 333333339 333333339 
500000005 880952391 801587311 781746041 789304620NoteIn the first test case, if we choose $$$k=1$$$, there are $$$2$$$ possible arrays with equal probabilities: $$$[1]$$$ and $$$[-1]$$$. The $$$S$$$ values for them are $$$1$$$ and $$$0$$$. So the expected score is $$$\frac{1}{2}h_{0} + \frac{1}{2}h_{1} = \frac{3}{2}$$$. If we choose $$$k=2$$$, there are $$$4$$$ possible arrays with equal probabilities: $$$[1,1]$$$, $$$[1,-1]$$$, $$$[-1,1]$$$, $$$[-1,-1]$$$, and the $$$S$$$ values for them are $$$2,1,0,0$$$. So the expected score is $$$\frac{1}{2}h_{0} + \frac{1}{4}h_{1} + \frac{1}{4}h_{2} = \frac{7}{4}$$$.In the second test case, no matter what the $$$S$$$ value is, the score is always $$$1$$$, so the expected score is always $$$1$$$.



F. M-treetime limit per test2.5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA rooted tree is calledgoodif every vertex of the tree either is a leaf (a vertex with no children) or has exactly $$$m$$$ children.For a good tree, each leaf $$$u$$$ has a positive integer $$$c_{u}$$$ written on it, and we define the value of the leaf as $$$c_{u} + \mathrm{dep}_{u}$$$, where $$$\mathrm{dep}_{u}$$$ represents the number of edges of the path from vertex $$$u$$$ to the root (also known as the depth of $$$u$$$). Thevalueof a good tree is themaximumvalue of all its leaves.Now, you are given an array of $$$n$$$ integers $$$a_{1}, a_{2}, \ldots, a_{n}$$$, which are the integers that should be written on the leaves. You need to construct a good tree with $$$n$$$ leaves and write the integers from the array $$$a$$$ to all the leaves. Formally, you should assign each leaf $$$u$$$ an index $$$b_{u}$$$, where $$$b$$$ is a permutation of length $$$n$$$, and represent that the integer written on leaf $$$u$$$ is $$$c_u = a_{b_{u}}$$$. Under these constraints, you need tominimizethe value of the good tree.You have $$$q$$$ queries. Each query gives you $$$x$$$, $$$y$$$ and changes $$$a_{x}$$$ to $$$y$$$, and after that, you should output the minimum value of a good tree based on the current array $$$a$$$.A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array), and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).InputEach test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. Their description follows.The first line contains three integers $$$n$$$, $$$m$$$, and $$$q$$$ ($$$1\le n,q \le 2 \cdot 10^5$$$, $$$2\le m \le 2\cdot 10^5$$$, $$$n \equiv 1 \pmod {m - 1}$$$) — the number of the leaves, the constant $$$m$$$, and the number of queries.The second line contains $$$n$$$ integers $$$a_{1},a_{2}, \ldots, a_{n}$$$ ($$$1 \le a_{i} \le n$$$) — the initial array.For the following $$$q$$$ lines, each line contains two integers $$$x$$$ and $$$y$$$ ($$$1\le x,y\le n$$$), representing a query changing $$$a_{x}$$$ to $$$y$$$.It is guaranteed that both the sum of $$$n$$$ and the sum of $$$q$$$ do not exceed $$$2\cdot 10^5$$$.OutputFor each test case, output $$$q$$$ integers in one line, the $$$i$$$-th of which is the minimum tree value after the $$$i$$$-th change.ExampleInput35 3 33 3 4 4 51 42 43 55 2 43 3 4 4 51 42 53 54 57 3 41 2 2 3 3 3 41 42 15 56 6Output6 6 6
7 7 7 8
6 6 6 7NoteIn the first test case, after the first query, the current array $$$a$$$ is $$$[4,3,4,4,5]$$$. We can construct such a good tree:The first number inside a vertex is its index (in this problem, the indices do not matter, but help to understand the figure). If a vertex is a leaf, the second number inside the vertex is the integer written on it.We can tell that $$$\mathrm{dep}_{3}=\mathrm{dep}_{4}=1,\mathrm{dep}_{5}=\mathrm{dep}_{6}=\mathrm{dep}_{7}=2$$$ and the value of the tree, which is the maximum value over all leaves, is $$$5+1=6$$$. The value of leaves $$$5$$$, $$$6$$$, $$$7$$$ is also equal to $$$6$$$. It can be shown that this tree has the minimum value over all valid trees.



E. Monsterstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere is an undirected graph with $$$n$$$ vertices and $$$m$$$ edges. Initially, for each vertex $$$i$$$, there is a monster with danger $$$a_{i}$$$ on that vertex. For a monster with danger $$$a_{i}$$$, you can defeat it if and only if you have defeated at least $$$a_{i}$$$ other monsters before.Now you want to defeat all the monsters. First, you choose some vertex $$$s$$$ and defeat the monster on that vertex (since you haven't defeated any monsters before, $$$a_{s}$$$ has to be $$$0$$$). Then, you can move through the edges. If you want to move from vertex $$$u$$$ to vertex $$$v$$$, then the following must hold: either the monster on vertex $$$v$$$ has been defeated before, or you can defeat it now. For the second case, you defeat the monster on vertex $$$v$$$ and reach vertex $$$v$$$.You can pass the vertices and the edges any number of times. Determine whether you can defeat all the monsters or not.InputEach test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. Their description follows.The first line of each test case contains two integers $$$n$$$, $$$m$$$ ($$$1 \le n, m \le 2 \cdot 10^5$$$) — the number of vertices and edges in the graph respectively.The second line of each test case contains $$$n$$$ integers $$$a_{1}, a_{2}, \ldots, a_{n}$$$ ($$$0 \le a_{i} \le n$$$) — the dangers of monsters on corresponding vertices.For the following $$$m$$$ lines, each line contains two integers $$$u$$$, $$$v$$$ ($$$1 \le u, v \le n$$$), describing an edge connecting vertex $$$u$$$ and vertex $$$v$$$. It is guaranteed that there are no multi-edges or self-loops in the graph.It is guaranteed that both the sum of $$$n$$$ and the sum of $$$m$$$ over all test cases do not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output "YES" if you can defeat all the monsters, or "NO" otherwise.You can output the answer in any case (upper or lower). For example, the strings "yEs", "yes", "Yes", and "YES" will be recognized as positive responses.ExampleInput54 32 1 0 31 22 33 46 60 1 2 3 0 11 22 33 44 54 65 64 30 1 2 01 22 31 34 61 1 1 01 23 24 32 44 11 35 50 1 3 2 01 22 33 44 53 5OutputYES
YES
NO
YES
NONoteIn the first test case, you can start at vertex $$$3$$$ and defeat the monster on it, before you go to vertices $$$2$$$, $$$1$$$ in this order, defeating the monsters on them as well. Then you return to vertex $$$3$$$, and go to vertex $$$4$$$, defeating the monster on it.In the third test case, there is no path to vertex $$$4$$$ if you start at vertex $$$1$$$. Also, there is no path to vertices $$$1$$$, $$$2$$$, and $$$3$$$ if you start at vertex $$$4$$$.



D. Climbing the Treetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe snails are climbing a tree. The tree height is $$$h$$$ meters, and snails start at position $$$0$$$.Each snail has two attributes $$$a$$$ and $$$b$$$ ($$$a > b$$$). Starting from the $$$1$$$-st day, one snail climbs the tree like this: during the daylight hours of the day, he climbs up $$$a$$$ meters; during the night, the snail rests, and he slides down $$$b$$$ meters. If on the $$$n$$$-th day, the snail reaches position $$$h$$$ for the first time (that is, the top of the tree), he will finish climbing, and we say that the snail spends $$$n$$$ days climbing the tree. Note that on the last day of climbing, the snail doesn't necessarily climb up $$$a$$$ meters, in case his distance to the top is smaller than $$$a$$$.Unfortunately, you don't know the exact tree height $$$h$$$ at first, but you know that $$$h$$$ is a positive integer. There are $$$q$$$ events of two kinds.Event of type $$$1$$$: a snail with attributes $$$a$$$, $$$b$$$ comes and claims that he spent $$$n$$$ days climbing the tree. If this message contradicts previously adopted information (i. e. there is no tree for which all previously adopted statements and this one are true), ignore it. Otherwise, adopt it.Event of type $$$2$$$: a snail with attributes $$$a$$$, $$$b$$$ comes and asks you how many days he will spend if he climbs the tree. You can only give the answer based on the information you have adopted so far. If you cannot determine the answer precisely, report that.You need to deal with all the events in order.InputEach test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. Then follows their description.The first line of each test case contains one integer $$$q$$$ ($$$1\le q \le 2\cdot 10^5$$$) — the number of events.For the following $$$q$$$ lines, the first integer of each line is either $$$1$$$ or $$$2$$$, denoting the event type.If the event type is $$$1$$$, then three integers $$$a$$$, $$$b$$$, and $$$n$$$ ($$$1\le a,b,n \le 10^9$$$, $$$a>b$$$) follow.If the event type is $$$2$$$, then two integers $$$a$$$ and $$$b$$$ ($$$1\le a,b \le 10^9$$$, $$$a>b$$$) follow.It is guaranteed that the sum of $$$q$$$ over all test cases does not exceed $$$2\cdot 10^5$$$.OutputFor each test case, output $$$q$$$ integers in one line, one for each event, in order. Specifically,for each event of type $$$1$$$, if you adopt the message, output $$$1$$$; if you ignore it, output $$$0$$$;for each event of type $$$2$$$, output an integer denoting the number of days that the snail will spend. If you cannot determine it, output $$$-1$$$.ExampleInput531 3 2 52 4 12 3 231 6 5 12 3 12 6 231 4 2 21 2 1 32 10 291 7 3 61 2 1 82 5 11 10 9 71 8 1 21 10 5 81 10 7 72 7 41 9 4 291 2 1 61 8 5 61 4 2 72 9 11 5 1 41 5 2 71 7 1 91 9 1 42 10 8Output1 2 5
1 -1 1
1 0 1
1 0 -1 0 0 0 1 8 0
1 0 0 1 0 0 0 0 1NoteIn the first test case, we can determine $$$h=7$$$ through the first message, so we know the second snail and the third snail need to spend $$$2$$$ and $$$5$$$ days respectively to reach the top.Let's show how the second snail climbs:During the daylight hours of the $$$1$$$st day: climbs up $$$4$$$ meters, now at position $$$4$$$.During the night of the $$$1$$$st day: slides down $$$1$$$ meters, now at position $$$3$$$.During the daylight hours of the $$$2$$$nd day: climbs up $$$4$$$ meters, now at position $$$7$$$ (reaches the top).In the third test case, the second snail's message contradicts the first snail's, because the second snail says he spent $$$3$$$ days, and he can climb at most $$$1+1+2=4$$$ meters in the first $$$3$$$ days. However, the first snail only needs $$$1$$$ day to climb $$$4$$$ meters.



C. Make It Permutationtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou have an integer array $$$a$$$ of length $$$n$$$. There are two kinds of operations you can make.Remove an integer from $$$a$$$. This operation costs $$$c$$$.Insert an arbitrary positive integer $$$x$$$ to any position of $$$a$$$ (to the front, to the back, or between any two consecutive elements). This operation costs $$$d$$$.You want to make the final array a permutation ofanypositive length. Please output the minimum cost of doing that. Note that you can make the array empty during the operations, but the final array must contain at least one integer.A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array), and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).InputEach test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. Their description follows.The first line of each test case contains three integers $$$n$$$, $$$c$$$, $$$d$$$ ($$$1 \le n \le 10^5$$$, $$$1 \le c,d \le 10^9$$$).The second line of each test case contains $$$n$$$ integers $$$a_{1}, a_{2}, \ldots, a_{n}$$$ ($$$1 \le a_{i} \le 10^9$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output in one line the minimum cost to make the final array a permutation.ExampleInput83 3 31 2 35 1 51 2 3 5 65 2 31 1 1 3 35 1 102 4 6 8 106 2 87 3 5 4 4 84 10 11 2 6 74 3 32 5 8 72 1000000000 11000000000 1Output0
2
8
14
20
3
12
999999998NoteIn the first test case, the array is already a permutation, so there's no need for operations.In the second test case, we can remove numbers $$$5$$$, $$$6$$$ to get the permutation $$$[1,2,3]$$$ in cost $$$2$$$. Note that we can also get a permutation by inserting a number $$$4$$$, but it costs $$$5$$$.In the third test case, we can just remove all the numbers except for the first number $$$1$$$. It costs $$$8$$$, and the final array is $$$[1]$$$, which is a permutation of length $$$1$$$.In the fourth test case, we can remove all the numbers except for $$$2$$$, and insert a number $$$1$$$ to the first position. It costs $$$4+10=14$$$, and the final array is $$$[1,2]$$$, which is a permutation of length $$$2$$$.



B. Candiestime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis problem is about candy. Initially, you only have $$$1$$$ candy, and you want to have exactly $$$n$$$ candies.You can use the two following spells in any order at most $$$40$$$ times in total.Assume you have $$$x$$$ candies now. If you use the first spell, then $$$x$$$ candies become $$$2x-1$$$ candies.Assume you have $$$x$$$ candies now. If you use the second spell, then $$$x$$$ candies become $$$2x+1$$$ candies.Construct a sequence of spells, such that after using them in order, you will haveexactly$$$n$$$ candies, or determine it's impossible.InputEach test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. Their description follows.Each test case contains one line with a single integer $$$n$$$ ($$$2 \le n \le 10^9$$$) — the required final number of candies.OutputFor each test case, output the following.If it's possible to eventually have $$$n$$$ candies within $$$40$$$ spells, in the first line print an integer $$$m$$$ ($$$1 \le m \le 40$$$), representing the total number of spells you use.In the second print $$$m$$$ integers $$$a_{1}, a_{2}, \ldots, a_{m}$$$ ($$$a_{i}$$$ is $$$1$$$ or $$$2$$$) separated by spaces, where $$$a_{i} = 1$$$ means that you use the first spell in the $$$i$$$-th step, while $$$a_{i} = 2$$$ means that you use the second spell in the $$$i$$$-th step.Note that youdo nothave to minimize $$$m$$$, and if there are multiple solutions, you may output any one of them.If it's impossible, output $$$-1$$$ in one line.ExampleInput423717Output-1
1
2 
2
2 2 
4
2 1 1 1NoteFor $$$n=3$$$, you can just use the second spell once, and then have $$$2 \cdot 1 + 1 = 3$$$ candies.For $$$n=7$$$, you can use the second spell twice. After the first step, you will have $$$3$$$ candies. And after the second step, you will have $$$2 \cdot 3 + 1 = 7$$$ candies.



A. Beautiful Sequencetime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputA sequence of $$$m$$$ integers $$$a_{1}, a_{2}, \ldots, a_{m}$$$ isgood, if and only if there exists at least one $$$i$$$ ($$$1 \le i \le m$$$) such that $$$a_{i} = i$$$. For example, $$$[3,2,3]$$$ is a good sequence, since $$$a_{2} = 2$$$, $$$a_{3} = 3$$$, while $$$[3,1,1]$$$ is not a good sequence, since there is no $$$i$$$ such that $$$a_{i} = i$$$.A sequence $$$a$$$ isbeautiful, if and only if there exists at least one subsequence of $$$a$$$ satisfying that this subsequence is good. For example, $$$[4,3,2]$$$ is a beautiful sequence, since its subsequence $$$[4,2]$$$ is good, while $$$[5,3,4]$$$ is not a beautiful sequence.A sequence $$$b$$$ is a subsequence of a sequence $$$a$$$ if $$$b$$$ can be obtained from $$$a$$$ by the deletion of several (possibly, zero or all) elements.Now you are given a sequence, check whether it is beautiful or not.InputEach test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 500$$$) — the number of test cases. Their description follows.The first line of each test case contains an integer $$$n$$$ ($$$1 \le n \le 100$$$) — the length of the given sequence.The second line of each test case contains $$$n$$$ integers $$$a_{1}, a_{2}, \ldots, a_{n}$$$ ($$$1 \le a_{i} \le 10^9$$$), representing the sequence.OutputFor each test case, output "YES" or "NO"(without quotes) in one line, representing whether the given sequence is beautiful.You can output the answer in any case (upper or lower). For example, the strings "yEs", "yes", "Yes", and "YES" will be recognized as positive responses.ExampleInput733 2 142 4 3 552 3 5 5 623 152 4 5 2 345 6 7 866 5 4 3 2 1OutputYES
YES
NO
YES
YES
NO
YESNoteIn the first test case, the good subsequence is $$$b=[3,2]$$$, where $$$b_{2} = 2$$$.In the second test case, the good subsequence is $$$b=[2,4,3]$$$, where $$$b_{3} = 3$$$.In the fourth test case, the good subsequence is $$$b=[1]$$$, where $$$b_{1} = 1$$$.In the fifth test case, the good subsequence is $$$b=[2,2]$$$, where $$$b_{2} = 2$$$.



G. Predictiontime limit per test4 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputConsider a tournament with $$$n$$$ participants. The rating of the $$$i$$$-th participant is $$$a_i$$$.The tournament will be organized as follows. First of all, organizers will assign each participant an index from $$$1$$$ to $$$n$$$. All indices will be unique. Let $$$p_i$$$ be the participant who gets the index $$$i$$$.Then, $$$n-1$$$ games will be held. In the first game, participants $$$p_1$$$ and $$$p_2$$$ will play. In the second game, the winner of the first game will play against $$$p_3$$$. In the third game, the winner of the second game will play against $$$p_4$$$, and so on — in the last game, the winner of the $$$(n-2)$$$-th game will play against $$$p_n$$$.Monocarp wants to predict the results of all $$$n-1$$$ games (of course, he will do the prediction only after the indices of the participants are assigned). He knows for sure that, when two participants with ratings $$$x$$$ and $$$y$$$ play, and $$$|x - y| > k$$$, the participant with the higher rating wins. But if $$$|x - y| \le k$$$, any of the two participants may win.Among all $$$n!$$$ ways to assign the indices to participants, calculate the number of ways to do this so that Monocarp can predict the results ofall$$$n-1$$$ games. Since the answer can be large, print it modulo $$$998244353$$$.InputThe first line contains two integers $$$n$$$ and $$$k$$$ ($$$2 \le n \le 10^6$$$; $$$0 \le k \le 10^9$$$).The second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$0 \le a_1 \le a_2 \le \dots \le a_n \le 10^9$$$).OutputPrint one integer — the number of ways to assign the indices to the participants so that Monocarp can predict the results of all $$$n-1$$$ games.ExamplesInput4 3
7 12 17 21Output24Input3 7
4 9 28Output4Input4 1
1 2 3 4Output0Input4 1
1 2 2 4Output12Input16 30
8 12 15 27 39 44 49 50 51 53 58 58 59 67 68 100Output527461297NoteIn the first example, a match with any pair of players can be predicted by Monocarp, so all $$$24$$$ ways to assign indices should be counted.In the second example, suitable ways are $$$[1, 3, 2]$$$, $$$[2, 3, 1]$$$, $$$[3, 1, 2$$$] and $$$[3, 2, 1]$$$.



F. Traveling in Berlandtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere are $$$n$$$ cities in Berland, arranged in a circle and numbered from $$$1$$$ to $$$n$$$ in clockwise order.You want to travel all over Berland, starting in some city, visiting all the other cities and returning to the starting city. Unfortunately, you can only drive along the Berland Ring Highway, which connects all $$$n$$$ cities. The road was designed by a very titled and respectable minister, so it is one-directional — it can only be traversed clockwise, only from the city $$$i$$$ to the city $$$(i \bmod n) + 1$$$ (i.e. from $$$1$$$ to $$$2$$$, from $$$2$$$ in $$$3$$$, ..., from $$$n$$$ to $$$1$$$).The fuel tank of your car holds up to $$$k$$$ liters of fuel. To drive from the $$$i$$$-th city to the next one, $$$a_i$$$ liters of fuel are needed (and are consumed in the process).Every city has a fuel station; a liter of fuel in the $$$i$$$-th city costs $$$b_i$$$ burles. Refueling between cities is not allowed; if fuel has run out between cities, then your journey is considered incomplete.For each city, calculate the minimum cost of the journey if you start and finish it in that city.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$3 \le n \le 2 \cdot 10^5$$$; $$$1 \le k \le 10^9$$$) — the number of cities and the volume of fuel tank, respectively.The second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$1 \le a_i \le k$$$).The third line contains $$$n$$$ integers $$$b_1, b_2, \dots, b_n$$$ ($$$1 \le b_i \le 2$$$).The sum of $$$n$$$ over all test cases doesn't exceed $$$2 \cdot 10^5$$$.OutputFor each test case, print $$$n$$$ integers, where the $$$i$$$-th of them is equal to the minimum cost of the journey if you start and finish in the $$$i$$$-th city.ExampleInput43 53 4 41 2 25 71 3 2 5 12 1 1 1 24 31 2 1 32 2 2 23 22 2 21 2 1Output17 19 17 
13 12 12 12 14 
14 14 14 14 
8 8 8



E. Two Tankstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere are two water tanks, the first one fits $$$a$$$ liters of water, the second one fits $$$b$$$ liters of water. The first tank has $$$c$$$ ($$$0 \le c \le a$$$) liters of water initially, the second tank has $$$d$$$ ($$$0 \le d \le b$$$) liters of water initially.You want to perform $$$n$$$ operations on them. The $$$i$$$-th operation is specified by a single non-zero integer $$$v_i$$$. If $$$v_i > 0$$$, then you try to pour $$$v_i$$$ liters of water from the first tank into the second one. If $$$v_i < 0$$$, you try to pour $$$-v_i$$$ liters of water from the second tank to the first one.When you try to pour $$$x$$$ liters of water from the tank that has $$$y$$$ liters currently available to the tank that can fit $$$z$$$ more liters of water, the operation only moves $$$\min(x, y, z)$$$ liters of water.For all pairs of the initial volumes of water $$$(c, d)$$$ such that $$$0 \le c \le a$$$ and $$$0 \le d \le b$$$, calculate the volume of water in the first tank after all operations are performed.InputThe first line contains three integers $$$n, a$$$ and $$$b$$$ ($$$1 \le n \le 10^4$$$; $$$1 \le a, b \le 1000$$$) — the number of operations and the capacities of the tanks, respectively.The second line contains $$$n$$$ integers $$$v_1, v_2, \dots, v_n$$$ ($$$-1000 \le v_i \le 1000$$$; $$$v_i \neq 0$$$) — the volume of water you try to pour in each operation.OutputFor all pairs of the initial volumes of water $$$(c, d)$$$ such that $$$0 \le c \le a$$$ and $$$0 \le d \le b$$$, calculate the volume of water in the first tank after all operations are performed.Print $$$a + 1$$$ lines, each line should contain $$$b + 1$$$ integers. The $$$j$$$-th value in the $$$i$$$-th line should be equal to the answer for $$$c = i - 1$$$ and $$$d = j - 1$$$.ExamplesInput3 4 4
-2 1 2Output0 0 0 0 0 
0 0 0 0 1 
0 0 1 1 2 
0 1 1 2 3 
1 1 2 3 4Input3 9 5
1 -2 2Output0 0 0 0 0 0 
0 0 0 0 0 1 
0 1 1 1 1 2 
1 2 2 2 2 3 
2 3 3 3 3 4 
3 4 4 4 4 5 
4 5 5 5 5 6 
5 6 6 6 6 7 
6 7 7 7 7 8 
7 7 7 7 8 9NoteConsider $$$c = 3$$$ and $$$d = 2$$$ from the first example:The first operation tries to move $$$2$$$ liters of water from the second tank to the first one, the second tank has $$$2$$$ liters available, the first tank can fit $$$1$$$ more liter. Thus, $$$\min(2, 2, 1) = 1$$$ liter is moved, the first tank now contains $$$4$$$ liters, the second tank now contains $$$1$$$ liter.The second operation tries to move $$$1$$$ liter of water from the first tank to the second one. $$$\min(1, 4, 3) = 1$$$ liter is moved, the first tank now contains $$$3$$$ liters, the second tank now contains $$$2$$$ liter.The third operation tries to move $$$2$$$ liter of water from the first tank to the second one. $$$\min(2, 3, 2) = 2$$$ liters are moved, the first tank now contains $$$1$$$ liter, the second tank now contains $$$4$$$ liters.There's $$$1$$$ liter of water in the first tank at the end. Thus, the third value in the fourth row is $$$1$$$.



D. Binary String Sortingtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a binary string $$$s$$$ consisting of only characters0and/or1.You can perform several operations on this string (possibly zero). There are two types of operations:choose two consecutive elements and swap them. In order to perform this operation, you pay $$$10^{12}$$$ coins;choose any element from the string and remove it. In order to perform this operation, you pay $$$10^{12}+1$$$ coins.Your task is to calculate the minimum number of coins required to sort the string $$$s$$$ in non-decreasing order (i. e. transform $$$s$$$ so that $$$s_1 \le s_2 \le \dots \le s_m$$$, where $$$m$$$ is the length of the string after applying all operations). An empty string is also considered sorted in non-decreasing order.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The only line of each test case contains the string $$$s$$$ ($$$1 \le |s| \le 3 \cdot 10^5$$$), consisting of only characters0and/or1.The sum of lengths of all given strings doesn't exceed $$$3 \cdot 10^5$$$.OutputFor each test case, print a single integer — the minimum number of coins required to sort the string $$$s$$$ in non-decreasing order.ExampleInput61000010100101101100110111111Output1000000000001
0
1000000000000
2000000000001
2000000000002
0NoteIn the first example, you have to remove the $$$1$$$-st element, so the string becomes equal to00.In the second example, the string is already sorted.In the third example, you have to swap the $$$2$$$-nd and the $$$3$$$-rd elements, so the string becomes equal to0011.In the fourth example, you have to swap the $$$3$$$-rd and the $$$4$$$-th elements, so the string becomes equal to00011101, and then remove the $$$7$$$-th element, so the string becomes equal to0001111.In the fifth example, you have to remove the $$$1$$$-st element, so the string becomes equal to001101, and then remove the $$$5$$$-th element, so the string becomes equal to00111.In the sixth example, the string is already sorted.



C. Sum on Subarraystime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputFor an array $$$a = [a_1, a_2, \dots, a_n]$$$, let's denote itssubarray$$$a[l, r]$$$ as the array $$$[a_l, a_{l+1}, \dots, a_r]$$$.For example, the array $$$a = [1, -3, 1]$$$ has $$$6$$$ non-empty subarrays:$$$a[1,1] = [1]$$$;$$$a[1,2] = [1,-3]$$$;$$$a[1,3] = [1,-3,1]$$$;$$$a[2,2] = [-3]$$$;$$$a[2,3] = [-3,1]$$$;$$$a[3,3] = [1]$$$.You are given two integers $$$n$$$ and $$$k$$$. Construct an array $$$a$$$ consisting of $$$n$$$ integers such that:all elements of $$$a$$$ are from $$$-1000$$$ to $$$1000$$$;$$$a$$$ has exactly $$$k$$$ subarrays with positive sums;the rest $$$\dfrac{(n+1) \cdot n}{2}-k$$$ subarrays of $$$a$$$ have negative sums.InputThe first line contains one integer $$$t$$$ ($$$1 \le t \le 5000$$$) — the number of test cases.Each test case consists of one line containing two integers $$$n$$$ and $$$k$$$ ($$$2 \le n \le 30$$$; $$$0 \le k \le \dfrac{(n+1) \cdot n}{2}$$$).OutputFor each test case, print $$$n$$$ integers — the elements of the array meeting the constraints. It can be shown that the answer always exists. If there are multiple answers, print any of them.ExampleInput43 22 02 24 6Output1 -3 1
-13 -42
-13 42
-3 -4 10 -2



On Page -> 2

B. Points on Planetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a two-dimensional plane, and you need to place $$$n$$$ chips on it.You can place a chip only at a point with integer coordinates. The cost of placing a chip at the point $$$(x, y)$$$ is equal to $$$|x| + |y|$$$ (where $$$|a|$$$ is the absolute value of $$$a$$$).The cost of placing $$$n$$$ chips is equal to themaximumamong the costs of each chip.You need to place $$$n$$$ chips on the plane in such a way that the Euclidean distance between each pair of chips isstrictly greaterthan $$$1$$$, and the cost is the minimum possible.InputThe first line contains one integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases. Next $$$t$$$ cases follow.The first and only line of each test case contains one integer $$$n$$$ ($$$1 \le n \le 10^{18}$$$) — the number of chips you need to place.OutputFor each test case, print a single integer — the minimum cost to place $$$n$$$ chips if the distance between each pair of chips must be strictly greater than $$$1$$$.ExampleInput4135975461057789971042Output0
1
2
987654321NoteIn the first test case, you can place the only chip at point $$$(0, 0)$$$ with total cost equal to $$$0 + 0 = 0$$$.In the second test case, you can, for example, place chips at points $$$(-1, 0)$$$, $$$(0, 1)$$$ and $$$(1, 0)$$$ with costs $$$|-1| + |0| = 1$$$, $$$|0| + |1| = 1$$$ and $$$|0| + |1| = 1$$$. Distance between each pair of chips is greater than $$$1$$$ (for example, distance between $$$(-1, 0)$$$ and $$$(0, 1)$$$ is equal to $$$\sqrt{2}$$$). The total cost is equal to $$$\max(1, 1, 1) = 1$$$.In the third test case, you can, for example, place chips at points $$$(-1, -1)$$$, $$$(-1, 1)$$$, $$$(1, 1)$$$, $$$(0, 0)$$$ and $$$(0, 2)$$$. The total cost is equal to $$$\max(2, 2, 2, 0, 2) = 2$$$.



A. Garlandtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou have a garland consisting of $$$4$$$ colored light bulbs, the color of the $$$i$$$-th light bulb is $$$s_i$$$.Initially, all the light bulbs are turned off. Your task is to turn all the light bulbs on. You can perform the following operation any number of times: select a light bulb and switch its state (turn it on if it was off, and turn it off if it was on). The only restriction on the above operation is that you can apply the operation to a light bulb only if the previous operation was applied to a light bulb of a different color (the first operation can be applied to any light bulb).Calculate the minimum number of operations to turn all the light bulbs on, or report that this is impossible.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The single line of each test case contains $$$s$$$ — a sequence of $$$4$$$ characters, where each character is a decimal digit. The $$$i$$$-th character denotes the color of the $$$i$$$-th light bulb.OutputFor each test case, print one integer — the minimum number of operations to turn all the light bulbs on. If it is impossible to turn all the bulbs on, print-1.ExampleInput3954600003313Output4
-1
6NoteIn the first example, all the colors are different, so you can just turn all the bulbs on in $$$4$$$ operations.In the second example, it is impossible to turn all the bulbs on, because after you switch one light bulb, it is impossible to turn the others on.In the third example, you can proceed as follows: turn the first light bulb on, turn the third light bulb on, turn the fourth light bulb on, turn the third light bulb off, turn the second light bulb on, turn the third light bulb on.



E3. Minibuses on Venus (hard version)time limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the hard version of the problem. The only difference between the three versions is the constraints on $$$n$$$ and $$$k$$$. You can make hacks only if all versions of the problem are solved.Maxim is a minibus driver on Venus.To ride on Maxim's minibus, you need a ticket. Each ticket has a number consisting of $$$n$$$ digits. However, as we know, the residents of Venus use a numeral system with base $$$k$$$, rather than the decimal system. Therefore, the ticket number can be considered as a sequence of $$$n$$$ integers from $$$0$$$ to $$$k-1$$$, inclusive.The residents of Venus consider a ticket to beluckyif there is a digit on it that is equal to the sum of the remaining digits, modulo $$$k$$$. For example, if $$$k=10$$$, then the ticket $$$7135$$$ is lucky because $$$7 + 1 + 5 \equiv 3 \pmod{10}$$$. On the other hand, the ticket $$$7136$$$ is not lucky because no digit is equal to the sum of the others modulo $$$10$$$.Once, while on a trip, Maxim wondered: how many lucky tickets exist? At the same time, Maxim understands that this number can be very large, so he is interested only in the answer modulo some prime number $$$m$$$.InputThe only line of the input contains three integers $$$n$$$, $$$k$$$ and $$$m$$$ ($$$1 \le n \le 10^{18}$$$, $$$1 \le k \le 2000$$$, $$$10^8 \le m \le 10^9 + 7$$$, $$$m$$$ is a prime number) — the number of digits on the ticket, the base of the numeral system on Venus, and the module for answer calculation.OutputPrint one integer — the number of lucky tickets modulo $$$m$$$, i. e. the remainder after dividing the answer by $$$m$$$.ExamplesInput3 2 1000000007Output4Input3 4 1000000007Output28NoteIn the first example, there are only four lucky tickets: $$$000$$$, $$$011$$$, $$$101$$$, and $$$110$$$.



E2. Minibuses on Venus (medium version)time limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the medium version of the problem. The only difference between the three versions is the constraints on $$$n$$$ and $$$k$$$. You can make hacks only if all versions of the problem are solved.Maxim is a minibus driver on Venus.To ride on Maxim's minibus, you need a ticket. Each ticket has a number consisting of $$$n$$$ digits. However, as we know, the residents of Venus use a numeral system with base $$$k$$$, rather than the decimal system. Therefore, the ticket number can be considered as a sequence of $$$n$$$ integers from $$$0$$$ to $$$k-1$$$, inclusive.The residents of Venus consider a ticket to beluckyif there is a digit on it that is equal to the sum of the remaining digits, modulo $$$k$$$. For example, if $$$k=10$$$, then the ticket $$$7135$$$ is lucky because $$$7 + 1 + 5 \equiv 3 \pmod{10}$$$. On the other hand, the ticket $$$7136$$$ is not lucky because no digit is equal to the sum of the others modulo $$$10$$$.Once, while on a trip, Maxim wondered: how many lucky tickets exist? At the same time, Maxim understands that this number can be very large, so he is interested only in the answer modulo some prime number $$$m$$$.InputThe only line of the input contains three integers $$$n$$$, $$$k$$$ and $$$m$$$ ($$$1 \le n \le 10^{18}$$$, $$$1 \le k \le 100$$$, $$$10^8 \le m \le 10^9 + 7$$$, $$$m$$$ is a prime number) — the number of digits on the ticket, the base of the numeral system on Venus, and the module for answer calculation.OutputPrint one integer — the number of lucky tickets modulo $$$m$$$, i. e. the remainder after dividing the answer by $$$m$$$.ExamplesInput3 2 1000000007Output4Input3 4 1000000007Output28NoteIn the first example, there are only four lucky tickets: $$$000$$$, $$$011$$$, $$$101$$$, and $$$110$$$.



E1. Minibuses on Venus (easy version)time limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the easy version of the problem. The only difference between the three versions is the constraints on $$$n$$$ and $$$k$$$. You can make hacks only if all versions of the problem are solved.Maxim is a minibus driver on Venus.To ride on Maxim's minibus, you need a ticket. Each ticket has a number consisting of $$$n$$$ digits. However, as we know, the residents of Venus use a numeral system with base $$$k$$$, rather than the decimal system. Therefore, the ticket number can be considered as a sequence of $$$n$$$ integers from $$$0$$$ to $$$k-1$$$, inclusive.The residents of Venus consider a ticket to beluckyif there is a digit on it that is equal to the sum of the remaining digits, modulo $$$k$$$. For example, if $$$k=10$$$, then the ticket $$$7135$$$ is lucky because $$$7 + 1 + 5 \equiv 3 \pmod{10}$$$. On the other hand, the ticket $$$7136$$$ is not lucky because no digit is equal to the sum of the others modulo $$$10$$$.Once, while on a trip, Maxim wondered: how many lucky tickets exist? At the same time, Maxim understands that this number can be very large, so he is interested only in the answer modulo some prime number $$$m$$$.InputThe only line of the input contains three integers $$$n$$$, $$$k$$$ and $$$m$$$ ($$$1 \le n \le 100$$$, $$$1 \le k \le 30$$$, $$$10^8 \le m \le 10^9 + 7$$$, $$$m$$$ is a prime number) — the number of digits on the ticket, the base of the numeral system on Venus, and the module for answer calculation.OutputPrint one integer — the number of lucky tickets modulo $$$m$$$, i. e. the remainder after dividing the answer by $$$m$$$.ExamplesInput3 2 1000000007Output4Input3 4 1000000007Output28NoteIn the first example, there are only four lucky tickets: $$$000$$$, $$$011$$$, $$$101$$$, and $$$110$$$.



D. Petya, Petya, Petr, and Palindromestime limit per test1.5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputPetya and his friend, the robot Petya++, have a common friend — the cyborg Petr#. Sometimes Petr# comes to the friends for a cup of tea and tells them interesting problems.Today, Petr# told them the following problem.A palindrome is a sequence that reads the same from left to right as from right to left. For example, $$$[38, 12, 8, 12, 38]$$$, $$$[1]$$$, and $$$[3, 8, 8, 3]$$$ are palindromes.Let's call thepalindromicityof a sequence $$$a_1, a_2, \dots, a_n$$$ the minimum count of elements that need to be replaced to make this sequence a palindrome. For example, the palindromicity of the sequence $$$[38, 12, 8, 38, 38]$$$ is $$$1$$$ since it is sufficient to replace the number $$$38$$$ at the fourth position with the number $$$12$$$. And the palindromicity of the sequence $$$[3, 3, 5, 5, 5]$$$ is two since you can replace the first two threes with fives, and the resulting sequence $$$[5, 5, 5, 5, 5]$$$ is a palindrome.Given a sequence $$$a$$$ of length $$$n$$$, and anoddinteger $$$k$$$, you need to find the sum of palindromicity of all subarrays of length $$$k$$$, i. e., the sum of the palindromicity values for the sequences $$$a_i, a_{i+1}, \dots, a_{i+k-1}$$$ for all $$$i$$$ from $$$1$$$ to $$$n-k+1$$$.The students quickly solved the problem. Can you do it too?InputThe first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \le n \le 2 \cdot 10^5$$$, $$$1 \le k \le n$$$, $$$k$$$ is odd) — the length of the sequence and the length of subarrays for which it is necessary to determine whether they are palindromes.The second line of the input contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \le a_i \le 2 \cdot 10^5$$$) — the sequence itself.OutputOutput a single integer — the total palindromicity of all subarrays of length $$$k$$$.ExamplesInput8 5
1 2 8 2 5 2 8 6Output4Input9 9
1 2 3 4 5 4 3 2 1Output0NoteIn the first example, the palindromicity of the subarray $$$[1, 2, 8, 2, 5]$$$ is $$$1$$$, the palindromicity of the string $$$[2, 8, 2, 5, 2]$$$ is also $$$1$$$, the palindromicity of the string $$$[8, 2, 5, 2, 8]$$$ is $$$0$$$, and the palindromicity of the string $$$[2, 5, 2, 8, 6]$$$ is $$$2$$$. The total palindromicity is $$$1+1+0+2 = 4$$$.In the second example, the only substring of length $$$9$$$ coincides with the entire string, and its palindromicity is $$$0$$$, so the answer is also $$$0$$$.



C. Unlucky Numberstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputIn this problem, unlike problem A, you need to look forunluckiest number, not the luckiest one.Note that the constraints of this problem differ from such in problem A.Olympus City recently launched the production of personal starships. Now everyone on Mars can buy one and fly to other planets inexpensively.Each starship has a number —some positive integer $$$x$$$. Let's define theluckinessof a number $$$x$$$ as the difference between the largest and smallest digits of that number. For example, $$$142857$$$ has $$$8$$$ as its largest digit and $$$1$$$ as its smallest digit, so its luckiness is $$$8-1=7$$$. And the number $$$111$$$ has all digits equal to $$$1$$$, so its luckiness is zero.Hateehc is a famous Martian blogger who often flies to different corners of the solar system. To release interesting videos even faster, he decided to buy himself a starship. When he came to the store, he saw starships with numbers from $$$l$$$ to $$$r$$$ inclusively. While in the store, Hateehc wanted to find a starship with theunluckiestnumber.Since there are a lot of starships in the store, and Hateehc can't program, you have to help the blogger and write a program that answers his question.InputThe first line contains an integer $$$t$$$ ($$$1 \le t \le 600$$$) —the number of test cases.Each of the following $$$t$$$ lines contains a description of the test case. The description consists of two integers $$$l$$$, $$$r$$$ ($$$1 \le l \le r \le 10^{18}$$$) — the largest and smallest numbers of the starships in the store.OutputPrint $$$t$$$ lines, one line for each test case, containing the unluckiest starship number in the store.If there are several ways to choose the unluckiest number, output any of them.ExampleInput559 6342 4948 5390 901 100Output63
44
53
90
1NoteLet's look at two test examples:the luckiness of the number $$$59$$$ is $$$9 - 5 = 4$$$;the luckiness of $$$60$$$ equals $$$6 - 0 = 6$$$;the luckiness of $$$61$$$ equals $$$6 - 1 = 5$$$;the luckiness of $$$62$$$ equals $$$6 - 2 = 4$$$;the luckiness of $$$63$$$ is $$$6 - 3 = 3$$$.So the unluckiest number is $$$63$$$.In the fifth test case, the unluckiest numbers are $$$1$$$, $$$2$$$, $$$3$$$, $$$4$$$, $$$5$$$, $$$6$$$, $$$7$$$, $$$8$$$, $$$9$$$, $$$11$$$, $$$22$$$, $$$33$$$, $$$44$$$, $$$55$$$, $$$66$$$, $$$77$$$, $$$88$$$, $$$99$$$, so you are allowed to choose any of them.



B. Playing in a Casinotime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputGalaxy Luck, a well-known casino in the entire solar system, introduces a new card game.In this game, there is a deck that consists of $$$n$$$ cards. Each card has $$$m$$$ numbers written on it. Each of the $$$n$$$ players receives exactly one card from the deck.Then all players play with each other in pairs, and each pair of players plays exactly once. Thus, if there are, for example, four players in total, then six games are played: the first against the second, the first against the third, the first against the fourth, the second against the third, the second against the fourth and the third against the fourth.Each of these games determines the winner in some way, but the rules are quite complicated, so we will not describe them here. All that matters is how many chips are paid out to the winner. Let the first player's card have the numbers $$$a_1, a_2, \dots, a_m$$$, and the second player's card — $$$b_1, b_2, \dots, b_m$$$. Then the winner of the game gets $$$|a_1 - b_1| + |a_2 - b_2| + \dots + |a_m - b_m|$$$ chips from the total pot, where $$$|x|$$$ denotes the absolute value of $$$x$$$.To determine the size of the total pot, it is necessary to calculate the winners' total winnings for all games. Since there can be many cards in a deck and many players, you have been assigned to write a program that does all the necessary calculations.InputEach test consists of several test cases. The first line contains one integer $$$t$$$ ($$$1 \le t \le 1000$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \le n \cdot m \le 3\cdot 10^5$$$) — the number of cards in the deck and the count of numbers on the one card.Each of the following $$$n$$$ lines of the test case set contains $$$m$$$ integers $$$c_{i,j}$$$ ($$$1 \le c_{i,j} \le 10^6$$$) — a description of the $$$i$$$-th card.It is guaranteed that the total $$$n \cdot m$$$ in all tests does not exceed $$$3 \cdot 10^5$$$.OutputFor each test case, print one number — the total amount of winnings from all games.ExampleInput33 51 4 2 8 57 9 2 1 43 8 5 3 11 44 15 1 104 31 2 33 2 11 2 14 2 7Output50
0
31NoteConsider the first test case.In the game between the first and second player, the winner receives $$$|1-7| + |4-9| + |2-2| + |8-1| + |5-4| = 19$$$ chips.In the game between the first and third player, the winner receives $$$|1-3| + |4-8| + |2-5| + |8-3| + |5-1| = 18$$$ in chips.In the game between the second and third player, the winner receives $$$|7-3| + |9-8| + |2-5| + |1-3| + |4-1| = 13$$$ chips.The total is $$$19 + 18 + 13 = 50$$$ chips.



A. Lucky Numberstime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputOlympus City recently launched the production of personal starships. Now everyone on Mars can buy one and fly to other planets inexpensively.Each starship has a number —some positive integer $$$x$$$. Let's define theluckinessof a number $$$x$$$ as the difference between the largest and smallest digits of that number. For example, $$$142857$$$ has $$$8$$$ as its largest digit and $$$1$$$ as its smallest digit, so its luckiness is $$$8-1=7$$$. And the number $$$111$$$ has all digits equal to $$$1$$$, so its luckiness is zero.Hateehc is a famous Martian blogger who often flies to different corners of the solar system. To release interesting videos even faster, he decided to buy himself a starship. When he came to the store, he saw starships with numbers from $$$l$$$ to $$$r$$$ inclusively. While in the store, Hateehc wanted to find a starship with the luckiest number.Since there are a lot of starships in the store, and Hateehc can't program, you have to help the blogger and write a program that answers his question.InputThe first line contains an integer $$$t$$$ ($$$1 \le t \le 10\,000$$$) —the number of test cases.Each of the following $$$t$$$ lines contains a description of the test case. The description consists of two integers $$$l$$$ and $$$r$$$ ($$$1 \le l \le r \le 10^6$$$) — the largest and smallest numbers of the starships in the store.OutputPrint $$$t$$$ lines, one line for each test case, containing the luckiest starship number in the store.If there are several ways to choose the luckiest number, output any of them.ExampleInput559 6342 4915 1553 571 100Output60
49
15
57
90NoteLet's look at two test examples:the luckiness of the number $$$59$$$ is $$$9 - 5 = 4$$$;the luckiness of $$$60$$$ equals $$$6 - 0 = 6$$$;the luckiness of $$$61$$$ equals $$$6 - 1 = 5$$$;the luckiness of $$$62$$$ equals $$$6 - 2 = 4$$$;the luckiness of $$$63$$$ is $$$6 - 3 = 3$$$.Thus, the luckiest number is $$$60$$$.In the fifth test example, the luckiest number is $$$90$$$.



G2. Subsequence Addition (Hard Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe only difference between the two versions is that in this version, the constraints are higher.Initially, array $$$a$$$ contains just the number $$$1$$$. You can perform several operations in order to change the array. In an operation, you can select some subsequence$$$^{\dagger}$$$ of $$$a$$$ and add into $$$a$$$ an element equal to the sum of all elements of the subsequence.You are given a final array $$$c$$$. Check if $$$c$$$ can be obtained from the initial array $$$a$$$ by performing some number (possibly 0) of operations on the initial array.$$$^{\dagger}$$$ A sequence $$$b$$$ is a subsequence of a sequence $$$a$$$ if $$$b$$$ can be obtained from $$$a$$$ by the deletion of several (possibly zero, but not all) elements. In other words, select $$$k$$$ ($$$1 \leq k \leq |a|$$$) distinct indices $$$i_1, i_2, \dots, i_k$$$ and insert anywhere into $$$a$$$ a new element with the value equal to $$$a_{i_1} + a_{i_2} + \dots + a_{i_k}$$$.InputThe first line of the input contains an integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \leq n \leq 2 \cdot 10^5$$$)  — the number of elements the final array $$$c$$$ should have.The second line of each test case contains $$$n$$$ space-separated integers $$$c_i$$$ ($$$1 \leq c_i \leq 2 \cdot 10^5$$$)  — the elements of the final array $$$c$$$ that should be obtained from the initial array $$$a$$$.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output "YES" (without quotes) if such a sequence of operations exists, and "NO" (without quotes) otherwise.You can output the answer in any case (for example, the strings "yEs", "yes", "Yes" and "YES" will be recognized as a positive answer).ExampleInput6111255 1 3 2 157 1 5 2 131 1 151 1 4 2 1OutputYES
NO
YES
NO
YES
YESNoteFor the first test case, the initial array $$$a$$$ is already equal to $$$[1]$$$, so the answer is "YES".For the second test case, performing any amount of operations will change $$$a$$$ to an array of size at least two which doesn't only have the element $$$2$$$, thus obtaining the array $$$[2]$$$ is impossible and the answer is "NO".For the third test case, we can perform the following operations in order to obtain the final given array $$$c$$$:Initially, $$$a = [1]$$$.By choosing the subsequence $$$[1]$$$, and inserting $$$1$$$ in the array, $$$a$$$ changes to $$$[1, 1]$$$.By choosing the subsequence $$$[1, 1]$$$, and inserting $$$1+1=2$$$ in the middle of the array, $$$a$$$ changes to $$$[1, 2, 1]$$$.By choosing the subsequence $$$[1, 2]$$$, and inserting $$$1+2=3$$$ after the first $$$1$$$ of the array, $$$a$$$ changes to $$$[1, 3, 2, 1]$$$.By choosing the subsequence $$$[1, 3, 1]$$$ and inserting $$$1+3+1=5$$$ at the beginning of the array, $$$a$$$ changes to $$$[5, 1, 3, 2, 1]$$$ (which is the array we needed to obtain).



G1. Subsequence Addition (Easy Version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe only difference between the two versions is that in this version, the constraints are lower.Initially, array $$$a$$$ contains just the number $$$1$$$. You can perform several operations in order to change the array. In an operation, you can select some subsequence$$$^{\dagger}$$$ of $$$a$$$ and add into $$$a$$$ an element equal to the sum of all elements of the subsequence.You are given a final array $$$c$$$. Check if $$$c$$$ can be obtained from the initial array $$$a$$$ by performing some number (possibly 0) of operations on the initial array.$$$^{\dagger}$$$ A sequence $$$b$$$ is a subsequence of a sequence $$$a$$$ if $$$b$$$ can be obtained from $$$a$$$ by the deletion of several (possibly zero, but not all) elements. In other words, select $$$k$$$ ($$$1 \leq k \leq |a|$$$) distinct indices $$$i_1, i_2, \dots, i_k$$$ and insert anywhere into $$$a$$$ a new element with the value equal to $$$a_{i_1} + a_{i_2} + \dots + a_{i_k}$$$.InputThe first line of the input contains an integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \leq n \leq 5000$$$)  — the number of elements the final array $$$c$$$ should have.The second line of each test case contains $$$n$$$ space-separated integers $$$c_i$$$ ($$$1 \leq c_i \leq 5000$$$)  — the elements of the final array $$$c$$$ that should be obtained from the initial array $$$a$$$.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5000$$$.OutputFor each test case, output "YES" (without quotes) if such a sequence of operations exists, and "NO" (without quotes) otherwise.You can output the answer in any case (for example, the strings "yEs", "yes", "Yes" and "YES" will be recognized as a positive answer).ExampleInput6111255 1 3 2 157 1 5 2 131 1 151 1 4 2 1OutputYES
NO
YES
NO
YES
YESNoteFor the first test case, the initial array $$$a$$$ is already equal to $$$[1]$$$, so the answer is "YES".For the second test case, performing any amount of operations will change $$$a$$$ to an array of size at least two which doesn't only have the element $$$2$$$, thus obtaining the array $$$[2]$$$ is impossible and the answer is "NO".For the third test case, we can perform the following operations in order to obtain the final given array $$$c$$$:Initially, $$$a = [1]$$$.By choosing the subsequence $$$[1]$$$, and inserting $$$1$$$ in the array, $$$a$$$ changes to $$$[1, 1]$$$.By choosing the subsequence $$$[1, 1]$$$, and inserting $$$1+1=2$$$ in the middle of the array, $$$a$$$ changes to $$$[1, 2, 1]$$$.By choosing the subsequence $$$[1, 2]$$$, and inserting $$$1+2=3$$$ after the first $$$1$$$ of the array, $$$a$$$ changes to $$$[1, 3, 2, 1]$$$.By choosing the subsequence $$$[1, 3, 1]$$$ and inserting $$$1+3+1=5$$$ at the beginning of the array, $$$a$$$ changes to $$$[5, 1, 3, 2, 1]$$$ (which is the array we needed to obtain).



F. Bouncy Balltime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a room that can be represented by a $$$n \times m$$$ grid. There is a ball at position $$$(i_1, j_1)$$$ (the intersection of row $$$i_1$$$ and column $$$j_1$$$), and it starts going diagonally in one of the four directions:The ball is going down and right, denoted by $$$\texttt{DR}$$$; it means that after a step, the ball's location goes from $$$(i, j)$$$ to $$$(i+1, j+1)$$$.The ball is going down and left, denoted by $$$\texttt{DL}$$$; it means that after a step, the ball's location goes from $$$(i, j)$$$ to $$$(i+1, j-1)$$$.The ball is going up and right, denoted by $$$\texttt{UR}$$$; it means that after a step, the ball's location goes from $$$(i, j)$$$ to $$$(i-1, j+1)$$$.The ball is going up and left, denoted by $$$\texttt{UL}$$$; it means that after a step, the ball's location goes from $$$(i, j)$$$ to $$$(i-1, j-1)$$$.After each step, the ball maintains its direction unless it hits a wall (that is, the direction takes it out of the room's bounds in the next step). In this case, the ball's direction gets flipped along the axis of the wall; if the ball hits a corner, both directions get flipped. Any instance of this is called abounce. The ball never stops moving.In the above example, the ball starts at $$$(1, 7)$$$ and goes $$$\texttt{DL}$$$ until it reaches the bottom wall, then it bounces and continues in the direction $$$\texttt{UL}$$$. After reaching the left wall, the ball bounces and continues to go in the direction $$$\texttt{UR}$$$. When the ball reaches the upper wall, it bounces and continues in the direction $$$\texttt{DR}$$$. After reaching the bottom-right corner, it bouncesonceand continues in direction $$$\texttt{UL}$$$, and so on.Your task is to find how many bounces the ball will go through until it reaches cell $$$(i_2, j_2)$$$ in the room, or report that it never reaches cell $$$(i_2, j_2)$$$ by printing $$$-1$$$.Note that the ball first goes in a cell and only after that bounces if it needs to.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases.The first line of each test case contains six integers and a string $$$n, m, i_1, j_1, i_2, j_2, d$$$ ($$$2 \leq n, m \leq 25000$$$; $$$1 \leq i_1, i_2 \leq n$$$; $$$1 \leq j_1, j_2 \leq m$$$; $$$d \in\{ \texttt{DR}, \texttt{DL}, \texttt{UR}, \texttt{UL}\}$$$) — the dimensions of the grid, the starting coordinates of the ball, the coordinates of the final cell and the starting direction of the ball.It is guaranteed that the sum of $$$n \cdot m$$$ over all test cases does not exceed $$$5 \cdot 10^4$$$.OutputFor each test case, output a single integer — the number of bounces the ball does until it reaches cell $$$(i_2, j_2)$$$ for the first time, or $$$-1$$$ if the ball never reaches the final cell.ExampleInput65 7 1 7 2 4 DL5 7 1 7 3 2 DL3 3 1 3 2 2 UR2 4 2 1 2 2 DR4 3 1 1 1 3 UL6 4 1 2 3 4 DROutput3
-1
1
-1
4
0



E. Interviewtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an interactive problem. If you are unsure how interactive problems work, then it is recommended to readthe guide for participants.Before the last stage of the exam, the director conducted an interview. He gave Gon $$$n$$$ piles of stones, the $$$i$$$-th pile having $$$a_i$$$ stones.Each stone is identical and weighs $$$1$$$ grams, except for one special stone that is part of an unknown pile and weighs $$$2$$$ grams.A picture of the first test case. Pile $$$2$$$ has the special stone. The piles have weights of $$$1,3,3,4,5$$$, respectively.Gon can only ask the director questions of one kind: he can choose $$$k$$$ piles, and the director will tell him the total weight of the piles chosen. More formally, Gon can choose an integer $$$k$$$ ($$$1 \leq k \leq n$$$) and $$$k$$$ unique piles $$$p_1, p_2, \dots, p_k$$$ ($$$1 \leq p_i \leq n$$$), and the director will return the total weight $$$m_{p_1} + m_{p_2} + \dots + m_{p_k}$$$, where $$$m_i$$$ denotes the weight of pile $$$i$$$.Gon is tasked with finding the pile that contains the special stone. However, the director is busy. Help Gon find this pile in at most $$$\mathbf{30}$$$ queries.InputThe input data contains several test cases. The first line contains one integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \leq n \leq 2 \cdot 10^5$$$) — the number of piles.The second line of each test case contains $$$n$$$ integers $$$a_i$$$ ($$$1 \leq a_i \leq 10^4$$$) — the number of stones in each pile.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.After reading the input for each test case, proceed with the interaction as follows.InteractionYou can perform the operation at most $$$\mathbf{30}$$$ times to guess the pile.To make a guess, print a line with the following format:$$$\texttt{?}\ k \ p_1 \ p_2 \ p_3 \ ... \ p_{k-1}\ p_k$$$ ($$$1 \leq k \leq n$$$; $$$1 \leq p_i \leq n$$$; all $$$p_i$$$ are distinct) — the indices of the piles.After each operation, you should read a line containing a single integer $$$x$$$ — the sum of weights of the chosen piles. (Formally, $$$x = m_{p_1} + m_{p_2} + \dots + m_{p_k}$$$.)When you know the index of the pile with the special stone, print one line in the following format: $$$\texttt{!}\ m$$$ ($$$1 \leq m \leq n$$$).After that, move on to the next test case, or terminate the program if there are no more test cases remaining.If your program performs more than $$$30$$$ operations for one test case or makes an invalid query, you may receive aWrong Answerverdict.After you print a query or the answer, please remember to output the end of the line and flush the output. Otherwise, you may getIdleness limit exceededor some other verdict. To do this, use the following:fflush(stdout)orcout.flush()in C++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see the documentation for other languages.It is additionally recommended to read theinteractive problems guide for participants.HacksTo make a hack, use the following format.The first line should contain a single integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases.The first line of each test case should contain two integers $$$n, m$$$ ($$$1 \leq n \leq 2 \cdot 10^5$$$) – the number of piles and the pile with the special stone.The second line of each test case should contain $$$n$$$ integers $$$a_i$$$ ($$$1 \leq a_i \leq 10^4$$$) — the number of stones in each pile.Note that the interactor isnotadaptive, meaning that the answer is known before the participant asks the queries and doesn't depend on the queries asked by the participant.ExampleInput2
5
1 2 3 4 5

11

6

3

7
1 2 3 5 3 4 2

12

6Output? 4 1 2 3 4

? 2 2 3

? 1 2

! 2

? 4 2 3 5 6

? 2 1 4

! 7NoteIn the first test case, the stone with weight two is located in pile $$$2$$$, as shown in the picture. We perform the following interaction:$$$\texttt{? 4 1 2 3 4}$$$ — ask the total weight of piles $$$1$$$, $$$2$$$, $$$3$$$, and $$$4$$$. The total weight we receive back is $$$1+3+3+4=11$$$.$$$\texttt{? 2 2 3}$$$ — ask the total weight of piles $$$2$$$ and $$$3$$$. The total weight we receive back is $$$3+3=6$$$.$$$\texttt{? 1 2}$$$ — ask the total weight of pile $$$2$$$. The total weight we receive back is $$$3$$$.$$$\texttt{! 2}$$$ — we have figured out that pile $$$2$$$ contains the special stone, so we output it and move on to the next test case.In the second test case, the stone with weight two is located on index $$$7$$$. We perform the following interaction:$$$\texttt{? 4 2 3 5 6}$$$ — ask the total weight of piles $$$2$$$, $$$3$$$, $$$5$$$, and $$$6$$$. The total weight we receive back is $$$2+3+3+4=12$$$.$$$\texttt{? 2 1 4}$$$ — ask the total weight of piles $$$1$$$ and $$$4$$$. The total weight we receive back is $$$1+5=6$$$.$$$\texttt{! 7}$$$ — we have somehow figured out that pile $$$7$$$ contains the special stone, so we output it and end the interaction.



D. Odd Queriestime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou have an array $$$a_1, a_2, \dots, a_n$$$. Answer $$$q$$$ queries of the following form:If we change all elements in the range $$$a_l, a_{l+1}, \dots, a_r$$$ of the array to $$$k$$$, will the sum of the entire array be odd?Note that queries areindependentand do not affect future queries.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 10^4$$$). The description of the test cases follows.The first line of each test case consists of $$$2$$$ integers $$$n$$$ and $$$q$$$ ($$$1 \le n \le 2 \cdot 10^5$$$; $$$1 \le q \le 2 \cdot 10^5$$$) — the length of the array and the number of queries.The second line of each test case consists of $$$n$$$ integers $$$a_i$$$ ($$$1 \le a_i \le 10^9$$$) — the array $$$a$$$.The next $$$q$$$ lines of each test case consists of $$$3$$$ integers $$$l,r,k$$$ ($$$1 \le l \le r \le n$$$; $$$1 \le k \le 10^9$$$) — the queries.It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \cdot 10^5$$$, and the sum of $$$q$$$ doesn't exceed $$$2 \cdot 10^5$$$.OutputFor each query, output "YES" if the sum of the entire array becomes odd, and "NO" otherwise.You can output the answer in any case (upper or lower). For example, the strings "yEs", "yes", "Yes", and "YES" will be recognized as positive responses.ExampleInput25 52 2 1 3 22 3 32 3 41 5 51 4 92 4 310 51 1 1 1 1 1 1 1 1 13 8 132 5 103 8 101 10 21 9 100OutputYES
YES
YES
NO
YES
NO
NO
NO
NO
YESNoteFor the first test case:If the elements in the range $$$(2, 3)$$$ would get set to $$$3$$$ the array would become $$$\{2, 3, 3, 3, 2\}$$$, the sum would be $$$2+3+3+3+2 = 13$$$ which is odd, so the answer is "YES".If the elements in the range $$$(2, 3)$$$ would get set to $$$4$$$ the array would become $$$\{2, 4, 4, 3, 2\}$$$, the sum would be $$$2+4+4+3+2 = 15$$$ which is odd, so the answer is "YES".If the elements in the range $$$(1, 5)$$$ would get set to $$$5$$$ the array would become $$$\{5, 5, 5, 5, 5\}$$$, the sum would be $$$5+5+5+5+5 = 25$$$ which is odd, so the answer is "YES".If the elements in the range $$$(1, 4)$$$ would get set to $$$9$$$ the array would become $$$\{9, 9, 9, 9, 2\}$$$, the sum would be $$$9+9+9+9+2 = 38$$$ which is even, so the answer is "NO".If the elements in the range $$$(2, 4)$$$ would get set to $$$3$$$ the array would become $$$\{2, 3, 3, 3, 2\}$$$, the sum would be $$$2+3+3+3+2 = 13$$$ which is odd, so the answer is "YES".



C. Find and Replacetime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a string $$$s$$$ consisting of lowercase Latin characters. In an operation, you can take a character and replacealloccurrences of this character with $$$\texttt{0}$$$ or replacealloccurrences of this character with $$$\texttt{1}$$$.Is it possible to perform some number of moves so that the resulting string is an alternating binary string$$$^{\dagger}$$$?For example, consider the string $$$\texttt{abacaba}$$$. You can perform the following moves:Replace $$$\texttt{a}$$$ with $$$\texttt{0}$$$. Now the string is $$$\color{red}{\texttt{0}}\texttt{b}\color{red}{\texttt{0}}\texttt{c}\color{red}{\texttt{0}}\texttt{b}\color{red}{\texttt{0}}$$$.Replace $$$\texttt{b}$$$ with $$$\texttt{1}$$$. Now the string is $$${\texttt{0}}\color{red}{\texttt{1}}{\texttt{0}}\texttt{c}{\texttt{0}}\color{red}{\texttt{1}}{\texttt{0}}$$$.Replace $$$\texttt{c}$$$ with $$$\texttt{1}$$$. Now the string is $$${\texttt{0}}{\texttt{1}}{\texttt{0}}\color{red}{\texttt{1}}{\texttt{0}}{\texttt{1}}{\texttt{0}}$$$. This is an alternating binary string.$$$^{\dagger}$$$Analternating binary stringis a string of $$$\texttt{0}$$$s and $$$\texttt{1}$$$s such that no two adjacent bits are equal. For example, $$$\texttt{01010101}$$$, $$$\texttt{101}$$$, $$$\texttt{1}$$$ are alternating binary strings, but $$$\texttt{0110}$$$, $$$\texttt{0a0a0}$$$, $$$\texttt{10100}$$$ are not.InputThe input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \leq t \leq 100$$$) — the number of test cases. The description of the test cases follows.The first line of each test case contains an integer $$$n$$$ ($$$1 \leq n \leq 2000$$$) — the length of the string $$$s$$$.The second line of each test case contains a string consisting of $$$n$$$ lowercase Latin characters — the string $$$s$$$.OutputFor each test case, output "YES" (without quotes) if you can make the string into an alternating binary string, and "NO" (without quotes) otherwise.You can output the answer in any case (for example, the strings "yEs", "yes", "Yes" and "YES" will be recognized as a positive answer).ExampleInput87abacaba2aa1y4bkpt6ninfia6banana10codeforces8testcaseOutputYES
NO
YES
YES
NO
YES
NO
NONoteThe first test case is explained in the statement.In the second test case, the only possible binary strings you can make are $$$\texttt{00}$$$ and $$$\texttt{11}$$$, neither of which are alternating.In the third test case, you can make $$$\texttt{1}$$$, which is an alternating binary string.



B. Grab the Candiestime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputMihai and Bianca are playing with bags of candies. They have a row $$$a$$$ of $$$n$$$ bags of candies. The $$$i$$$-th bag has $$$a_i$$$ candies. The bags are given to the players in the order from the first bag to the $$$n$$$-th bag.If a bag has an even number of candies, Mihai grabs the bag. Otherwise, Bianca grabs the bag. Once a bag is grabbed, the number of candies in it gets added to the total number of candies of the player that took it.Mihai wants to show off, so he wants to reorder the array so that at any moment (except at the start when they both have no candies), Mihai will havestrictly morecandies than Bianca. Help Mihai find out if such a reordering exists.InputThe first line of the input contains an integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases.The first line of each test case contains a single integer $$$n$$$ ($$$1 \leq n \leq 100$$$) — the number of bags in the array.The second line of each test case contains $$$n$$$ space-separated integers $$$a_i$$$ ($$$1 \leq a_i \leq 100$$$) — the number of candies in each bag.OutputFor each test case, output "YES" (without quotes) if such a reordering exists, and "NO" (without quotes) otherwise.You can output the answer in any case (for example, the strings "yEs", "yes", "Yes" and "YES" will be recognized as a positive answer).ExampleInput341 2 3 441 1 1 231 4 3OutputYES
NO
NONoteIn the first test case, Mihai can reorder the array as follows: $$$[4, 1, 2, 3]$$$. Then the process proceeds as follows:the first bag has $$$4$$$ candies, which is even, so Mihai takes it — Mihai has $$$4$$$ candies, and Bianca has $$$0$$$.the second bag has $$$1$$$ candies, which is odd, so Bianca takes it — Mihai has $$$4$$$ candies, and Bianca has $$$1$$$.the third bag has $$$2$$$ candies, which is even, so Mihai takes it — Mihai has $$$6$$$ candies, and Bianca has $$$1$$$.the fourth bag has $$$3$$$ candies, which is odd, so Bianca takes it — Mihai has $$$6$$$ candies, and Bianca has $$$4$$$.Since Mihai always has more candies than Bianca, this reordering works.



A. Plus or Minustime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given three integers $$$a$$$, $$$b$$$, and $$$c$$$ such thatexactly oneof these two equations is true:$$$a+b=c$$$$$$a-b=c$$$Output+if the first equation is true, and-otherwise.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 162$$$) — the number of test cases.The description of each test case consists of three integers $$$a$$$, $$$b$$$, $$$c$$$ ($$$1 \leq a, b \leq 9$$$, $$$-8 \leq c \leq 18$$$). The additional constraint on the input: it will be generated so thatexactlyone of the two equations will be true.OutputFor each test case, output either+or-on a new line, representing the correct equation.ExampleInput111 2 33 2 12 9 -73 4 71 1 21 1 03 3 69 9 189 9 01 9 -81 9 10Output+
-
-
+
+
-
+
+
-
-
+NoteIn the first test case, $$$1+2=3$$$.In the second test case, $$$3-2=1$$$.In the third test case, $$$2-9=-7$$$. Note that $$$c$$$ can be negative.



F2. GCD Master (hard version)time limit per test3 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputThis is the hard version of the problem. The only difference between the two versions is the constraint on $$$m$$$. You can make hacks only if both versions of the problem are solved.You are given an array $$$a$$$ of length $$$n$$$ and two integers $$$m$$$ and $$$k$$$. Each element in $$$a$$$ satisfies $$$1\le a_i \le m$$$.In one operation, you choose two indices $$$i$$$ and $$$j$$$ such that $$$1 \le i < j \le |a|$$$, then append $$$\gcd(a_i,a_j)$$$ to the back of the array and delete $$$a_i$$$ and $$$a_j$$$ from the array. Note that the length of the array decreases by one after this operation.Find the maximum possible sum of the array after performingexactly$$$k$$$ operations.InputThe first line contains a single integer $$$t$$$ ($$$1\le t\le 10^5$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$2 \le n \le 10^6$$$; $$$1\le m \le 9\cdot 10^{18}$$$; $$$1 \le k \le n-1$$$).The second line of each test case contains $$$n$$$ integers $$$a_1,a_2,\ldots,a_n$$$ ($$$1 \le a_i \le m$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^6$$$.OutputFor each test case, output the maximum possible sum of the array after performing $$$k$$$ operations optimally.ExampleInput43 8 14 7 85 114514 27 2 4 1 63 1919810 22 3 33 9000000000000000000 19000000000000000000 9000000000000000000 9000000000000000000Output11
14
1
18000000000000000000NoteIn the first test case, the best way is to choose $$$i=1$$$, $$$j=3$$$ in the first operation. The final sequence is $$$[7,4]$$$.



F1. GCD Master (easy version)time limit per test3 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputThis is the easy version of the problem. The only difference between the two versions is the constraint on $$$m$$$. You can make hacks only if both versions of the problem are solved.You are given an array $$$a$$$ of length $$$n$$$ and two integers $$$m$$$ and $$$k$$$. Each element in $$$a$$$ satisfies $$$1\le a_i \le m$$$.In one operation, you choose two indices $$$i$$$ and $$$j$$$ such that $$$1 \le i < j \le |a|$$$, then append $$$\gcd(a_i,a_j)$$$ to the back of the array and delete $$$a_i$$$ and $$$a_j$$$ from the array. Note that the length of the array decreases by one after this operation.Find the maximum possible sum of the array after performingexactly$$$k$$$ operations.InputThe first line contains a single integer $$$t$$$ ($$$1\le t\le 10^5$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$2 \le n \le 10^6$$$; $$$1\le m \le 10^6$$$; $$$1 \le k \le n-1$$$).The second line of each test case contains $$$n$$$ integers $$$a_1,a_2,\ldots,a_n$$$ ($$$1 \le a_i \le m$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^6$$$ and the sum of $$$m$$$ over all test cases does not exceed $$$10^6$$$.OutputFor each test case, output the maximum possible sum of the array after performing $$$k$$$ operations optimally.ExampleInput33 8 14 7 85 114 27 2 4 1 63 514 22 3 3Output11
14
1NoteIn the first test case, the best way is to choose $$$i=1$$$, $$$j=3$$$ in the first operation. The final sequence is $$$[7,4]$$$.



E. Tree Mastertime limit per test3 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputYou are given a tree with $$$n$$$ weighted vertices labeled from $$$1$$$ to $$$n$$$ rooted at vertex $$$1$$$. The parent of vertex $$$i$$$ is $$$p_i$$$ and the weight of vertex $$$i$$$ is $$$a_i$$$. For convenience, define $$$p_1=0$$$.For two vertices $$$x$$$ and $$$y$$$of the same depth$$$^\dagger$$$, define $$$f(x,y)$$$ as follows:Initialize $$$\mathrm{ans}=0$$$.While both $$$x$$$ and $$$y$$$ are not $$$0$$$:$$$\mathrm{ans}\leftarrow \mathrm{ans}+a_x\cdot a_y$$$;$$$x\leftarrow p_x$$$;$$$y\leftarrow p_y$$$.$$$f(x,y)$$$ is the value of $$$\mathrm{ans}$$$.You will process $$$q$$$ queries. In the $$$i$$$-th query, you are given two integers $$$x_i$$$ and $$$y_i$$$ and you need to calculate $$$f(x_i,y_i)$$$.$$$^\dagger$$$ The depth of vertex $$$v$$$ is the number of edges on the unique simple path from the root of the tree to vertex $$$v$$$.InputThe first line contains two integers $$$n$$$ and $$$q$$$ ($$$2 \le n \le 10^5$$$; $$$1 \le q \le 10^5$$$).The second line contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \le a_i \le 10^5$$$).The third line contains $$$n-1$$$ integers $$$p_2, \ldots, p_n$$$ ($$$1 \le p_i < i$$$).Each of the next $$$q$$$ lines contains two integers $$$x_i$$$ and $$$y_i$$$ ($$$1\le x_i,y_i\le n$$$). It is guaranteed that $$$x_i$$$ and $$$y_i$$$ are of the same depth.OutputOutput $$$q$$$ lines, the $$$i$$$-th line contains a single integer, the value of $$$f(x_i,y_i)$$$.ExamplesInput6 2
1 5 2 3 1 1
1 2 3 3 2
4 5
6 6Output33
27Input14 8
3 2 5 3 1 4 2 2 2 5 5 5 2 4
1 2 3 1 1 4 7 3 3 1 5 3 8
4 4
4 10
13 10
3 12
13 9
3 12
9 10
11 5Output47
53
48
36
42
36
48
14NoteConsider the first example:In the first query, the answer is $$$a_4\cdot a_5+a_3\cdot a_3+a_2\cdot a_2+a_1\cdot a_1=3+4+25+1=33$$$.In the second query, the answer is $$$a_6\cdot a_6+a_2\cdot a_2+a_1\cdot a_1=1+25+1=27$$$.



D. DSU Mastertime limit per test2 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputYou are given an integer $$$n$$$ and an array $$$a$$$ of length $$$n-1$$$ whose elements are either $$$0$$$ or $$$1$$$.Let us define thevalueof a permutation$$$^\dagger$$$ $$$p$$$ of length $$$m-1$$$ ($$$m \leq n$$$) by the following process.Let $$$G$$$ be a graph of $$$m$$$ vertices labeled from $$$1$$$ to $$$m$$$ that does not contain any edges. For each $$$i$$$ from $$$1$$$ to $$$m-1$$$, perform the following operations:define $$$u$$$ and $$$v$$$ as the (unique) vertices in the weakly connected components$$$^\ddagger$$$ containing vertices $$$p_i$$$ and $$$p_i+1$$$ respectively with only incoming edges$$$^{\dagger\dagger}$$$;in graph $$$G$$$, add a directed edge from vertex $$$v$$$ to $$$u$$$ if $$$a_{p_i}=0$$$, otherwise add a directed edge from vertex $$$u$$$ to $$$v$$$ (if $$$a_{p_i}=1$$$).Note that after each step, it can be proven that each weakly connected component of $$$G$$$ has a unique vertex with only incoming edges.Then, the value of $$$p$$$ is the number of incoming edges of vertex $$$1$$$ of $$$G$$$.For each $$$k$$$ from $$$1$$$ to $$$n-1$$$, find the sum of values of all $$$k!$$$ permutations of length $$$k$$$. Since this value can be big, you are only required to compute this value under modulo $$$998\,244\,353$$$.Operations when $$$n=3$$$, $$$a=[0,1]$$$ and $$$p=[1,2]$$$$$$^\dagger$$$ A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in arbitrary order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ appears twice in the array), and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$ but there is $$$4$$$ in the array).$$$^\ddagger$$$ The weakly connected components of a directed graph is the same as the components of the undirected version of the graph. Formally, for directed graph $$$G$$$, define a graph $$$H$$$ where for all edges $$$a \to b$$$ in $$$G$$$, you add an undirected edge $$$a \leftrightarrow b$$$ in $$$H$$$. Then the weakly connected components of $$$G$$$ are the components of $$$H$$$.$$$^{\dagger\dagger}$$$ Note that a vertex that has no edges is considered to have only incoming edges.InputThe first line contains a single integer $$$t$$$ ($$$1\le t\le 10^4$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$2\le n\le 5 \cdot 10^5$$$).The second line of each test case contains $$$n-1$$$ integers $$$a_1, a_2, \ldots, a_{n-1}$$$ ($$$a_i$$$ is $$$0$$$ or $$$1$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5 \cdot 10^5$$$.OutputFor each test case, output $$$n-1$$$ integers in a line, the $$$i$$$-th integer should represent the answer when $$$k=i$$$, under modulo $$$998\,244\,353$$$.ExampleInput230 090 1 0 0 0 1 0 0Output1 3 
1 2 7 31 167 1002 7314 60612NoteConsider the first test case.When $$$k=1$$$, there is only $$$1$$$ permutation $$$p$$$.When $$$p=[1]$$$, we will add a single edge from vertex $$$2$$$ to $$$1$$$. Vertex $$$1$$$ will have $$$1$$$ incoming edge. So the value of $$$[1]$$$ is $$$1$$$.Therefore when $$$k=1$$$, the answer is $$$1$$$.When $$$k=2$$$, there are $$$2$$$ permutations $$$p$$$.When $$$p=[1,2]$$$, we will add an edge from vertex $$$2$$$ to $$$1$$$ and an edge from $$$3$$$ to $$$1$$$. Vertex $$$1$$$ will have $$$2$$$ incoming edges. So the value of $$$[1,2]$$$ is $$$2$$$.When $$$p=[2,1]$$$, we will add an edge from vertex $$$3$$$ to $$$2$$$ and an edge from $$$2$$$ to $$$1$$$. Vertex $$$1$$$ will have $$$1$$$ incoming edge. So the value of $$$[2,1]$$$ is $$$1$$$.Therefore when $$$k=2$$$, the answer is $$$2+1=3$$$.



C. Sequence Mastertime limit per test1 secondmemory limit per test1024 megabytesinputstandard inputoutputstandard outputFor some positive integer $$$m$$$, YunQian considers an array $$$q$$$ of $$$2m$$$ (possibly negative) integersgood, if and only if for every possible subsequence of $$$q$$$ that has length $$$m$$$, the product of the $$$m$$$ elements in the subsequence is equal to the sum of the $$$m$$$ elements that arenotin the subsequence. Formally, let $$$U=\{1,2,\ldots,2m\}$$$. For all sets $$$S \subseteq U$$$ such that $$$|S|=m$$$, $$$\prod\limits_{i \in S} q_i = \sum\limits_{i \in U \setminus S} q_i$$$.Define thedistancebetween two arrays $$$a$$$ and $$$b$$$ both of length $$$k$$$ to be $$$\sum\limits_{i=1}^k|a_i-b_i|$$$.You are given a positive integer $$$n$$$ and an array $$$p$$$ of $$$2n$$$ integers.Find the minimum distance between $$$p$$$ and $$$q$$$ over all good arrays $$$q$$$ of length $$$2n$$$. It can be shown for all positive integers $$$n$$$, at least one good array exists. Note that you arenot requiredto construct the array $$$q$$$ that achieves this minimum distance.InputThe first line contains a single integer $$$t$$$ ($$$1\le t\le 10^4$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1\le n\le 2\cdot10^5$$$).The second line of each test case contains $$$2n$$$ integers $$$p_1, p_2, \ldots, p_{2n}$$$ ($$$|p_i| \le 10^9$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\cdot 10^5$$$.OutputFor each test case, output the minimum distance between $$$p$$$ and a good $$$q$$$.ExampleInput416 921 2 2 12-2 -2 2 24-3 -2 -1 0 1 2 3 4Output3
2
5
13NoteIn the first test case, it is optimal to let $$$q=[6,6]$$$.In the second test case, it is optimal to let $$$q=[2,2,2,2]$$$.



B. Mex Mastertime limit per test1 secondmemory limit per test1024 megabytesinputstandard inputoutputstandard outputYou are given an array $$$a$$$ of length $$$n$$$. Thescoreof $$$a$$$ is the MEX$$$^{\dagger}$$$ of $$$[a_1+a_2,a_2+a_3,\ldots,a_{n-1}+a_n]$$$. Find the minimum score of $$$a$$$ if you are allowed to rearrange elements of $$$a$$$ in any order. Note that you arenot requiredto construct the array $$$a$$$ that achieves the minimum score.$$$^{\dagger}$$$ The MEX (minimum excluded) of an array is the smallest non-negative integer that does not belong to the array. For instance:The MEX of $$$[2,2,1]$$$ is $$$0$$$, because $$$0$$$ does not belong to the array.The MEX of $$$[3,1,0,1]$$$ is $$$2$$$, because $$$0$$$ and $$$1$$$ belong to the array, but $$$2$$$ does not.The MEX of $$$[0,3,1,2]$$$ is $$$4$$$ because $$$0$$$, $$$1$$$, $$$2$$$, and $$$3$$$ belong to the array, but $$$4$$$ does not.InputThe first line contains a single integer $$$t$$$ ($$$1\le t\le 10^4$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$2\le n\le 2\cdot10^5$$$).The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$0 \le a_i \le 2\cdot 10^5$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\cdot 10^5$$$.OutputFor each test case, output the minimum score of $$$a$$$ after rearranging the elements of $$$a$$$ in any order.ExampleInput320 030 0 181 0 0 0 2 0 3 0Output1
0
1NoteIn the first test case, it is optimal to rearrange $$$a$$$ as $$$[0,0]$$$, the score of this array is the MEX of $$$[0+0]=[0]$$$, which is $$$1$$$.In the second test case, it is optimal to rearrange $$$a$$$ as $$$[0,1,0]$$$, the score of this array is the MEX of $$$[0+1,1+0]=[1,1]$$$, which is $$$0$$$.



A. Walking Mastertime limit per test1 secondmemory limit per test1024 megabytesinputstandard inputoutputstandard outputYunQian is standing on an infinite plane with the Cartesian coordinate system on it. In one move, she can move to the diagonally adjacent point on the top right or the adjacent point on the left.That is, if she is standing on point $$$(x,y)$$$, she can either move to point $$$(x+1,y+1)$$$ or point $$$(x-1,y)$$$.YunQian initially stands at point $$$(a,b)$$$ and wants to move to point $$$(c,d)$$$. Find the minimum number of moves she needs to make or declare that it is impossible.InputThe first line contains a single integer $$$t$$$ ($$$1\le t\le 10^4$$$) — the number of test cases. The description of test cases follows.The first line and only line of each test case contain four integers $$$a$$$, $$$b$$$, $$$c$$$, $$$d$$$ ($$$-10^8\le a,b,c,d\le 10^8$$$).OutputFor each test case, if it is possible to move from point $$$(a,b)$$$ to point $$$(c,d)$$$, output the minimum number of moves. Otherwise, output $$$-1$$$.ExampleInput6-1 0 -1 20 0 4 5-2 -1 1 1-3 2 -3 22 -1 -1 -11 1 0 2Output4
6
-1
0
3
3NoteIn the first test case, one possible way using $$$4$$$ moves is $$$(-1,0)\to (0,1)\to (-1,1)\to (0,2)\to (-1,2)$$$. It can be proven that it is impossible to move from point $$$(-1,0)$$$ to point $$$(-1,2)$$$ in less than $$$4$$$ moves.



F2. Survival of the Weakest (hard version)time limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the hard version of the problem. It differs from the easy one only in constraints on $$$n$$$. You can make hacks only if you lock both versions.Let $$$a_1, a_2, \ldots, a_n$$$ be an array of non-negative integers. Let $$$F(a_1, a_2, \ldots, a_n)$$$ be the sorted in the non-decreasing order array of $$$n - 1$$$ smallest numbers of the form $$$a_i + a_j$$$, where $$$1 \le i < j \le n$$$. In other words, $$$F(a_1, a_2, \ldots, a_n)$$$ is the sorted in the non-decreasing order array of $$$n - 1$$$ smallest sums of all possible pairs of elements of the array $$$a_1, a_2, \ldots, a_n$$$. For example, $$$F(1, 2, 5, 7) = [1 + 2, 1 + 5, 2 + 5] = [3, 6, 7]$$$.You are given an array of non-negative integers $$$a_1, a_2, \ldots, a_n$$$. Determine the single element of the array $$$\underbrace{F(F(F\ldots F}_{n-1}(a_1, a_2, \ldots, a_n)\ldots))$$$. Since the answer can be quite large, output it modulo $$$10^9+7$$$.InputThe first line contains one integer $$$n$$$ ($$$2 \le n \le 2 \cdot 10^5$$$) — the initial length of the array.The second line contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$0 \le a_i \le 10^9$$$) — the array elements.OutputOutput a single number — the answer modulo $$$10^9 + 7$$$.ExamplesInput5
1 2 4 5 6Output34Input9
1 1 1 7 7 7 9 9 9Output256Input7
1 7 9 2 0 0 9Output20Input3
1000000000 1000000000 777Output1540NoteIn the first test, the array is transformed as follows: $$$[1, 2, 4, 5, 6] \to [3, 5, 6, 6] \to [8, 9, 9] \to [17, 17] \to [34]$$$. The only element of the final array is $$$34$$$.In the second test, $$$F(a_1, a_2, \ldots, a_n)$$$ is $$$[2, 2, 2, 8, 8, 8, 8, 8]$$$. This array is made up of $$$3$$$ numbers of the form $$$1 + 1$$$ and $$$5$$$ numbers of the form $$$1 + 7$$$.In the fourth test, the array is transformed as follows: $$$[10^9, 10^9, 777] \to [10^9+777, 10^9+777] \to [2 \cdot 10^9 + 1554]$$$. $$$2 \cdot 10^9 + 1554$$$ modulo $$$10^9+7$$$ equals $$$1540$$$.



F1. Survival of the Weakest (easy version)time limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the easy version of the problem. It differs from the hard one only in constraints on $$$n$$$. You can make hacks only if you lock both versions.Let $$$a_1, a_2, \ldots, a_n$$$ be an array of non-negative integers. Let $$$F(a_1, a_2, \ldots, a_n)$$$ be the sorted in the non-decreasing order array of $$$n - 1$$$ smallest numbers of the form $$$a_i + a_j$$$, where $$$1 \le i < j \le n$$$. In other words, $$$F(a_1, a_2, \ldots, a_n)$$$ is the sorted in the non-decreasing order array of $$$n - 1$$$ smallest sums of all possible pairs of elements of the array $$$a_1, a_2, \ldots, a_n$$$. For example, $$$F(1, 2, 5, 7) = [1 + 2, 1 + 5, 2 + 5] = [3, 6, 7]$$$.You are given an array of non-negative integers $$$a_1, a_2, \ldots, a_n$$$. Determine the single element of the array $$$\underbrace{F(F(F\ldots F}_{n-1}(a_1, a_2, \ldots, a_n)\ldots))$$$. Since the answer can be quite large, output it modulo $$$10^9+7$$$.InputThe first line contains one integer $$$n$$$ ($$$2 \le n \le 3000$$$) — the initial length of the array.The second line contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$0 \le a_i \le 10^9$$$) — the array elements.OutputOutput a single number — the answer modulo $$$10^9 + 7$$$.ExamplesInput5
1 2 4 5 6Output34Input9
1 1 1 7 7 7 9 9 9Output256Input7
1 7 9 2 0 0 9Output20Input3
1000000000 1000000000 777Output1540NoteIn the first test, the array is transformed as follows: $$$[1, 2, 4, 5, 6] \to [3, 5, 6, 6] \to [8, 9, 9] \to [17, 17] \to [34]$$$. The only element of the final array is $$$34$$$.In the second test, $$$F(a_1, a_2, \ldots, a_n)$$$ is $$$[2, 2, 2, 8, 8, 8, 8, 8]$$$. This array is made up of $$$3$$$ numbers of the form $$$1 + 1$$$ and $$$5$$$ numbers of the form $$$1 + 7$$$.In the fourth test, the array is transformed as follows: $$$[10^9, 10^9, 777] \to [10^9+777, 10^9+777] \to [2 \cdot 10^9 + 1554]$$$. $$$2 \cdot 10^9 + 1554$$$ modulo $$$10^9+7$$$ equals $$$1540$$$.



E. There Should Be a Lot of Maximumstime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a tree (a connected graph without cycles). Each vertex of the tree contains an integer. Let's define the $$$\mathrm{MAD}$$$ (maximum double) parameter of the tree as the maximum integer that occurs in the vertices of the treeat least$$$2$$$ times. If no number occurs in the tree more than once, then we assume $$$\mathrm{MAD}=0$$$.Note that if you remove an edge from the tree, it splits into two trees. Let's compute the $$$\mathrm{MAD}$$$ parameters of the two trees and take the maximum of the two values. Let the result be thevalueof the deleted edge.For each edge, find its value. Note that we don't actually delete any edges from the tree, the values are to be found independently.InputThe first line contains one integer $$$n$$$ ($$$2 \le n \le 10^5$$$) — the number of vertices in the tree.Each of the next $$$n - 1$$$ lines contains two integers $$$u$$$ and $$$v$$$ ($$$1 \le u, v \le n$$$) — the ends of an edge of the tree. It's guaranteed that the given edges form a valid tree.The last line contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \le a_i \le 10^9$$$) — the numbers in the vertices.OutputFor each edge in the input order, print one number — the maximum of the $$$\mathrm{MAD}$$$ parameters of the two trees obtained after removing the given edge from the initial tree.ExamplesInput5
1 2
2 3
2 4
1 5
2 1 3 2 1Output0
2
1
2Input6
1 2
1 3
1 4
4 5
4 6
1 2 3 1 4 5Output1
1
0
1
1NoteIn the first example, after removing edge $$$(1, 2)$$$ no number repeats $$$2$$$ times in any of the resulting subtrees, so the answer is $$$\max(0, 0)=0$$$.After removing edge $$$(2, 3)$$$, in the bigger subtree, $$$1$$$ is repeated twice, and $$$2$$$ is repeated twice, so the $$$\mathrm{MAD}$$$ of this tree is $$$2$$$.After removing edge $$$(2, 4)$$$, in the bigger subtree, only the number $$$1$$$ is repeated, and in the second subtree, only one number appears, so the answer is $$$1$$$.In the second example, if edge $$$1 \leftrightarrow 4$$$ is not removed, then one of the subtrees will have two $$$1$$$, so the answer — $$$1$$$. And if edge $$$1 \leftrightarrow 4$$$ is deleted, both subtrees have no repeating values, so the answer is $$$0$$$.



D. A Wide, Wide Graphtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a tree (a connected graph without cycles) with $$$n$$$ vertices.Consider a fixed integer $$$k$$$. Then, the graph $$$G_k$$$ is an undirected graph with $$$n$$$ vertices, where an edge between vertices $$$u$$$ and $$$v$$$ exists if and only if the distance between vertices $$$u$$$ and $$$v$$$ in the given tree isat least$$$k$$$.For each $$$k$$$ from $$$1$$$ to $$$n$$$, print the number of connected components in the graph $$$G_k$$$.InputThe first line contains the integer $$$n$$$ ($$$2 \le n \le 10^5$$$) — the number of vertices in the graph.Each of the next $$$n-1$$$ lines contains two integers $$$u$$$ and $$$v$$$ ($$$1 \le u, v \le n$$$), denoting an edge between vertices $$$u$$$ and $$$v$$$ in the tree. It is guaranteed that these edges form a valid tree.OutputOutput $$$n$$$ integers: the number of connected components in the graph $$$G_k$$$ for each $$$k$$$ from $$$1$$$ to $$$n$$$.ExamplesInput6
1 2
1 3
2 4
2 5
3 6Output1 1 2 4 6 6Input5
1 2
2 3
3 4
3 5Output1 1 3 5 5NoteIn the first example: If $$$k=1$$$, the graph has an edge between each pair of vertices, so it has one component. If $$$k=4$$$, the graph has only edges $$$4 \leftrightarrow 6$$$ and $$$5 \leftrightarrow 6$$$, so the graph has $$$4$$$ components.In the second example: when $$$k=1$$$ or $$$k=2$$$ the graph has one component. When $$$k=3$$$ the graph $$$G_k$$$ splits into $$$3$$$ components: one component has vertices $$$1$$$, $$$4$$$ and $$$5$$$, and two more components contain one vertex each. When $$$k=4$$$ or $$$k=5$$$ each vertex is a separate component.



C. Place for a Selfietime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe universe is a coordinate plane. There are $$$n$$$ space highways, each of which is a straight line $$$y=kx$$$ passing through the origin $$$(0, 0)$$$. Also, there are $$$m$$$ asteroid belts on the plane, which we represent as open upwards parabolas, i. e. graphs of functions $$$y=ax^2+bx+c$$$, where $$$a > 0$$$.You want to photograph each parabola. To do this, for each parabola you need to choose a line that does not intersect this parabola and does not touch it. You can select the same line for different parabolas. Please find such a line for each parabola, or determine that there is no such line.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 10^4$$$). The description of the test cases follows.The first line of each test case contains $$$2$$$ integers $$$n$$$ and $$$m$$$ ($$$1 \le n, m \le 10^5$$$) —the number of lines and parabolas, respectively.Each of the next $$$n$$$ lines contains one integer $$$k$$$ ($$$|k| \le 10^8$$$), denoting a line that is described with the equation $$$y=kx$$$. The lines are not necessarily distinct, $$$k$$$ can be equal to $$$0$$$.Each of the next $$$m$$$ lines contains $$$3$$$ integers $$$a$$$, $$$b$$$, and $$$c$$$ ($$$a, |b|, |c| \le 10^8$$$, $$$a > 0$$$) — coefficients of equations of the parabolas $$$ax^2+bx+c$$$. The parabolas are not necessarily distinct.It is guaranteed that the sum $$$n$$$ over all test cases does not exceed $$$10^5$$$, and the sum $$$m$$$ over all test cases also does not exceed $$$10^5$$$.OutputFor each test case, output the answers for each parabola in the given order. If there is a line that does not intersect the given parabola and doesn't touch it, print on a separate line the word "YES", and then on a separate line the number $$$k$$$ — the coefficient of this line. If there are several answers, print any of them. If the line does not exist, print one word "NO".You can output the answer in any case (upper or lower). For example, the strings "yEs", "yes", "Yes", and "YES" will be recognized as positive responses.The empty lines in the output in the example are given only for illustration, you do not need to output them (but you can).ExampleInput51 211 -1 21 -1 32 2141 2 12 5 11 101 0 01 1100000000100000000 100000000 1000000002 3022 2 11 -2 11 -2 -1OutputYES
1
YES
1

YES
1
YES
4

NO

YES
100000000

YES
0
NO
NONoteIn the first test case, both parabolas do not intersect the only given line $$$y=1\cdot x$$$, so the answer is two numbers $$$1$$$.In the second test case, the line $$$y=x$$$ and the parabola $$$2x^2+5x+1$$$ intersect, and also the line $$$y=4x$$$ and the parabola $$$x^2+2x+1$$$ touch, so these pairs do not satisfy the condition. So for the first parabola, the answer is $$$1$$$ ($$$y=1x$$$), and for the second parabola — $$$4$$$.In the third test set, the line and the parabola intersect, so the answer is "NO".



B. The String Has a Targettime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a string $$$s$$$. You can apply this operation to the string exactly once: choose index $$$i$$$ and move character $$$s_i$$$ to the beginning of the string (removing it at the old position). For example, if you apply the operation with index $$$i=4$$$ to the string "abaacd" with numbering from $$$1$$$, you get the string "aabacd". What is the lexicographically minimal$$$^{\dagger}$$$ string you can obtain by this operation?$$$^{\dagger}$$$A string $$$a$$$ is lexicographically smaller than a string $$$b$$$ of the same length if and only if the following holds:in the first position where $$$a$$$ and $$$b$$$ differ, the string $$$a$$$ has a letter that appears earlier in the alphabet than the corresponding letter in $$$b$$$.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 10^4$$$). The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \le n \le 10 ^ 5$$$) — the length of the string.The second line of each test case contains the string $$$s$$$ of length $$$n$$$, consisting of lowercase English letters.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10 ^ 5$$$.OutputFor each test case, on a separate line print the lexicographically smallest string that can be obtained after applying the operation to the original string exactly once.ExampleInput43cba4acac5abbcb4aabaOutputacb
aacc
abbcb
aaabNoteIn the first test case, you need to move the last character to the beginning.In the second case, you need to move the second letter "a".In the third set you need to apply the operation with $$$i=1$$$, then the string will not change.



A. We Need the Zerotime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere is an array $$$a$$$ consisting of non-negative integers. You can choose an integer $$$x$$$ and denote $$$b_i=a_i \oplus x$$$ for all $$$1 \le i \le n$$$, where $$$\oplus$$$ denotes thebitwise XOR operation. Is it possible to choose such a number $$$x$$$ that the value of the expression $$$b_1 \oplus b_2 \oplus \ldots \oplus b_n$$$ equals $$$0$$$?It can be shown that if a valid number $$$x$$$ exists, then there also exists $$$x$$$ such that ($$$0 \le x < 2^8$$$).InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 1000$$$). The description of the test cases follows.The first line of the test case contains one integer $$$n$$$ ($$$1 \le n \le 10^3$$$) — the length of the array $$$a$$$.The second line of the test case contains $$$n$$$ integers — array $$$a$$$ ($$$0 \le a_i < 2^8$$$).It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^3$$$.OutputFor each set test case, print the integer $$$x$$$ ($$$0 \le x < 2^8$$$) if it exists, or $$$-1$$$ otherwise.ExampleInput531 2 531 2 340 1 2 341 2 2 311Output6
0
3
-1
1NoteIn the first test case, after applying the operation with the number $$$6$$$ the array $$$b$$$ becomes $$$[7, 4, 3]$$$, $$$7 \oplus 4 \oplus 3 = 0$$$.There are other answers in the third test case, such as the number $$$0$$$.



H. Code Locktime limit per test7 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputLara has a safe that is locked with a circle-shaped code lock that consists of a rotating arrow, a static circumference around the arrow, an input screen, and an input button.The circumference of the lock is split into $$$k$$$ equal sections numbered from $$$1$$$ to $$$k$$$ in clockwise order. Arrow always points to one of the sections. Each section is marked with one of the first $$$k$$$ letters of the English alphabet. No two sections are marked with the same letter.Due to the lock limitations, the safe's password is a string of length $$$n$$$ that consists of first $$$k$$$ letters of the English alphabet only. Lara enters the password by rotating the lock's arrow and pressing the input button. Initially, the lock's arrow points to section $$$1$$$ and the input screen is empty. In one second she can do one of the following actions.Rotate the arrow one section clockwise. If the arrow was pointing at section $$$x < k$$$ it will now point at section $$$x + 1$$$. If the arrow was pointing at section $$$k$$$ it will now point at section $$$1$$$.Rotate the arrow one section counter-clockwise. If the arrow was pointing at section $$$x > 1$$$ it will now point at section $$$x - 1$$$. If the arrow was pointing at section $$$1$$$ it will now point at section $$$k$$$.Press the input button. The letter marked on the section that the arrow points to will be added to the content of the input screen.As soon as the content of the input screen matches the password, the safe will open. Lara always enters her password in the minimum possible time.Lara has recently found out that the safe can be re-programmed. She can take the first $$$k$$$ letters of the English alphabet and assign them to the sectors in any order she likes. Now she wants to re-arrange the letters in a way that will minimize the number of seconds it takes her to input the password. Compute this minimum number of seconds and the number of ways to assign letters, for which this minimum number of seconds is achieved.Two ways to assign letters to sectors are considered to be distinct if there exists at least one sector $$$i$$$ that is assigned different letters.InputThe first line of the input contains two integers $$$k$$$ and $$$n$$$ ($$$2 \leq k \leq 16$$$, $$$2 \leq n \leq 100\,000$$$) — the number of sectors on the lock's circumference and the length of Lara's password, respectively.The second line of the input contains a string of length $$$n$$$ that consists of the first $$$k$$$ lowercase letters of the English alphabet only. This string is the password.OutputOn the first line print minimum possible number of seconds it can take Lara to enter the password and open the safe if she assigns letters to sectors optimally.On the second line print the number of ways to assign letters optimally.ExamplesInput3 10
abcabcabcaOutput19
2Input4 20
bcbcbcbcadadadadcbdaOutput40
2Input4 6
adcbdaOutput12
4NoteThe initial states of optimal arrangements for the first example are shown in the figure below.The initial states of optimal arrangements for the second example are shown in the figure below.The initial states of optimal arrangements for the third example are shown in the figure below.



G. Flow Controltime limit per test6 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputRaj has a single physical network line that connects his office to the Internet. This line bandwidth is $$$b$$$ bytes per millisecond.There are $$$n$$$ users who would like to use this network line to transmit some data. The $$$i$$$-th of them will use the line from millisecond $$$s_i$$$ to millisecond $$$f_i$$$ inclusive. His initial data rate will be set to $$$d_i$$$. That means he will use data rate equal to $$$d_i$$$ for millisecond $$$s_i$$$, and then it will change according to the procedure described below.The flow control will happen as follows. Suppose there are $$$m$$$ users trying to transmit some data via the given network line during millisecond $$$x$$$. Denote as $$$t_i$$$ the data rate that the $$$i$$$-th of these $$$m$$$ users has at the beginning of this millisecond. All $$$t_i$$$ are non-negative integer values.If $$$m = 0$$$, i. e. there are no users trying to transmit data during this millisecond, nothing happens.If the sum of all $$$t_i$$$ is less than or equal to $$$b$$$, each active user successfully completes his transmission (the $$$i$$$-th active user transmits $$$t_i$$$ bytes). After that, the data rate of each active user grows by $$$1$$$, i. e. each $$$t_i$$$ is increased by $$$1$$$.If the sum of all $$$t_i$$$ is greater than $$$b$$$, the congestion occurs and no data transmissions succeed this millisecond at all. If that happens, each $$$t_i$$$ decreases twice, i. e. each $$$t_i$$$ is replaced with $$$\lfloor \frac{t_i}{2} \rfloor$$$.Raj knows all the values $$$n$$$, $$$b$$$, $$$s_i$$$, $$$f_i$$$, and $$$d_i$$$, he wants to calculate the total number of bytes transmitted by all the users in the aggregate.InputThe first line of the input contains two integers $$$n$$$ and $$$b$$$ ($$$1 \leq n \leq 2 \cdot 10^5$$$, $$$1 \leq b \leq 10^9$$$), the number of users who will use the line and the line bandwidth, respectively.Each of the following $$$n$$$ lines contains three integers $$$s_i$$$, $$$f_i$$$ and $$$d_i$$$ ($$$1 \leq s_i \leq f_i \leq 10^9$$$, $$$1 \leq d_i \leq 10^9$$$), denoting that the $$$i$$$-th user will try to transmit data during each millisecond between $$$s_i$$$ and $$$f_i$$$ inclusive, and the initial data rate of the $$$i$$$-th user.OutputPrint one integer — the total number of bytes all users will successfully transmit.ExamplesInput1 3
1 5 2Output10Input1 10
7 11 1000Output0Input2 6
1 12 1
8 20 3Output64Input3 10
1 100 1
30 60 20
40 80 6Output534NoteConsider the first example.Millisecond $$$1$$$: User $$$1$$$ transmits $$$2$$$ bytes.Millisecond $$$2$$$: User $$$1$$$ transmits $$$3$$$ bytes.Millisecond $$$3$$$: Congestion occurs, and no user transmits data.Millisecond $$$4$$$: User $$$1$$$ transmits $$$2$$$ bytes.Millisecond $$$5$$$: User $$$1$$$ transmits $$$3$$$ bytes.In the second example, at each millisecond from the $$$7$$$-th to the $$$11$$$-th inclusive, congestion occurs, and the only user decreases their rate twice. However, they don't decrease the speed enough before disconnecting.Consider the third example.Millisecond $$$1$$$: User $$$1$$$ transmits $$$1$$$ bytes.Millisecond $$$2$$$: User $$$1$$$ transmits $$$2$$$ bytes.Millisecond $$$3$$$: User $$$1$$$ transmits $$$3$$$ bytes.Millisecond $$$4$$$: User $$$1$$$ transmits $$$4$$$ bytes.Millisecond $$$5$$$: User $$$1$$$ transmits $$$5$$$ bytes.Millisecond $$$6$$$: User $$$1$$$ transmits $$$6$$$ bytes.Millisecond $$$7$$$: Congestion occurs, and no user transmits data.Millisecond $$$8$$$: User $$$1$$$ transmits $$$3$$$ bytes. User $$$2$$$ transmits $$$3$$$ bytes.Millisecond $$$9$$$: Congestion occurs, and no user transmits data.Millisecond $$$10$$$: User $$$1$$$ transmits $$$2$$$ bytes. User $$$2$$$ transmits $$$2$$$ bytes.Millisecond $$$11$$$: User $$$1$$$ transmits $$$3$$$ bytes. User $$$2$$$ transmits $$$3$$$ bytes.Millisecond $$$12$$$: Congestion occurs, and no user transmits data.Millisecond $$$13$$$: User $$$2$$$ transmits $$$2$$$ bytes.Millisecond $$$14$$$: User $$$2$$$ transmits $$$3$$$ bytes.Millisecond $$$15$$$: User $$$2$$$ transmits $$$4$$$ bytes.Millisecond $$$16$$$: User $$$2$$$ transmits $$$5$$$ bytes.Millisecond $$$17$$$: User $$$2$$$ transmits $$$6$$$ bytes.Millisecond $$$18$$$: Congestion occurs, and no user transmits data.Millisecond $$$19$$$: User $$$2$$$ transmits $$$3$$$ bytes.Millisecond $$$20$$$: User $$$2$$$ transmits $$$4$$$ bytes.



F. Approximate Diametertime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputJack has a graph of $$$n$$$ vertices and $$$m$$$ edges. All edges are bidirectional and of unit length. The graph is connected, i. e. there exists a path between any two of its vertices. There can be more than one edge connecting the same pair of vertices. The graph can contain self-loops, i. e. edges connecting a node to itself.The distance between vertices $$$u$$$ and $$$v$$$ is denoted as $$$\rho(u, v)$$$ and equals the minimum possible number of edges on a path between $$$u$$$ and $$$v$$$. The diameter of graph $$$G$$$ is defined as the maximum possible distance between some pair of its vertices. We denote it as $$$d(G)$$$. In other words, $$$$$$d(G) = \max_{1 \le u, v \le n}{\rho(u, v)}.$$$$$$Jack plans to consecutively apply $$$q$$$ updates to his graph. Each update adds exactly one edge to the graph. Denote as $$$G_i$$$ the graph after exactly $$$i$$$ updates are made. Jack wants to calculate $$$q + 1$$$ values $$$d(G_0), d(G_1), d(G_2), \ldots, d(G_q)$$$.However, Jack suspects that finding the exact diameters of $$$q + 1$$$ graphs might be a difficult task, so he is fine with approximate answers that differ from the correct answers no more than twice. Formally, Jack wants to find a sequence of positive integers $$$a_0, a_1, a_2, \ldots, a_q$$$ such that $$$$$$\left\lceil \frac{d(G_i)}{2} \right\rceil \le a_i \le 2 \cdot d(G_i)$$$$$$ for each $$$i$$$.HacksYou cannot make hacks in this problem.InputThe first line of the input contains three integers $$$n$$$, $$$m$$$, and $$$q$$$ ($$$2 \leq n \leq 10^5$$$, $$$n - 1 \leq m \leq 10^5$$$, $$$0 \leq q \leq 10^5$$$), the number of vertices in the given graph, the number of edges and the number of updates, respectively.Then follow $$$m$$$ lines describing the initial edges of the graph. The $$$i$$$-th of these lines contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \leq u_i, v_i \leq n$$$), the indexes of the vertices connected by the $$$i$$$-th edge.Then follow $$$q$$$ lines describing the updates. The $$$i$$$-th of these lines contains two integers $$$u'_i$$$ and $$$v'_i$$$ ($$$1 \leq u'_i, v'_i \leq n$$$), the indexes of the vertices connected by the edge that is added to the graph in the $$$i$$$-th update.Important note.For testing purposes, the input datamaycontain some extra lines after the mentioned input format. These will be used by the checker to verify your answer. They are not a part of the test data, you should not use them in any way and you can even omit reading them.OutputPrint a sequence of $$$q + 1$$$ positive integers $$$a_0, a_1, a_2, \ldots, a_q$$$. The $$$i$$$-th of these integers should differ from the diameter of graph $$$G_i$$$ no more than twice.ExamplesInput9 10 8
1 2
2 3
2 4
3 5
4 5
5 6
5 7
6 8
7 8
8 9
3 4
6 7
2 8
1 9
1 6
4 9
3 9
7 1Output10 6 5 6 2 4 2 2 1Input8 7 9
1 2
2 3
3 4
4 5
5 6
6 7
7 8
1 5
3 7
2 4
4 6
6 8
8 2
5 4
2 4
3 3
1 652997 124613 653029 653029 124613 124613 124613 648901 124613 653029Output7 5 4 4 4 3 3 3 3 3NoteIn the first example, the correct sequence of $$$d(G_0), d(G_1), d(G_2), \ldots, d(G_q)$$$ is $$$6, 6, 6, 3, 3, 3, 2, 2, 2$$$.In the second example, the input contains an extra line that you can omit reading. It is not a part of the test and will be used for verifying your answer. The output of the second example contains the correct values of $$$d(G_i)$$$.



E. Routingtime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputAda operates a network that consists of $$$n$$$ servers and $$$m$$$ direct connections between them. Each direct connection between a pair of distinct servers allows bidirectional transmission of information between these two servers. Ada knows that these $$$m$$$ direct connections allow to directly or indirectly transmit information between any two servers in this network. We say that server $$$v$$$ is a neighbor of server $$$u$$$ if there exists a direct connection between these two servers.Ada needs to configure her network's WRP (Weird Routing Protocol). For each server $$$u$$$ she needs to select exactly one of its neighbors as an auxiliary server $$$a(u)$$$. After all $$$a(u)$$$ are set, routing works as follows. Suppose server $$$u$$$ wants to find a path to server $$$v$$$ (different from $$$u$$$).Server $$$u$$$ checks all of its direct connections to other servers. If it sees a direct connection with server $$$v$$$, it knows the path and the process terminates.If the path was not found at the first step, server $$$u$$$ asks its auxiliary server $$$a(u)$$$ to find the path.Auxiliary server $$$a(u)$$$ follows this process starting from the first step.After $$$a(u)$$$ finds the path, it returns it to $$$u$$$. Then server $$$u$$$ constructs the resulting path as the direct connection between $$$u$$$ and $$$a(u)$$$ plus the path from $$$a(u)$$$ to $$$v$$$.As you can see, this procedure either produces a correct path and finishes or keeps running forever. Thus, it is critically important for Ada to configure her network's WRP properly.Your goal is to assign an auxiliary server $$$a(u)$$$ for each server $$$u$$$ in the given network. Your assignment should make it possible to construct a path from any server $$$u$$$ to any other server $$$v$$$ using the aforementioned procedure. Or you should report that such an assignment doesn't exist.InputThe first line of the input contains two integers $$$n$$$ and $$$m$$$ ($$$2 \leq n \leq 20$$$, $$$n - 1 \leq m \leq \frac{n \cdot (n - 1)}{2}$$$) — the number of servers and the number of direct connections in the given network.Then follow $$$m$$$ lines containing two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \leq u_i, v_i \leq n$$$, $$$u_i \ne v_i$$$) each, the $$$i$$$-th line describes the $$$i$$$-th direct connection.It is guaranteed that there is no more than one direct connection between any two servers. It is guaranteed that there is a direct or indirect route (consisting only of the given direct connections) between any two servers.OutputIf there is no way to assign an auxiliary server $$$a(u)$$$ for each server $$$u$$$ in such a way that WRP will be able to find a path from any server $$$u$$$ to any other server $$$v$$$, print "No" in the only line of the output.Otherwise, print "Yes" in the first line of the output. In the second line of the output print $$$n$$$ integers, the $$$i$$$-th of these integers should be equal to $$$a(i)$$$ – the index of the auxiliary server for server $$$i$$$. Do not forget that there must be a direct connection between server $$$i$$$ and server $$$a(i)$$$.You can output the answer in any case (upper or lower). For example, the strings "yEs", "yes", "Yes", and "YES" will be recognized as positive responses.ExamplesInput6 7
1 2
2 3
3 1
4 5
5 6
4 6
2 5OutputYes
2 5 2 5 2 5Input3 2
1 2
2 3OutputYes
2 1 2Input4 4
1 3
2 3
4 1
4 2OutputYes
3 3 1 1Input6 5
1 2
2 3
3 4
4 5
5 6OutputNo



D. Accommodationtime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputAnnie is an amateur photographer. She likes to take pictures of giant residential buildings at night. She just took a picture of a huge rectangular building that can be seen as a table of $$$n \times m$$$ windows. That means that the building has $$$n$$$ floors and each floor has exactly $$$m$$$ windows. Each window is either dark or bright, meaning there is light turned on in the room behind it.Annies knows that each apartment in this building is either one-bedroom or two-bedroom. Each one-bedroom apartment has exactly one window representing it on the picture, and each two-bedroom apartment has exactly twoconsecutivewindows on the same floor. Moreover, the value of $$$m$$$ is guaranteed to be divisible by $$$4$$$ and it is known that each floor has exactly $$$\frac{m}{4}$$$ two-bedroom apartments and exactly $$$\frac{m}{2}$$$ one-bedroom apartments. The actual layout of apartments is unknown and can be different for each floor.Annie considers an apartment to be occupied ifat least oneof its windows is bright. She now wonders, what are the minimum and maximum possible number of occupied apartments if judged by the given picture?Formally, for each of the floors, she comes up with some particular apartments layout with exactly $$$\frac{m}{4}$$$ two-bedroom apartments (two consecutive windows) and $$$\frac{m}{2}$$$ one-bedroom apartments (single window). She then counts the total number of apartments that have at least one bright window. What is the minimum and maximum possible number she can get?InputThe first line of the input contains two positive integers $$$n$$$ and $$$m$$$ ($$$1 \leq n \cdot m \leq 5 \cdot 10^5$$$) — the number of floors in the building and the number of windows per floor, respectively. It is guaranteed that $$$m$$$ is divisible by $$$4$$$.Then follow $$$n$$$ lines containing $$$m$$$ characters each. The $$$j$$$-th character of the $$$i$$$-th line is "0" if the $$$j$$$-th window on the $$$i$$$-th floor is dark, and is "1" if this window is bright.OutputPrint two integers, the minimum possible number of occupied apartments and the maximum possible number of occupied apartments, assuming each floor can have an individual layout of $$$\frac{m}{4}$$$ two-bedroom and $$$\frac{m}{2}$$$ one-bedroom apartments.ExamplesInput5 4
0100
1100
0110
1010
1011Output7 10Input1 8
01011100Output3 4NoteIn the first example, each floor consists of one two-bedroom apartment and two one-bedroom apartments.The following apartment layout achieves the minimum possible number of occupied apartments equal to $$$7$$$.|0 1|0|0||1 1|0|0||0|1 1|0||1|0 1|0||1|0|1 1|The following apartment layout achieves the maximum possible number of occupied apartments equal to $$$10$$$.|0 1|0|0||1|1 0|0||0 1|1|0||1|0 1|0||1 0|1|1|



C. Pull Your Lucktime limit per test1 secondmemory limit per test512 megabytesinputstandard inputoutputstandard outputWhile James is gone on business, Vesper takes her time and explores what the legendary Casino Royale has to offer to people who are fond of competitive programming.Her attention was grabbed by the very new "Pull Your Luck" roulette which functions in a pretty peculiar way. The roulette's wheel consists of $$$n$$$ sectors number from $$$0$$$ to $$$n - 1$$$. There is no ball and the winning sector is determined by a static arrow pointing to one of the sectors. Sectors' indexes go in the natural order and the wheel always spins in the direction of indexes increment. That means that sector $$$i + 1$$$ goes right after sector $$$i$$$ for all $$$i$$$ from $$$0$$$ to $$$n - 2$$$, and sector $$$0$$$ goes right after sector $$$n - 1$$$.After a bet is made, the player is allowed to pull the triggering handle herself and cause the wheel to spin. If the player's initial pull is made with the force equal to positive integer $$$f$$$, the wheel will spin for $$$f$$$ seconds. During the first second it will advance $$$f$$$ sectors, the next second it will advance $$$f - 1$$$ sectors, then $$$f - 2$$$ sectors, and so on until it comes to a complete stop. After the wheel comes to a complete stop, the sector which the arrow is pointing to is the winning one.The roulette's arrow currently points at sector $$$x$$$. Vesper knows that she can pull the handle with any integer force from $$$1$$$ to $$$p$$$ inclusive. Note that it is not allowed to pull the handle with force $$$0$$$, i. e. not pull it all. The biggest prize is awarded if the winning sector is $$$0$$$. Now Vesper wonders if she can make sector $$$0$$$ win by pulling the triggering handle exactly once?InputThe first line of the input contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^4$$$) — the number of test cases. Then follow $$$t$$$ lines containing one test description each.Each test description consists of three integers $$$n$$$, $$$x$$$ and $$$p$$$ ($$$3 \leq n \leq 10^5$$$, $$$0 \leq x < n$$$, $$$1 \leq p \leq 10^9$$$). They are the number of sectors on the wheel, the current sector the arrow points at, and the maximum force that Vesper can pull the handle with, respectively.It is guaranteed that the sum of $$$n$$$ over all test casesdoesn't exceed $$$2 \cdot 10^5$$$.OutputPrint $$$t$$$ lines, the $$$i$$$-th line should contain the answer for the $$$i$$$-th test case. If it is possible to pull the handle with the integer force from $$$1$$$ to $$$p$$$ in order to make sector $$$0$$$ win, print "Yes". Otherwise, print "No".You can output the answer in any case (upper or lower). For example, the strings "yEs", "yes", "Yes", and "YES" will be recognized as positive responses.ExampleInput75 2 15 2 210 0 10011 7 1003 1 100031 0 10100 49 7OutputNo
Yes
Yes
Yes
No
No
NoNoteIn the first example, the only possible way to pull the handle is with force $$$1$$$. That is not enough to make the arrow point at sector $$$0$$$, at least force $$$2$$$ is required to do so.In the second example, Vesper can pull the handle with the force $$$2$$$ so the wheel will spin $$$2 + 1 = 3$$$ sectors ahead and the arrow will point at sector $$$0$$$.In the third example, Vesper can pull the handle with the force $$$4$$$ so the wheel will spin $$$4 + 3 + 2 + 1 = 10$$$ sectors and will point at sector $$$0$$$ again.In the fourth example, Vesper can pull the handle with the force $$$5$$$ so the wheel will spin $$$5 + 4 + 3 + 2 + 1 = 15$$$ sectors. That will make the wheel make one full turn plus $$$4$$$ more sectors.In the fifth example, whatever force Vesper chooses to pull the handle with, she can only make sectors $$$1$$$ and $$$2$$$ win.



B. Vaccinationtime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputEthan runs a vaccination station to help people combat the seasonal flu. He analyses the historical data in order to develop an optimal strategy for vaccine usage.Consider there are $$$n$$$ patients coming to the station on a particular day. The $$$i$$$-th patient comes at the moment $$$t_i$$$. We know that each of these patients can be asked to wait for no more than $$$w$$$ time moments. That means the $$$i$$$-th patient can get vaccine at moments $$$t_i, t_i + 1, \ldots, t_i + w$$$.Vaccines come in packs, each pack consists of $$$k$$$ doses. Each patient needs exactly one dose. Packs are stored in a special fridge. After a pack is taken out of the fridge and opened, it can no longer be put back. The lifetime of the vaccine outside the fridge is $$$d$$$ moments of time. Thus, if the pack was taken out of the fridge and opened at moment $$$x$$$, its doses can be used to vaccinate patients at moments $$$x, x + 1, \ldots, x + d$$$. At moment $$$x + d + 1$$$ all the remaining unused doses of this pack are thrown away.Assume that the vaccination station has enough staff to conduct an arbitrary number of operations at every moment of time. What is the minimum number of vaccine packs required to vaccinate all $$$n$$$ patients?InputThe first line of the input contains the number of test cases $$$t$$$ ($$$1 \leq t \leq 10^4$$$). Then follow $$$t$$$ descriptions of the test cases.The first line of each test case contains four integers $$$n$$$, $$$k$$$, $$$d$$$ and $$$w$$$ ($$$1 \leq n, k \leq 2 \cdot 10^5$$$, $$$0 \leq d, w \leq 10^6$$$). They are the number of patients, the number of doses per vaccine pack, the number of moments of time the vaccine can live outside the fridge, and the number of moments of time each of the patients can wait, respectively.The second line of each test case contains a non-decreasing sequence $$$t_1, t_2, \ldots, t_n$$$ ($$$0 \leq t_1 \leq t_2 \leq \ldots \leq t_n \leq 10^6$$$). The $$$i$$$-th element of this sequence is the moment when the $$$i$$$-th patient comes to the vaccination station.It is guaranteed that the sum of $$$n$$$ over all test cases won't exceed $$$2 \cdot 10^5$$$.OutputOutput one integer, the minimum number of vaccine packs required to vaccinate all $$$n$$$ patients.ExampleInput56 3 5 31 2 3 10 11 186 4 0 03 3 3 3 3 49 10 2 20 1 2 3 4 5 6 7 83 10 3 610 20 305 5 4 40 2 4 6 8Output2
3
2
3
1NoteIn the first example, the first pack can be opened at moment $$$1$$$ to vaccinate patient $$$1$$$. The vaccine is durable enough to be used at moments $$$2$$$ and $$$3$$$ for patients $$$2$$$ and $$$3$$$, respectively. Then the staff needs to ask patients $$$4$$$ and $$$5$$$ to wait for moment $$$13$$$. At moment $$$13$$$ the staff opens the second vaccine pack and serves patients $$$4$$$ and $$$5$$$. Finally, the last patient comes at moment $$$18$$$ and immediately gets the last dose of the second pack while it is still fine.In the second example, the vaccine should be used exactly at the moment it is taken out of the fridge. Moreover, all the patients want to be served at exactly the same moment they come. That means the staff needs to open two packs at moment $$$3$$$ and use five doses on patients $$$1$$$, $$$2$$$, $$$3$$$, $$$4$$$, and $$$5$$$. There will be three doses left ouf of these two packs but they can't be used for patient $$$6$$$. When patient $$$6$$$ comes at moment $$$4$$$ the staff needs to open a new pack just to use only one dose out of it.



A. Lame Kingtime limit per test1 secondmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou are given a checkerboard of size $$$201 \times 201$$$, i. e. it has $$$201$$$ rows and $$$201$$$ columns. The rows of this checkerboard are numbered from $$$-100$$$ to $$$100$$$ from bottom to top. The columns of this checkerboard are numbered from $$$-100$$$ to $$$100$$$ from left to right. The notation $$$(r, c)$$$ denotes the cell located in the $$$r$$$-th row and the $$$c$$$-th column.There is a king piece at position $$$(0, 0)$$$ and it wants to get to position $$$(a, b)$$$ as soon as possible. In this problem our king is lame. Each second, the king makes exactly one of the following five moves.Skip move. King's position remains unchanged.Go up. If the current position of the king is $$$(r, c)$$$ he goes to position $$$(r + 1, c)$$$.Go down. Position changes from $$$(r, c)$$$ to $$$(r - 1, c)$$$.Go right. Position changes from $$$(r, c)$$$ to $$$(r, c + 1)$$$.Go left. Position changes from $$$(r, c)$$$ to $$$(r, c - 1)$$$.King isnot allowedto make moves that put him outside of the board. The important consequence of the king being lame is that he isnot allowedto make the same move during two consecutive seconds. For example, if the king goes right, the next second he can only skip, go up, down, or left.What is the minimum number of seconds the lame king needs to reach position $$$(a, b)$$$?InputThe first line of the input contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^4$$$) — the number of test cases. Then follow $$$t$$$ lines containing one test case description each.Each test case consists of two integers $$$a$$$ and $$$b$$$ ($$$-100 \leq a, b \leq 100$$$) — the position of the cell that the king wants to reach. It is guaranteed that either $$$a \ne 0$$$ or $$$b \ne 0$$$.OutputPrint $$$t$$$ integers. The $$$i$$$-th of these integers should be equal to the minimum number of seconds the lame king needs to get to the position he wants to reach in the $$$i$$$-th test case. The king always starts at position $$$(0, 0)$$$.ExampleInput5-4 14 40 -6-5 -47 -8Output7
8
11
9
15NoteOne of the possible solutions for the first example is: go down, go right, go down, go right, go down, go left, go down.One of the possible solutions for the second example is to alternate "go right" and "go up" moves $$$4$$$ times each.One of the possible solutions for the third example is to alternate "go left" and "skip" moves starting with "go left". Thus, "go left" will be used $$$6$$$ times, and "skip" will be used $$$5$$$ times.



B. Settlement of Guinea Pigstime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputDasha loves guinea pigs very much. In this regard, she decided to settle as many guinea pigs at home as possible and developed a plan for the next $$$n$$$ days. Every day, she will either buy a new guinea pig or call a doctor to examine all her pets.Unfortunately, the store where she was going to buy guinea pigs does not understand them. Therefore, it cannot determine their gender. Dasha can't do it either. The only one who can help is a doctor.To keep guinea pigs, aviaries are needed. Dasha plans to buy them in the same store. Unfortunately, only one species is sold there — a double aviary. No more than two guinea pigs can live in it.Since Dasha does not want to cause moral injury to her pets — she will not settle two guinea pigs of different genders in one aviary.Help Dasha calculate how many aviaries in the worst case you need to buy so that you can be sure that at no moment of time do two guinea pigs of different genders live in the same aviary.As part of this task, we believe that guinea pigs have only two genders — male and female.InputThe first line of input data contains one number $$$t$$$ ($$$1 \leqslant t \leqslant 10^5$$$) — the number of input data sets.The first line of each input data set contains one number $$$n$$$ ($$$1 \leqslant n \leqslant 10^5$$$) — the number of days Dasha has a plan for.The next line contains $$$n$$$ numbers $$$b_1, b_2, b_3, \ldots, b_n$$$ ($$$1 \leqslant b_i \leqslant 2$$$) — Dasha's plan. If $$$b_i = 1$$$, then on the $$$i$$$th day, Dasha will buy a new guinea pig. If $$$b_i = 2$$$, then on the $$$i$$$th day, a doctor will come to Dasha and help determine the sex of all guinea pigs that Dasha already has.It is guaranteed that the sum of $$$n$$$ for all input data sets does not exceed $$$10^5$$$.OutputFor each set of input data, output one number — the minimum number of aviaries Dasha needs to buy so that no matter what the genders of the pigs turn out to be, we can settle them so that at no point in time do two guinea pigs of different genders live together.ExampleInput631 1 132 2 251 1 1 2 1101 2 1 2 1 2 1 2 1 2201 2 1 1 1 1 1 2 1 2 1 2 2 1 1 1 1 1 1 1202 1 1 2 1 1 2 1 2 2 1 1 1 2 2 1 1 1 1 2Output3
0
3
4
12
9NoteIn the first set of input data, Dasha needs to put each guinea pig in a separate enclosure, since she does not know their gender.In the second set of input data, Dasha will buy $$$0$$$ guinea pigs, which means she will need $$$0$$$ aviaries.In the third set of input data, you even need $$$3$$$ aviaries to put each guinea pig in a separate aviary before the doctor arrives at the $$$4$$$th day. When she finds out their gender, at least two guinea pigs will be of the same gender and they can be placed in one aviary, and the third in another aviary. Thus, she will have one free aviary in which she can settle a new guinea pig. So answer is $$$3$$$.In the fourth set of input data, we show that $$$4$$$ is the optimal answer.To begin with, we note that the first four guinea pigs can be placed one at a time in an aviary. Then a doctor will come and determine their gender. Among these four guinea pigs there will be at least one pair of the same gender, because: either male guinea pigs are at least $$$2$$$, or they are not more than $$$1$$$, which means that the female is at least $$$3$$$. Now we can put this couple in one aviary, and the other two in separate ones. We will have one more empty aviary where we can put a new pig.Now let's show that the answer is at least $$$4$$$. Let's say that among the first $$$4$$$ guinea pigs, $$$3$$$ are female and $$$1$$$ is male. We need at least $$$3$$$ aviaries to settle them. Then, when we buy a new guinea pig, we will need another aviary in which we will put it, since we do not know its gender.



A. Likestime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputNikita recently held a very controversial round, after which his contribution changed very quickly.The announcement hung on the main page for $$$n$$$ seconds. In the $$$i$$$th second $$$|a_i|$$$th person either liked or removed the like (Nikita was lucky in this task and there are no dislikes). If $$$a_i > 0$$$, then the $$$a_i$$$th person put a like. If $$$a_i < 0$$$, then the person $$$-a_i$$$ removed the like.Each person put and removed the like no more than once. A person could not remove a like if he had not put it before.Since Nikita's contribution became very bad after the round, he wanted to analyze how his contribution changed while the announcement was on the main page. He turned to the creator of the platform with a request to give him the sequence $$$a_1, a_2, \ldots, a_n$$$. But due to the imperfection of the platform, the sequence $$$a$$$ was shuffled.You are given a shuffled sequence of $$$a$$$ that describes user activity. You need to tell for each moment from $$$1$$$ to $$$n$$$ what the maximum and minimum number of likes could be on the post at that moment.InputThe first line of input data contains one number $$$t$$$ ($$$1 \leqslant t \leqslant 1000$$$) — the number of test cases.In the first line of test case, one number is given $$$n$$$ ($$$1 \leqslant n \leqslant 100$$$) — the number of seconds during which Nikita's announcement hung on the main page.The next line contains $$$n$$$ numbers $$$b_1, b_2, b_3, \ldots, b_n$$$ ($$$1 \leqslant |b_i| \leqslant n$$$) — mixed array $$$a$$$. It is guaranteed that there exists such a permutation of $$$b$$$ that it is a correct sequence of events described in the condition.It is guaranteed that the sum of $$$n$$$ for all input test cases does not exceed $$$10^4$$$.OutputFor each test case, output two lines, each of which contains $$$n$$$ numbers.In the first line, for each test case, output the maximum number of likes that Nikita could have at the announcement at the $$$i$$$th second.In the second line, for each test case, output the minimum number of likes that Nikita could have at the announcement at the $$$i$$$th second.ExampleInput531 2 -221 -164 3 -1 2 1 -254 2 -2 1 37-1 6 -4 3 2 4 1Output1 2 1 
1 0 1 
1 0 
1 0 
1 2 3 4 3 2 
1 0 1 0 1 2 
1 2 3 4 3 
1 0 1 2 3 
1 2 3 4 5 4 3 
1 0 1 0 1 2 3NoteIn the first test case, the maximum values are reached with the following permutation: $$$1, 2, -2$$$. And the minimum values for such: $$$2, -2, 1$$$.In the third test case, all maximal values are reached with the following permutation: $$$4, 2, 3, 1, -1, -2$$$. And the minimum values for the next permutation: $$$2, -2, 1, -1, 3, 4$$$.



G. A task for substringstime limit per test4 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputPhilip is very fond of tasks on the lines. He had already solved all the problems known to him, but this was not enough for him. Therefore, Philip decided to come up with his own task.To do this, he took the string $$$t$$$ and a set of $$$n$$$ strings $$$s_1$$$, $$$s_2$$$, $$$s_3$$$, ..., $$$s_n$$$. Philip has $$$m$$$ queries, in the $$$i$$$th of them, Philip wants to take a substring of the string $$$t$$$ from $$$l_i$$$th to $$$r_i$$$th character, and count the number of its substrings that match some string from the set. More formally, Philip wants to count the number of pairs of positions $$$a$$$, $$$b$$$, such that $$$l_i \le a \le b \le r_i$$$, and the substring of the string $$$t$$$ from $$$a$$$th to $$$b$$$th character coincides with some string $$$s_j$$$ from the set.A substring of the string $$$t$$$ from $$$a$$$th to $$$b$$$th character is a string obtained from $$$t$$$ by removing the $$$a - 1$$$ character from the beginning and $$$|t| - b$$$ characters from the end, where $$$|t|$$$ denotes the length of the string $$$t$$$.Philip has already solved this problem, but can you?InputThe first line contains two positive integers $$$n$$$ and $$$m$$$ ($$$1 \le n, m \le 500\,000$$$) — the number of rows in the set and the number of queries.The second line contains a single string $$$t$$$ consisting of lowercase letters of the English alphabet ($$$1 \le |t| \le 5 \cdot 10^6$$$).The following $$$n$$$ lines describe the strings from the set. In the $$$i$$$th of them, a single string $$$s_i$$$ is given, consisting of lowercase letters of the English alphabet. Denote by $$$S$$$ the total length of all strings from the set. It is guaranteed that $$$S \le 10^6$$$, as well as that all strings of $$$s_i$$$ are different.In the following lines, queries are entered. The $$$i$$$th of them contains two positive integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \le l_i \le r_i \le |t|$$$) — the left and right border of the substring $$$t$$$ from the $$$i$$$-th query.OutputIn a single line, print $$$m$$$ integers, $$$i$$$th of them should be equal to the answers to the $$$i$$$th query.ExamplesInput3 5
abacaba
aba
a
ac
1 7
1 3
2 7
2 5
4 5Output7 3 5 3 1Input4 4
abcdca
ab
ca
bcd
openolympiad
1 5
2 2
2 6
1 6Output2 0 2 3NoteIn the first example, the first query requires the entire string to count the number of substrings that are included in the set. The substrings $$$[1, 3]$$$ and $$$[4, 6]$$$ coincide with the string "aba". The substrings match with the string "a" $$$[1, 1]$$$, $$$[3, 3]$$$, $$$[5, 5]$$$, $$$[7, 7]$$$. The substring $$$[3, 4]$$$ matches the string "ac". In total, it turns out that 7 substrings of the string "abacaba" match the strings from the set.In the second query, a substring from position 1 to position 3 is taken from the source string, this is the string "aba". The string "aba" enters it 1 time, the string "a" enters it 2 times and the string "ac" does not enter it once as a substring.  In the third query, a substring from the 2nd to the 7th position is taken from the source string, this is the string "bacaba". The string "aba" is included in it 1 time, the string "a" is included 3 times and the string "ac" is included 1 time as a substring.



F. Another n-dimensional chocolate bartime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputMom bought the boy Vasya a $$$n$$$-dimensional chocolate bar, which is a $$$n$$$-dimensional cube with the length of each side equal to $$$1$$$. The chocolate is planned to be divided into slices. According to the $$$i$$$th dimension, it can be divided by hyperplanes into $$$a_i$$$ equal parts. Thus, the chocolate is divided in total into $$$a_1 \cdot a_2 \cdot a_3 \cdot \ldots \cdot a_n$$$ slices, each slice has a length of $$$i$$$-th dimension equal to $$$\frac{1}{a_i}$$$, respectively, the volume of each slice is $$$\frac{1}{a_1 a_2 \cdots a_n}$$$.Vasya and his friends want to cut a chocolate bar to get at least $$$k$$$ pieces, while Vasya wants to maximize the volume of the smallest of them. It is possible to cut the chocolate bar only at the junction of the lobules, and each incision must pass through the entire chocolate bar along some hyperplane involved in the formation of lobules. Only after making all the cuts, Vasya disassembles the chocolate into pieces.More formally, Vasya wants to choose the numbers $$$b_1, b_2, \dots, b_n$$$ ($$$1 \le b_i \le a_i$$$) — the number of parts into which Vasya will cut the chocolate bar along each dimension. The condition $$$b_1 \cdot b_2 \cdot \ldots \cdot b_n \ge k$$$ must be met to get at least $$$k$$$ pieces after all cuts. It can be noted that with optimal cutting with such parameters, the minimum piece will contain $$$\lfloor \frac{a_1}{b_1} \rfloor \dotsm \lfloor \frac{a_n}{b_n} \rfloor$$$ slices, and its volume will be equal to $$$\lfloor \frac{a_1}{b_1} \rfloor \dotsm \lfloor \frac{a_n}{b_n} \rfloor \cdot \frac{1}{a_1 a_2 \cdots a_n}$$$.Vasya wants to get the maximum possible value of the volume of the minimum piece multiplied by $$$k$$$, that is, he wants to maximize the number of $$$\lfloor \frac{a_1}{b_1} \rfloor \dotsm \lfloor \frac{a_n}{b_n} \rfloor \cdot \frac{1}{a_1 a_2 \cdots a_n} \cdot k$$$. Help him with this.InputThe first line contains two integers $$$n$$$ and $$$k$$$ $$$(1 \le n \le 100$$$, $$$1 \le k \le 10^7)$$$ — the dimension of the chocolate bar, and how many parts it needs to be divided into.The second line contains $$$n$$$ integers $$$a_1,\ a_2,\ \dots,\ a_n$$$ $$$(1 \le a_i \le 10^7)$$$ — the number of pieces on which the chocolate is placed along each of the dimensions.OutputPrint one number  — the maximum possible volume of the smallest of the obtained pieces, multiplied by $$$k$$$, with an absolute or relative error of no more than $$$10^{-9}$$$.If it is impossible to cut a chocolate bar into at least $$$k$$$ pieces under the given restrictions, output $$$0$$$.ExamplesInput1 2
5Output0.8Input2 6
5 10Output0.72Input2 7
4 4Output0.875Input2 3
4 5Output0.75Input4 444
57 179 239 2Output0.97557326850704739751Input2 5
2 2Output0NoteIn the first example, a one – dimensional chocolate bar can be divided as follows:Then the answer will be $$$\frac{2}{5} \cdot 2 = 0.8$$$In the second example, the chocolate bar can be cut as follows:Then the answer will be $$$\frac{2}{5} \cdot \frac{3}{10} \cdot 6 = 0.72$$$In the third example, the chocolate bar can be cut as follows:Then the answer will be $$$\frac{2}{4} \cdot \frac{1}{4} \cdot 7 = 0.875$$$



E. Gasoline pricestime limit per test3.5 secondsmemory limit per test1024 megabytesinputstandard inputoutputstandard outputBerland — is a huge country consisting of $$$n$$$ cities. The road network of Berland can be represented as a root tree, that is, there is only $$$n - 1$$$ road in the country, and you can get from any city to any other exactly one way, if you do not visit any city twice. For the convenience of representing the country, for each city $$$i$$$, the city $$$p_i$$$ is fixed, equal to the first city to which you need to go from the city $$$i$$$ to get to the city $$$1$$$. In other words, the city $$$p_i$$$ is equal to the ancestor of the city $$$i$$$ if the tree is hung for the city $$$1$$$.There is one gas station in each city of Berland. Gas stations have special pricing, and for each gas station there is a fixed range of prices for which they are ready to sell gasoline. A gas station in the city with the number $$$i$$$ is ready to sell gasoline at any price from $$$l_i$$$ to $$$r_i$$$ inclusive.The King of Berland — is an exemplary family man, and for $$$m$$$ years, two sons were born to him every year. The king's children have been involved in public affairs since early childhood, and at the end of each year they check the honesty of gasoline prices. From birth, the king's children, who are born in the year $$$i$$$, are responsible for checking gasoline prices on the ways from the city of $$$a_i$$$ to the city of $$$b_i$$$ and from the city of $$$c_i$$$ to the city of $$$d_i$$$, respectively.The check is as follows: both children simultaneously start their journey from the cities $$$a_i$$$ and $$$c_i$$$, respectively. The first son of the king, born in the year $$$i$$$, moves along the path from the city $$$a_i$$$ to the city $$$b_i$$$, and the second  — from the city $$$c_i$$$ to the city $$$d_i$$$. Children check that the price of gasoline in the city of $$$a_i$$$ coincides with the price of gasoline in the city of $$$c_i$$$. Next, they check that the price of gasoline in the second city on the way from $$$a_i$$$ to $$$b_i$$$ coincides with the price in the second city on the way from $$$c_i$$$ to $$$d_i$$$. Then they repeat the same thing for a couple of third cities on their paths and so on. At the end, they check that the price of gasoline in the city of $$$b_i$$$ coincides with the price of gasoline in the city of $$$d_i$$$. It is guaranteed that the length of the path from the city $$$a_i$$$ to the city $$$b_i$$$ coincides with the length of the path from the city $$$c_i$$$ to the city $$$d_i$$$.Gas stations must strictly obey the laws, and therefore all checks of gasoline prices should not reveal violations. Help Berland gas stations find out how many ways they can set gasoline prices for $$$m$$$ years. In other words, for each $$$i$$$ from $$$1$$$ to $$$m$$$, calculate how many ways you can set gasoline prices at all gas stations so that after the birth of the first $$$i$$$ pairs of the king's children, all their checks did not reveal violations, and at any gas station the price was in the acceptable price range. Since the number of such methods can be large, calculate the answer modulo $$$10^9 + 7$$$.InputThe first line contains a single integer $$$n$$$ ($$$1 \le n \le 200\,000$$$) — the number of cities in Berland.The second line contains $$$(n - 1)$$$ numbers $$$p_2,\ p_3,\ p_4,\ \ldots,\ p_n$$$ ($$$1 \le p_i \le n$$$), where $$$p_i$$$ denotes the number of the next city on the way from city $$$i$$$ to city $$$1$$$.In each of the following lines, two integers are given $$$l_i$$$ and $$$r_i$$$ ($$$1 \le l_i \le r_i < 10^9+7$$$), specifying the acceptable range of prices at the gas station number $$$i$$$.The following line contains a single integer $$$m$$$ ($$$1 \le m \le 200\,000$$$) — the number of years during which two sons were born to the king.In each of the following $$$m$$$ lines, four integers are given $$$a_i$$$, $$$b_i$$$, $$$c_i$$$ and $$$d_i$$$ ($$$1 \le a_i, b_i, c_i, d_i \le n$$$), specifying two paths on which the king's children will check gasoline prices, born in the year $$$i$$$. It is guaranteed that the length of the path between the cities $$$a_i$$$ and $$$b_i$$$ is equal to the length of the path between the cities $$$c_i$$$ and $$$d_i$$$.OutputIn $$$m$$$ lines, print one number each. The number in the $$$i$$$ line should be equal to the number of ways to set gasoline prices in all cities so that the king's children born in the years up to and including $$$i$$$ do not reveal violations in inspections. Output the numbers modulo $$$10^9 + 7$$$.ExamplesInput5
1 1 2 2
2 4
1 3
1 3
2 4
4 4
4
1 1 2 2
1 2 2 1
3 4 4 3
3 4 3 5Output18
18
4
0Input8
1 2 3 4 5 8 6
3 7
2 6
3 8
5 10
5 8
2 9
3 8
6 8
4
1 3 7 6
4 1 5 7
1 7 7 1
1 8 2 7Output720
120
120
1NoteConsider the first example.After the birth of the first two sons, the prices in the cities of $$$1$$$ and $$$2$$$ should be equal. In total, there are 2 ways to choose the same gasoline price for the cities of $$$1$$$ and $$$2$$$ so that it falls within the acceptable price range for these cities. So, there are only ways to set gasoline prices: $$$2 \cdot 3 \cdot 3 \cdot 1 = 18$$$.The second pair of sons will check the prices on the paths $$$1 - 2$$$ and $$$2 - 1$$$. This means that gasoline prices in the cities of $$$1$$$ and $$$2$$$ must match, which is already being done. Therefore, after the birth of the second pair of sons, the answer did not change in any way.The third pair of sons will check the prices on the tracks $$$3 - 1 - 2 - 4$$$ and $$$4 - 2 - 1 - 3$$$. Then the price of non-gasoline in the city of $$$3$$$ should be equal to the price in the city of $$$4$$$, and the price in the city of $$$1$$$ should be equal to the price in the city of $$$2$$$. Prices in the cities of $$$1$$$ and $$$2$$$ are already the same. For the cities of $$$3$$$ and $$$4$$$, there are 2 ways to choose the same price for gasoline so that it falls within the acceptable price range for these cities. So, there are only ways to set gasoline prices: $$$2 \cdot 2 \cdot 1 = 4$$$.  The fourth pair of sons will check the prices on the tracks $$$3 - 1 - 2 - 4$$$ and $$$3 - 1 - 2 - 5$$$. This means that the prices in the cities of $$$4$$$ and $$$5$$$ should be equal, and since the prices in the cities of $$$3$$$ and $$$4$$$ already coincide, then in the cities of $$$3$$$, $$$4$$$ and $$$5$$$ there should be the same price for gasoline. The price of gasoline in the city of $$$3$$$ should be no more than 3, and the price of gasoline in the city of $$$5$$$ should be no less than 4. So, after the birth of the fourth pair of sons, there are no ways to set gasoline prices so that all checks are carried out and prices are in the required ranges.



D. The way hometime limit per test3 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputThe famous magician Borya Budini traveled through the country $$$X$$$, which consists of $$$n$$$ cities. However, an accident happened, and he was robbed in the city number $$$1$$$. Now Budini will have a hard way home to the city number $$$n$$$.He's going to get there by plane. In total, there are $$$m$$$ flights in the country, $$$i$$$-th flies from city $$$a_i$$$ to city $$$b_i$$$ and costs $$$s_i$$$ coins. Note that the $$$i$$$-th flight is one-way, so it can't be used to get from city $$$b_i$$$ to city $$$a_i$$$. To use it, Borya must be in the city $$$a_i$$$ and have at least $$$s_i$$$ coins (which he will spend on the flight).After the robbery, he has only $$$p$$$ coins left, but he does not despair! Being in the city $$$i$$$, he can organize performances every day, each performance will bring him $$$w_i$$$ coins.Help the magician find out if he will be able to get home, and what is the minimum number of performances he will have to organize.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 80$$$) – the number of test cases. The description of test cases follows.The first line contains three integers $$$n$$$, $$$m$$$ and $$$p$$$ ($$$2 \le n \le 800$$$, $$$1 \le m \le 3000$$$, $$$0 \le p \le 10^9$$$) — the number of cities, the number of flights and the initial amount of coins.The second line contains $$$n$$$ integers $$$w_1, w_2, \ldots, w_n$$$ $$$(1 \le w_i \le 10^9)$$$ — profit from representations.The following $$$m$$$ lines each contain three integers $$$a_i$$$, $$$b_i$$$ and $$$s_i$$$ ($$$1 \le a_i, b_i \le n$$$, $$$1 \le s_i \le 10^9$$$) — the starting and ending city, and the cost of $$$i$$$-th flight.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$800$$$ and the sum of $$$m$$$ over all test cases does not exceed $$$10000$$$.OutputFor each test case print a single integer — the minimum number of performances Borya will have to organize to get home, or $$$-1$$$ if it is impossible to do this.ExampleInput44 4 27 4 3 11 2 213 2 61 3 82 4 114 4 101 2 10 11 2 202 4 301 3 253 4 894 4 75 1 6 21 2 52 3 103 4 503 4 704 1 21 1 1 11 3 2Output4
24
10
-1NoteIn the first example, it is optimal for Borya to make $$$4$$$ performances in the first city, having as a result $$$2 + 7 \cdot 4 = 30$$$ coins, and then walk along the route $$$1-3-2-4$$$, spending $$$6+8+11=25$$$ coins.  In the second example, it is optimal for Borya to make $$$15$$$ performances in the first city, fly to $$$3$$$ city, make $$$9$$$ performances there, and then go to $$$4$$$ city.



C. Music Festivaltime limit per test1 secondmemory limit per test512 megabytesinputstandard inputoutputstandard outputThe boy Vitya loves to listen to music very much. He knows that $$$n$$$ albums are due to be released this Friday, $$$i$$$-th of which contains $$$k_i$$$ tracks. Of course, Vitya has already listened to all the tracks, and knows that in the $$$i$$$-th album, the coolness of the $$$j$$$-th track is equal to $$$a_{i,j}$$$.Vitya has a friend Masha, whom he really wants to invite to the festival, where his favorite bands perform. However, in order for a friend to agree, she must first evaluate the released novelties. Vitya knows that if Masha listens to a track that was cooler than all the previous ones, she will get 1 unit of impression. Unfortunately, albums can only be listened to in their entirety, without changing the songs in them in places.Help Vitya find such an order of albums so that Masha's impression turns out to be as much as possible, and she definitely went to the festival with him.InputEach test consists of multiple test cases. The first line contains a single integer t ($$$1 \le t \le 200\,000$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \le n \le 200\,000$$$) — number of albums.The album descriptions follow. Each album description consists of two lines:The first line contains a single integer $$$k_i$$$ ($$$1 \le k_i \le 200\,000$$$) — the number of tracks in the $$$i$$$th album.The following line contains $$$k_i$$$ integers $$$a_{i, 1},\ a_{i, 2},\ a_{i, 3},\ \ldots,\ a_{i, k_i}$$$ ($$$1 \le a_{i,j} \le 200\,000$$$) — the coolness of the tracks in the $$$i$$$ album.Denote for $$$\sum k_i$$$ the sum of all $$$k_i$$$. It is guaranteed that $$$\sum k_i \le 200\,000$$$.OutputFor each test case print the singular number  — the maximum impression that Masha can get.ExampleInput2454 9 4 6 81728 611423 421 822 827 9Output4
4NoteIn the first test example, the optimal order is listening to the 4th, 2nd, 3rd and 1st albums.In this case, Masha will listen to the tracks in the following order:1;7;8, 6; 4,9, 4, 6, 8 and will receive 4 units of impression.In the second test example, you must first listen to the 1st, then the 4th, and in any order the 2nd and 3rd.   In this case, Masha will get the maximum impression, and for every song in the 1st and 4th albums and nothing for the 2nd and 3rd.



B. Buying giftstime limit per test3 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputLittle Sasha has two friends, whom he wants to please with gifts on the Eighth of March. To do this, he went to the largest shopping center in the city.There are $$$n$$$ departments in the mall, each of which has exactly two stores. For convenience, we number the departments with integers from $$$1$$$ to $$$n$$$. It is known that gifts in the first store of the $$$i$$$ department cost $$$a_i$$$ rubles, and in the second store of the $$$i$$$ department — $$$b_i$$$ rubles.Entering the mall, Sasha will visit each of the $$$n$$$ departments of the mall, and in each department, he will enter exactly one store. When Sasha gets into the $$$i$$$-th department, he will perform exactly one of two actions:Buy a gift for the first friend, spending $$$a_i$$$ rubles on it.Buy a gift for the second friend, spending $$$b_i$$$ rubles on it.Sasha is going to buy at least one gift for each friend. Moreover, he wants to pick up gifts in such a way that the price difference of the most expensive gifts bought for friends is as small as possible so that no one is offended.More formally: let $$$m_1$$$  be the maximum price of a gift bought to the first friend, and $$$m_2$$$  be the maximum price of a gift bought to the second friend. Sasha wants to choose gifts in such a way as to minimize the value of $$$\lvert m_1 - m_2 \rvert$$$.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 1\,000$$$). The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$2 \le n \le 500\,000$$$) — the number of departments in the mall.Each of the following $$$n$$$ lines of each test case contains two integers $$$a_i$$$ and $$$b_i$$$ ($$$0 \le a_i, b_i \le 10^9$$$) — the prices of gifts in the first and second store of the $$$i$$$ department, respectively.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$500\,000$$$.OutputPrint one integer — the minimum price difference of the most expensive gifts bought to friends.ExampleInput221 22 151 52 73 34 102 5Output0
1NoteIn the first test case, Sasha has two possible options: buy a gift for the first friend in the first department, and the second friend  — in the second department, or vice versa. In the first case, $$$m_1 = m_2 = 1$$$, and in the second case — $$$m_1 = m_2 = 2$$$. In both cases, the answer is $$$0$$$.  In the second test case, you can buy gifts for the first friend in the $$$2$$$, $$$4$$$ and $$$5$$$ departments, and for the second friend  — in the $$$1$$$ and $$$3$$$ departments.So $$$m_1 = \max(2, 4, 2) = 4$$$, $$$m_2 = \max(5, 3) = 5$$$. The answer is $$$\lvert 4 - 5 \rvert = 1$$$.



A. The Very Beautiful Blankettime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputKirill wants to weave thevery beautifulblanket consisting of $$$n \times m$$$ of the same size square patches of some colors. He matched some non-negative integer to each color. Thus, in our problem, the blanket can be considered a $$$B$$$ matrix of size $$$n \times m$$$ consisting of non-negative integers.Kirill considers that the blanket isvery beautiful, if for each submatrix $$$A$$$ of size $$$4 \times 4$$$ of the matrix $$$B$$$ is true:$$$A_{11} \oplus A_{12} \oplus A_{21} \oplus A_{22} = A_{33} \oplus A_{34} \oplus A_{43} \oplus A_{44},$$$$$$A_{13} \oplus A_{14} \oplus A_{23} \oplus A_{24} = A_{31} \oplus A_{32} \oplus A_{41} \oplus A_{42},$$$where $$$\oplus$$$ meansbitwise exclusive ORKirill asks you to help her weave avery beautifulblanket, and as colorful as possible!He gives you two integers $$$n$$$ and $$$m$$$.Your task is to generate a matrix $$$B$$$ of size $$$n \times m$$$, which corresponds to avery beautifulblanket and in which the number of different numbers maximized.InputThe first line of input data contains one integer number $$$t$$$ ($$$1 \le t \le 1000$$$) — the number of test cases.The single line of each test case contains two integers $$$n$$$ and $$$m$$$ $$$(4 \le n, \, m \le 200)$$$ — the size of matrix $$$B$$$.It is guaranteed that the sum of $$$n \cdot m$$$ does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, in first line output one integer $$$cnt$$$ $$$(1 \le cnt \le n \cdot m)$$$ — the maximum number of different numbers in the matrix.Then output the matrix $$$B$$$ $$$(0 \le B_{ij} < 2^{63})$$$ of size $$$n \times m$$$. If there are several correct matrices, it is allowed to output any one.It can be shown that if there exists a matrix with an optimal number of distinct numbers, then there exists among suitable matrices such a $$$B$$$ that $$$(0 \le B_{ij} < 2^{63})$$$.ExampleInput45 54 44 66 6Output25
9740 1549 9744 1553 9748
1550 1551 1554 1555 1558
10252 2061 10256 2065 10260
2062 2063 2066 2067 2070
10764 2573 10768 2577 10772
16
3108 3109 3112 3113
3110 3111 3114 3115
3620 3621 3624 3625
3622 3623 3626 3627
24
548 549 552 553 556 557
550 551 554 555 558 559
1060 1061 1064 1065 1068 1069
1062 1063 1066 1067 1070 1071
36
25800 25801 25804 25805 25808 25809
25802 4294993099 25806 4294993103 25810 4294993107
26312 26313 26316 26317 26320 26321
26314 4294993611 26318 4294993615 26322 4294993619
26824 26825 26828 26829 26832 26833
26826 4294994123 26830 4294994127 26834 4294994131NoteIn the first test case, there is only 4 submatrix of size $$$4 \times 4$$$. Consider a submatrix whose upper-left corner coincides with the upper-left corner of the matrix $$$B$$$:$$$ \left[ {\begin{array}{cccc} 9740 & 1549 & 9744 & 1553 \\ 1550 & 1551 & 1554 & 1555 \\ 10252 & 2061 & 10256 & 2065 \\ 2062 & 2063 & 2066 & 2067 \\ \end{array} } \right] $$$$$$9740 \oplus 1549 \oplus 1550 \oplus 1551$$$ $$$=$$$ $$$10256 \oplus 2065 \oplus 2066 \oplus 2067$$$ $$$=$$$ $$$8192$$$;$$$10252 \oplus 2061 \oplus 2062 \oplus 2063$$$ $$$=$$$ $$$9744 \oplus 1553 \oplus 1554 \oplus 1555$$$ $$$=$$$ $$$8192$$$.So, chosen submatrix fits the condition. Similarly, you can make sure that the other three submatrices also fit the condition.



G. Symmetreetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputKid was gifted a tree of $$$n$$$ vertices with the root in the vertex $$$1$$$. Since he really likesymmetricalobjects, Kid wants to find out if this tree issymmetrical.For example, the trees in the picture above aresymmetrical.And the trees in this picture are notsymmetrical.Formally, a tree issymmetricalif there exists an order of children such that:The subtree of the leftmost child of the root is a mirror image of the subtree of the rightmost child;the subtree of the second-left child of the root is a mirror image of the subtree of the second-right child of the root;...if the number of children of the root is odd, then the subtree of the middle child should besymmetrical.InputThe first line of input data contains single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases in the test.The first line of each case contains an integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$) — the number of vertices in the tree.The following $$$n-1$$$ lines contain two integers each $$$u$$$ and $$$v$$$ ($$$1 \le u, v \le n$$$, $$$u \neq v$$$) — indices of vertices connected by an edge.It is guaranteed that the sum of $$$n$$$ over all cases does not exceed $$$2 \cdot 10^5$$$.OutputOutput $$$t$$$ strings, each of which is the answer to the corresponding test case. As an answer, output "YES" if this tree issymmetrical, and "NO" otherwise.You can output the answer in any case (for example, the strings "yEs", "yes", "Yes" and "YES" will be recognized as a positive answer).ExampleInput661 51 61 22 32 471 51 33 61 44 74 291 22 42 33 51 77 67 88 9102 99 102 36 74 31 23 82 56 5103 28 109 74 28 22 14 56 55 71OutputYES
NO
YES
NO
NO
YES



F. Dasha and Nightmarestime limit per test4 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputDasha, an excellent student, is studying at the best mathematical lyceum in the country. Recently, a mysterious stranger brought $$$n$$$ words consisting of small latin letters $$$s_1, s_2, \ldots, s_n$$$ to the lyceum. Since that day, Dasha has been tormented bynightmares.Consider some pair of integers $$$\langle i, j \rangle$$$ ($$$1 \le i \le j \le n$$$).A nightmareis a string for which it is true:It is obtained by concatenation $$$s_{i}s_{j}$$$;Its length isodd;The number of different letters in it isexactly$$$25$$$;The number of occurrences of each letter that is in the word isodd.For example, if $$$s_i=$$$ "abcdefg" and $$$s_j=$$$ "ijklmnopqrstuvwxyz", the pair $$$\langle i, j \rangle$$$ creates anightmare.Dasha will stop havingnightmaresif she counts their number. There are too manynightmares, so Dasha needs your help. Count the number of differentnightmares.Nightmaresare called different if the corresponding pairs $$$\langle i, j \rangle$$$ are different. The pairs $$$\langle i_1, j_1 \rangle$$$ and $$$\langle i_2, j_2 \rangle$$$ are called different if $$$i_1 \neq i_2$$$or$$$j_1 \neq j_2$$$.InputThe first line contains a single integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$) — the number of words.The following $$$n$$$ lines contain the words $$$s_1, s_2, \ldots, s_n$$$, consisting of small latin letters.It is guaranteed that the total length of words does not exceed $$$5 \cdot 10^6$$$.OutputPrint a single integer — the number of differentnightmares.ExampleInput10ftlabcdefghijklmnopqrstuvwxyabcdeffghijkllmnopqrsttuvwxyffftlaabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyythedevidbcdefghhiiiijklmnopqrsuwxyzgorillasilverbackabcdefgijklmnopqrstuvwxyzOutput5NoteIn the first test,nightmaresare created by pairs $$$\langle 1, 3 \rangle$$$, $$$\langle 2, 5 \rangle$$$, $$$\langle 3, 4 \rangle$$$, $$$\langle 6, 7 \rangle$$$, $$$\langle 9, 10 \rangle$$$.



E2. Unforgivable Curse (hard version)time limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is a complex version of the problem. This version has no additional restrictions on the number $$$k$$$.The chief wizard of the Wizengamot once caught the evil wizard Drahyrt, but the evil wizard has returned and wants revenge on the chief wizard. So he stolespell$$$s$$$ from his student Harry.Thespell— is a $$$n$$$-length string of lowercase Latin letters.Drahyrt wants to replacespellwith an unforgivable curse — string $$$t$$$.Dragirt, using ancient magic, can swap letters at a distance $$$k$$$ or $$$k+1$$$ inspellas many times as he wants. In other words, Drahyrt can change letters in positions $$$i$$$ and $$$j$$$ inspell$$$s$$$ if $$$|i-j|=k$$$ or $$$|i-j|=k+1$$$.For example, if $$$k = 3, s = $$$ "talant" and $$$t = $$$ "atltna", Drahyrt can act as follows:swap the letters at positions $$$1$$$ and $$$4$$$ to getspell"aaltnt".swap the letters at positions $$$2$$$ and $$$6$$$ to getspell"atltna".You are givenspells$$$s$$$ and $$$t$$$. Can Drahyrt changespell$$$s$$$ to $$$t$$$?InputThe first line of input gives a single integer $$$T$$$ ($$$1 \le T \le 10^4$$$) — the number of test cases in the test.Descriptions of the test cases are follow.The first line contains two integers $$$n, k$$$ ($$$1 \le n \le 2 \cdot 10^5$$$, $$$1 \le k \le 2 \cdot 10^5$$$) — the lengthspellsand the number $$$k$$$ such that Drahyrt can change letters in a spell at a distance $$$k$$$ or $$$k+1$$$.The second line givesspell$$$s$$$ — a string of length $$$n$$$ consisting of lowercase Latin letters.The third line givesspell$$$t$$$ — a string of length $$$n$$$ consisting of lowercase Latin letters.It is guaranteed that the sum of $$$n$$$ values over all test cases does not exceed $$$2 \cdot 10^5$$$. Note that there is no limit on the sum of $$$k$$$ values over all test cases.OutputFor each test case, output on a separate line "YES" if Drahyrt can changespell$$$s$$$ to $$$t$$$ and "NO" otherwise.You can output the answer in any case (for example, lines "yEs", "yes", "Yes" and "YES" will be recognized as positive answer).ExampleInput76 3talantatltna7 1abacabaaaaabbc12 6abracadabraaavadakedavra5 3acciocicao5 4lumosmolus4 3uwjttwju4 3kvpxvxpkOutputYES
YES
NO
YES
NO
YES
NONoteThe first case is explained in the condition.In the second case, we can swap adjacent letters, so we can sort the string using bubble sorting, for example.In the third case, we can show that from the string $$$s$$$ we cannot get the string $$$t$$$ by swapping letters at a distance of $$$6$$$ or $$$7$$$.In the fourth case, for example, the following sequence of transformations is appropriate:"accio" $$$\rightarrow$$$ "aocic" $$$\rightarrow$$$ "cocia" $$$\rightarrow$$$ "iocca" $$$\rightarrow$$$ "aocci" $$$\rightarrow$$$ "aicco" $$$\rightarrow$$$ "cicao"In the fifth case, we can show that it is impossible to get the string $$$s$$$ from the string $$$t$$$.In the sixth example, it is enough to swap the two outermost letters.



E1. Unforgivable Curse (easy version)time limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an easy version of the problem. In this version, $$$k$$$ is always $$$3$$$.The chief wizard of the Wizengamot once caught the evil wizard Drahyrt, but the evil wizard has returned and wants revenge on the chief wizard. So he stolespell$$$s$$$ from his student Harry.Thespell— is a $$$n$$$-length string of lowercase Latin letters.Drahyrt wants to replacespellwith an unforgivable curse — string $$$t$$$.Drahyrt, using ancient magic, can swap letters at a distance $$$k$$$ or $$$k+1$$$ inspellas many times as he wants.In this version of the problem, you can swap letters at a distance of $$$3$$$ or $$$4$$$.In other words, Drahyrt can change letters in positions $$$i$$$ and $$$j$$$ inspell$$$s$$$ if $$$|i-j|=3$$$ or $$$|i-j|=4$$$.For example, if $$$s = $$$ "talant" and $$$t = $$$ "atltna", Drahyrt can act as follows:swap the letters at positions $$$1$$$ and $$$4$$$ to getspell"aaltnt".swap the letters at positions $$$2$$$ and $$$6$$$ to getspell"atltna".You are givenspells$$$s$$$ and $$$t$$$. Can Drahyrt changespell$$$s$$$ to $$$t$$$?InputThe first line of input gives a single integer $$$T$$$ ($$$1 \le T \le 10^4$$$) — the number of test cases in the test.Descriptions of the test cases are follow.The first line contains two integers $$$n, k$$$ ($$$1 \le n \le 2 \cdot 10^5$$$, $$$k = 3$$$) — the lengthspellsand the number $$$k$$$ such that Drahyrt can change letters in a spell at a distance $$$k$$$ or $$$k+1$$$.The second line givesspell$$$s$$$ — a string of length $$$n$$$ consisting of lowercase Latin letters.The third line givesspell$$$t$$$ — a string of length $$$n$$$ consisting of lowercase Latin letters.It is guaranteed that the sum of $$$n$$$ values over all test cases does not exceed $$$2 \cdot 10^5$$$. Note that there is no limit on the sum of $$$k$$$ values over all test cases.OutputFor each test case, output on a separate line "YES" if Drahyrt can changespell$$$s$$$ to $$$t$$$ and "NO" otherwise.You can output the answer in any case (for example, lines "yEs", "yes", "Yes" and "YES" will be recognized as positive answer).ExampleInput76 3talantatltna7 3abacabaaaaabbc12 3abracadabraaavadakedavra5 3acciocicao5 3lumosmolus4 3uwjttwju4 3kvpxvxpkOutputYES
YES
NO
YES
NO
YES
NONoteThe first example is explained in the condition.In the second example we can proceed as follows:Swap the letters at positions $$$2$$$ and $$$5$$$ (distance $$$3$$$), then we get the spell "aaacbba".Swap the letters at positions $$$4$$$ and $$$7$$$ (distance $$$3$$$), then you get the spell "aaaabbc".In the third example, we can show that it is impossible to get the string $$$t$$$ from the string $$$s$$$ by swapping the letters at a distance of $$$3$$$ or $$$4$$$.In the fourth example, for example, the following sequence of transformations is appropriate:"accio" $$$\rightarrow$$$ "aocic" $$$\rightarrow$$$ "cocia" $$$\rightarrow$$$ "iocca" $$$\rightarrow$$$ "aocci" $$$\rightarrow$$$ "aicco" $$$\rightarrow$$$ "cicao"In the fifth example, you can show that it is impossible to get the string $$$s$$$ from the string $$$t$$$.In the sixth example, it is enough to swap the two outermost letters.



D. Remove Two Letterstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputDmitry has a string $$$s$$$, consisting of lowercase Latin letters.Dmitry decided to remove twoconsecutivecharacters from the string $$$s$$$ and you are wondering how many different strings can be obtained after such an operation.For example, Dmitry has a string "aaabcc". You can get the following different strings: "abcc"(by deleting the first two or second and third characters), "aacc"(by deleting the third and fourth characters),"aaac"(by deleting the fourth and the fifth character) and "aaab" (by deleting the last two).InputThe first line of input data contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — number of test cases.The descriptions of the test cases follow.The first line of the description of each test case contains an integer $$$n$$$ ($$$3 \le n \le 2 \cdot 10^5$$$).The second line of the description of each test case contains a string $$$s$$$ of length $$$n$$$ consisting of lowercase Latin letters.It is guaranteed that the sum of $$$n$$$ for all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case print one integer — the number of distinct strings that can be obtained by removing two consecutive letters.ExampleInput76aaabcc10aaaaaaaaaa6abcdef7abacaba6cccfff4abba5ababaOutput4
1
5
3
3
3
1NoteThe first example is explained in the statement.In the third example, the following strings are obtained: "cdef", "adef", "abef", "abcf", "abcd".In the seventh example, any deletion will result in the string "aba".



C2. Powering the Hero (hard version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is a hard version of the problem. It differs from the easy one only by constraints on $$$n$$$ and $$$t$$$.There is a deck of $$$n$$$ cards, each of which is characterized by its power. There are two types of cards:a hero card, the power of such a card is always equal to $$$0$$$;a bonus card, the power of such a card is always positive.You can do the following with the deck:take a card from the top of the deck;if this card is a bonus card, you can put iton topof your bonus deck or discard;if this card is a hero card, then the power ofthe topcard from your bonus deck is added to his power (if it is not empty), after that the hero is added to your army, and the used bonus discards.Your task is to use such actions to gather an army with the maximum possible total power.InputThe first line of input data contains single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases in the test.The first line of each test case contains one integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$) — the number of cards in the deck.The second line of each test case contains $$$n$$$ integers $$$s_1, s_2, \dots, s_n$$$ ($$$0 \le s_i \le 10^9$$$) — card powers in top-down order.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.OutputOutput $$$t$$$ numbers, each of which is the answer to the corresponding test case — the maximum possible total power of the army that can be achieved.ExampleInput553 3 3 0 060 3 3 0 0 371 2 3 0 4 5 071 2 5 0 4 3 053 1 0 0 4Output6
6
8
9
4NoteIn the first sample, you can take bonuses $$$1$$$ and $$$2$$$. Both hero cards will receive $$$3$$$ power. If you take all the bonuses, one of them will remain unused.In the second sample, the hero's card on top of the deck cannot be powered up, and the rest can be powered up with $$$2$$$ and $$$3$$$ bonuses and get $$$6$$$ total power.In the fourth sample, you can take bonuses $$$1$$$, $$$2$$$, $$$3$$$, $$$5$$$ and skip the bonus $$$6$$$, then the hero $$$4$$$ will be enhanced with a bonus $$$3$$$ by $$$5$$$, and the hero $$$7$$$ with a bonus $$$5$$$ by $$$4$$$. $$$4+5=9$$$.



C1. Powering the Hero (easy version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an easy version of the problem. It differs from the hard one only by constraints on $$$n$$$ and $$$t$$$.There is a deck of $$$n$$$ cards, each of which is characterized by its power. There are two types of cards:a hero card, the power of such a card is always equal to $$$0$$$;a bonus card, the power of such a card is always positive.You can do the following with the deck:take a card from the top of the deck;if this card is a bonus card, you can put iton topof your bonus deck or discard;if this card is a hero card, then the power ofthe topcard from your bonus deck is added to his power (if it is not empty), after that the hero is added to your army, and the used bonus discards.Your task is to use such actions to gather an army with the maximum possible total power.InputThe first line of input data contains single integer $$$t$$$ ($$$1 \le t \le 1000$$$) — the number of test cases in the test.The first line of each test case contains one integer $$$n$$$ ($$$1 \le n \le 5000$$$) — the number of cards in the deck.The second line of each test case contains $$$n$$$ integers $$$s_1, s_2, \dots, s_n$$$ ($$$0 \le s_i \le 10^9$$$) — card powers in top-down order.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5000$$$.OutputOutput $$$t$$$ numbers, each of which is the answer to the corresponding test case — the maximum possible total power of the army that can be achieved.ExampleInput553 3 3 0 060 3 3 0 0 371 2 3 0 4 5 071 2 5 0 4 3 053 1 0 0 4Output6
6
8
9
4NoteIn the first sample, you can take bonuses $$$1$$$ and $$$2$$$. Both hero cards will receive $$$3$$$ power. If you take all the bonuses, one of them will remain unused.In the second sample, the hero's card on top of the deck cannot be powered up, and the rest can be powered up with $$$2$$$ and $$$3$$$ bonuses and get $$$6$$$ total power.In the fourth sample, you can take bonuses $$$1$$$, $$$2$$$, $$$3$$$, $$$5$$$ and skip the bonus $$$6$$$, then the hero $$$4$$$ will be enhanced with a bonus $$$3$$$ by $$$5$$$, and the hero $$$7$$$ with a bonus $$$5$$$ by $$$4$$$. $$$4+5=9$$$.



B. Count the Number of Pairstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputKristina has a string $$$s$$$ of length $$$n$$$, consisting only of lowercase and uppercase Latin letters. For each pair of lowercase letter and its matching uppercase letter, Kristina can get $$$1$$$ burl. However, pairs of characters cannot overlap, so each character can only be in one pair.For example, if she has the string $$$s$$$ = "aAaaBACacbE", she can get a burl for the following character pairs:$$$s_1$$$ = "a" and $$$s_2$$$ = "A"$$$s_4$$$ = "a" and $$$s_6$$$ = "A"$$$s_5$$$ = "B" and $$$s_{10}$$$ = "b"$$$s_7$$$= "C" and $$$s_9$$$ = "c"Kristina wants to get more burles for her string, so she is going to perform no more than $$$k$$$ operations on it. In one operation, she can:either select the lowercase character $$$s_i$$$ ($$$1 \le i \le n$$$) and make it uppercase.or select uppercase character $$$s_i$$$ ($$$1 \le i \le n$$$) and make it lowercase.For example, when $$$k$$$ = 2 and $$$s$$$ = "aAaaBACacbE" it can perform one operation: choose $$$s_3$$$ = "a" and make it uppercase. Then she will get another pair of $$$s_3$$$ = "A" and $$$s_8$$$ = "a"Findmaximumnumber of burles Kristina can get for her string.InputThe first line of input data contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The description of the test cases follows.The first line of each test case contains two integers $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$) and $$$k$$$ ($$$0 \le k \le n$$$) — the number of characters in the string and the maximum number of operations that can be performed on it.The second line of each test case contains a string $$$s$$$ of length $$$n$$$, consisting only of lowercase and uppercase Latin letters.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^5$$$.OutputFor each test case, print exactly one integer on a separate line: the maximum number of burles that Kristina can get for her string $$$s$$$.ExampleInput511 2aAaaBACacbE2 2ab4 1aaBB6 0abBAcC5 3cbccbOutput5
0
1
3
2NoteThe first test case is explained in the problem statement.In the second test case, it is not possible to get any pair by performing any number of operations.



A. Is It a Cat?time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou were walking down the street and heard a sound. The sound was described by the string $$$s$$$ consisting of lowercase and uppercase Latin characters. Now you want to find out if the sound was a cat meowing.For the sound to be a meowing, the string can only contain the letters 'm', 'e', 'o' and 'w', in either uppercase or lowercase. Also:string must start with non-empty sequence consisting only of characters 'm' or 'M'it must be immediately followed by non-empty sequence consisting only of characters 'e' or 'E'it must be immediately followed by non-empty sequence consisting only of characters 'o' or 'O'it must be immediately followed by non-empty sequence consisting only of characters 'w' or 'W', this sequence ends the string, after it immediately comes the string endFor example, strings "meow", "mmmEeOWww", "MeOooOw" describe a meowing, but strings "Mweo", "MeO", "moew", "MmEW", "meowmeow" do not.Determine whether the sound you heard was a cat meowing or something else.InputThe first line of input data contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The description of the test cases follows.The first line of each test case contains an integer $$$n$$$ ($$$1 \le n \le 50$$$) — the length of the string describing the sound.The second line of each test case contains a string $$$s$$$ of $$$n$$$ characters. The string describes the sound you heard and consists only of lowercase and uppercase Latin letters.OutputFor each test case, output on a separate line:YESif the sound was a cat meowing;NOotherwise.You can outputYESandNOin any case (for example, stringsyEs,yes,YesandYESwill be recognized as positive response).ExampleInput74meOw14mMmeoOoWWWwwwW3mew7MmeEeUw4MEOW6MmyaVW5meowAOutputYES
YES
NO
NO
YES
NO
NONoteIn the first test case, the string consists of a sequence of characters 'm', 'e', 'O', 'w', which satisfies the definition of meowing.In the second test case, the string consists of a sequence of $$$3$$$ characters 'm' and 'M', one 'e', a sequence of $$$3$$$ characters 'o' and 'O' and a sequence of $$$7$$$ characters 'w' and 'W', which satisfies the definition of meowing.In the third test case, the string does not describe a meowing because it lacks a sequence of 'o' or 'O' characters between 'e' and 'w'.In the fourth test case, the string contains the character 'U', so it does not describe a meowing.



H. Tree Cuttingtime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou are given a tree with $$$n$$$ vertices.A hero $$$k$$$ times do the following operation:Choose some edge.Remove it.Take one of the two remaining parts and delete it.Write the number of vertices in the remaining part.You are given an initial tree and the a sequence of written numbers. Find the number of ways to make operations such that the written numbers are equal to the given numbers. Due to the answer can be big, find it by modulo $$$998\,244\,353$$$. Two ways are considered different, if on some operation edge or remaining part are selected differently.InputThe first line contains a single integer $$$n$$$ ($$$2 \leq n \leq 5000$$$) — the number of vertices.Each of the next $$$n-1$$$ lines contains two integers $$$s$$$, $$$f$$$ ($$$1 \leq s, f \leq n$$$, $$$s \neq f$$$) — description of edge $$$(s, f)$$$.Next line contains a single integer $$$k$$$ ($$$1 \leq k \leq \min{(6, n - 1)}$$$) — the number of operations.Next line contains $$$k$$$ integers $$$s_1, s_2, \ldots, s_k$$$ ($$$n > s_1 > s_2 > \ldots > s_k \geq 1$$$) — written numbers.OutputPrint a single integer — the answer to the problem by modulo $$$998\,244\,353$$$.ExamplesInput3
1 2
2 3
2
2 1Output4Input7
2 1
3 2
4 1
5 3
6 4
7 4
2
4 2Output2Input7
1 2
1 3
1 4
2 5
3 6
4 7
1
2Output3Input7
1 2
1 3
1 4
2 5
3 6
4 7
4
6 5 2 1Output24Input8
1 2
2 3
3 4
3 5
3 6
3 7
3 8
2
7 4Output0NoteIn the first test there are four possible ways to make operations:Remove the edge $$$(1, 2)$$$ and delete vertex $$$1$$$. Remove the edge $$$(2, 3)$$$ and delete vertex $$$2$$$.Remove the edge $$$(1, 2)$$$ and delete vertex $$$1$$$. Remove the edge $$$(3, 2)$$$ and delete vertex $$$3$$$.Remove the edge $$$(3, 2)$$$ and delete vertex $$$3$$$. Remove the edge $$$(1, 2)$$$ and delete vertex $$$1$$$.Remove the edge $$$(3, 2)$$$ and delete vertex $$$3$$$. Remove the edge $$$(2, 1)$$$ and delete vertex $$$2$$$.In the second test there are two possible ways to make operations:Remove the edge $$$(4, 1)$$$ and delete the part with vertex $$$4$$$. Remove the edge $$$(2, 3)$$$ and delete the part with vertex $$$2$$$.Remove the edge $$$(4, 1)$$$ and delete the part with vertex $$$4$$$. Remove the edge $$$(3, 2)$$$ and delete the part with vertex $$$3$$$.



G. Count Votingtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere are $$$n$$$ people that will participate in voting. Each person has exactly one vote.$$$i$$$-th person has a team $$$t_i$$$ ($$$1 \leq t_i \leq n$$$) where $$$t_i = t_j$$$ means $$$i$$$, $$$j$$$ are in the same team. By the rules each person should vote for the person from the different team. Note that it automatically means that each person can't vote for himself.Each person knows the number of votes $$$c_i$$$ he wants to get. How many possible votings exists, such that each person will get the desired number of votes? Due to this number can be big, find it by modulo $$$998\,244\,353$$$.InputThe first line contains a single integer $$$n$$$ ($$$1 \leq n \leq 200$$$) — the number of people.The second line contains $$$n$$$ integers $$$c_1, c_2, \ldots, c_n$$$ ($$$0 \leq c_i \leq n$$$) — desired number of votes. It is guaranteed, that $$$\sum\limits_{i=1}^{n} c_i = n$$$.The third line contains $$$n$$$ integers $$$t_1, t_2, \ldots, t_n$$$ ($$$1 \leq t_i \leq n$$$) — team numbers.OutputPrint a single integer — the number of possible votings by modulo $$$998\,244\,353$$$.ExamplesInput3
1 1 1
1 2 3Output2Input5
2 0 1 0 2
1 2 3 4 5Output10Input5
1 2 2 0 0
3 5 4 3 4Output5NoteIn the first test there are two possible votings: $$$(2, 3, 1)$$$, $$$(3, 1, 2)$$$.In the third test there are five possible votings: $$$(3, 3, 2, 2, 1)$$$, $$$(2, 3, 2, 3, 1)$$$, $$$(3, 3, 1, 2, 2)$$$, $$$(3, 1, 2, 3, 2)$$$, $$$(2, 3, 1, 3, 2)$$$.



F. Halve or Subtracttime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou have an array of positive integers $$$a_1, a_2, \ldots, a_n$$$, of length $$$n$$$. You are also given a positive integer $$$b$$$.You are allowed to perform the following operations (possibly several) times in any order:Choose some $$$1 \le i \le n$$$, and replace $$$a_i$$$ with $$$\lceil \frac{a_i}{2} \rceil$$$. Here, $$$\lceil x \rceil$$$ denotes the smallest integer not less than $$$x$$$.Choose some $$$1 \le i \le n$$$, and replace $$$a_i$$$ with $$$\max(a_i - b, 0)$$$.However, you must also follow these rules:You can perform at most $$$k_1$$$ operations of type 1 in total.You can perform at most $$$k_2$$$ operations of type 2 in total.For all $$$1 \le i \le n$$$, you can perform at most $$$1$$$ operation of type 1 on element $$$a_i$$$.For all $$$1 \le i \le n$$$, you can perform at most $$$1$$$ operation of type 2 on element $$$a_i$$$.Thecostof an array is the sum of its elements. Find the minimum cost of $$$a$$$ you can achieve by performing these operations.InputInput consists of multiple test cases. The first line contains a single integer $$$t$$$, the number of test cases ($$$1 \le t \le 5000$$$).The first line of each test case contains $$$n$$$, $$$b$$$, $$$k_1$$$, and $$$k_2$$$ ($$$1 \le n \le 5000$$$, $$$1 \le b \le 10^9$$$, $$$0 \le k_1, k_2 \le n$$$).The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ describing the array $$$a$$$ ($$$1 \le a_i \le 10^9$$$).It is guaranteed the sum of $$$n$$$ over all test cases does not exceed $$$5000$$$.OutputFor each test case, print the minimum cost of $$$a$$$ you can achieve by performing the operations.ExampleInput73 2 1 19 3 52 1 2 01000000000 15 3 1 12 8 3 19 36 9 4 21 2 3 4 5 63 10 3 31 2 35 1 0 0999999999 999999999 999999999 999999999 9999999995 5 4 35 9 10 7 4Output11
500000001
23
6
0
4999999995
6NoteIn the first test case, you can do the following:Perform operation 2 on element $$$a_3$$$. It changes from $$$5$$$ to $$$3$$$.Perform operation 1 on element $$$a_1$$$. It changes from $$$9$$$ to $$$5$$$.After these operations, the array is $$$a = [5, 3, 3]$$$ has a cost $$$5 + 3 + 3 = 11$$$. We can show that this is the minimum achievable cost.In the second test case, note that we are not allowed to perform operation 1 more than once on $$$a_1$$$. So it is optimal to apply operation 1 once to each $$$a_1$$$ and $$$a_2$$$. Alternatively we could apply operation 1 only once to $$$a_1$$$, since it has no effect on $$$a_2$$$.In the third test case, here is one way to achieve a cost of $$$23$$$:Apply operation 1 to $$$a_4$$$. It changes from $$$19$$$ to $$$10$$$.Apply operation 2 to $$$a_4$$$. It changes from $$$10$$$ to $$$7$$$.After these operations, $$$a = [2, 8, 3, 7, 3]$$$. The cost of $$$a$$$ is $$$2 + 8 + 3 + 7 + 3 = 23$$$. We can show that this is the minimum achievable cost.



E. City Uniontime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given $$$n \times m$$$ grid. Some cells are filled and some are empty.Acityis a maximal (by inclusion) set of filled cells such that it is possible to get from any cell in the set to any other cell in the set by moving to adjacent (by side) cells, without moving into any cells not in the set. In other words, a city is a connected component of filled cells with edges between adjacent (by side) cells.Initially, there aretwo citieson the grid. You want to change some empty cells into filled cells so that both of the following are satisfied:There isone cityon the resulting grid.The shortest path between any two filled cells, achievable only by moving onto filled cells, is equal to the Manhattan distance between them.TheManhattan distancebetween two cells $$$(a, b)$$$ and $$$(c, d)$$$ is equal to $$$|a - c| + |b - d|$$$.Find a way to add filled cells that satisfies these conditions and minimizes the total number of filled cells.InputInput consists of multiple test cases. The first line contains a single integer $$$t$$$, the number of test cases ($$$1 \le t \le 5000$$$).The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \le n, m \le 50$$$, $$$nm \geq 3$$$).The next $$$n$$$ lines describe the grid. The $$$i$$$-th line contains a string $$$s_i$$$ of length $$$m$$$. $$$s_{i,j}$$$ is '#' if the cell in position $$$(i, j)$$$ is filled, and '.' if it is empty.It is guaranteed that there areexactly two citiesin the initial grid.It is guaranteed that the sum of $$$n\cdot m$$$ over all test cases does not exceed $$$25\,000$$$.OutputFor each test case, output $$$n$$$ lines, each containing a string of length $$$m$$$, describing the grid you create in the same format as the input.If there are multiple possible answers with the minimum number of filled cells print any.ExampleInput111 3#.#2 2.##.4 4..##...##...##..6 6.##...##..............##.....#...###6 5.#..#.#..#.#..#.#.##.#...##...5 5######...##.#.##...######4 4.##.##.##.##.##.5 5..###....#.....#....#....5 6.##...##....#....#....##...##.6 5..##....##....##....##....##..5 4..##..#...#.#...#...Output###

.#
##

..##
..##
###.
##..

.##...
###...
..#...
..####
...###
...###

.####
.####
.####
.####
.#...
##...

#####
#####
#####
#####
#####

.##.
####
####
.##.

..###
..###
..#..
###..
#....

.##...
###...
######
...###
...##.

..##.
..###
..###
###..
###..
.##..

..##
..#.
..#.
###.
#...NoteIn the first test case, we can add a single filled cell between the two cities to connect them. We can verify that the second condition is satisfied.In the second test case, we can also connect the cities with a single filled cell, while satisfying the second condition.In the third test case, note that if we filled the 3 cells in the top left, the cities would be connected, but the second condition would not be satisfied for cells $$$(4, 2)$$$ and $$$(2, 4)$$$.



D2. Hot Start Up (hard version)time limit per test1 secondmemory limit per test512 megabytesinputstandard inputoutputstandard outputThis is a hard version of the problem. The constraints of $$$t$$$, $$$n$$$, $$$k$$$ are the only difference between versions.You have a device with two CPUs. You also have $$$k$$$ programs, numbered $$$1$$$ through $$$k$$$, that you can run on the CPUs.The $$$i$$$-th program ($$$1 \le i \le k$$$) takes $$$cold_i$$$ seconds to run on some CPU. However, if the last program we ran on this CPU was also program $$$i$$$, it only takes $$$hot_i$$$ seconds ($$$hot_i \le cold_i$$$). Note that this only applies if we run program $$$i$$$ multiple times consecutively  — if we run program $$$i$$$, then some different program, then program $$$i$$$ again, it will take $$$cold_i$$$ seconds the second time.You are given a sequence $$$a_1, a_2, \ldots, a_n$$$ of length $$$n$$$, consisting of integers from $$$1$$$ to $$$k$$$. You need to use your device to run programs $$$a_1, a_2, \ldots, a_n$$$ in sequence. For all $$$2 \le i \le n$$$, you cannot start running program $$$a_i$$$ until program $$$a_{i - 1}$$$ has completed.Find the minimum amount of time needed to run all programs $$$a_1, a_2, \ldots, a_n$$$ in sequence.InputInput consists of multiple test cases. The first line contains a single integer $$$t$$$, the number of test cases ($$$1 \le t \le 10^5$$$).The first line of each test case contains $$$n$$$ and $$$k$$$ ($$$1 \le n, k \le 3 \cdot 10^5$$$).The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \le a_i \le k$$$).The third line of each test case contains $$$k$$$ integers $$$cold_1, cold_2, \ldots, cold_k$$$ ($$$1 \le cold_i \le 10^9$$$).The fourth line of each test case contains $$$k$$$ integers $$$hot_1, hot_2, \ldots, hot_k$$$ ($$$1 \le hot_i \le cold_i$$$).It is guaranteed the sum of $$$n$$$ and the sum of $$$k$$$ over all test cases do not exceed $$$3 \cdot 10^5$$$.OutputFor each test case, print the minimum time needed to run all programs in the given order.ExampleInput93 21 2 23 22 14 21 2 1 25 32 14 31 2 3 1100 100 1001 1 15 22 1 2 1 165 4554 75 31 3 2 1 22 2 21 1 15 11 1 1 1 110000000009999999995 61 6 1 4 13 6 4 1 4 51 1 1 1 4 11 334 5 61 2 38 33 3 3 1 2 3 2 110 10 810 10 5Output6
11
301
225
8
4999999996
11
6
63NoteIn the first test case, we can do the following:Run program $$$a_1 = 1$$$ on CPU $$$1$$$. It takes $$$cold_1 = 3$$$ seconds to run.Run program $$$a_2 = 2$$$ on CPU $$$2$$$. It takes $$$cold_2 = 2$$$ seconds to run.Run program $$$a_3 = 2$$$ on CPU $$$2$$$. The last program run on this CPU was also program $$$2$$$, so it takes $$$hot_2 = 1$$$ second to run.In total, we need $$$3 + 2 + 1 = 6$$$ seconds to run them all. We can show this is optimal.In the second test case, we can use do the following:Run program $$$a_1 = 1$$$ on CPU $$$1$$$. It takes $$$cold_1 = 5$$$ seconds to run.Run program $$$a_2 = 2$$$ on CPU $$$2$$$. It takes $$$cold_2 = 3$$$ seconds to run.Run program $$$a_3 = 1$$$ on CPU $$$1$$$. The last program run on this CPU was also program $$$1$$$, so it takes $$$hot_1 = 2$$$ seconds to run.Run program $$$a_4 = 2$$$ on CPU $$$2$$$. The last program run on this CPU was also program $$$2$$$, so it takes $$$hot_2 = 1$$$ second to run.In total, we need $$$5 + 3 + 2 + 1 = 11$$$ seconds. We can show this is optimal.



D1. Hot Start Up (easy version)time limit per test1 secondmemory limit per test512 megabytesinputstandard inputoutputstandard outputThis is an easy version of the problem. The constraints of $$$t$$$, $$$n$$$, $$$k$$$ are the only difference between versions.You have a device with two CPUs. You also have $$$k$$$ programs, numbered $$$1$$$ through $$$k$$$, that you can run on the CPUs.The $$$i$$$-th program ($$$1 \le i \le k$$$) takes $$$cold_i$$$ seconds to run on some CPU. However, if the last program we ran on this CPU was also program $$$i$$$, it only takes $$$hot_i$$$ seconds ($$$hot_i \le cold_i$$$). Note that this only applies if we run program $$$i$$$ multiple times consecutively  — if we run program $$$i$$$, then some different program, then program $$$i$$$ again, it will take $$$cold_i$$$ seconds the second time.You are given a sequence $$$a_1, a_2, \ldots, a_n$$$ of length $$$n$$$, consisting of integers from $$$1$$$ to $$$k$$$. You need to use your device to run programs $$$a_1, a_2, \ldots, a_n$$$ in sequence. For all $$$2 \le i \le n$$$, you cannot start running program $$$a_i$$$ until program $$$a_{i - 1}$$$ has completed.Find the minimum amount of time needed to run all programs $$$a_1, a_2, \ldots, a_n$$$ in sequence.InputInput consists of multiple test cases. The first line contains a single integer $$$t$$$, the number of test cases ($$$1 \le t \le 5000$$$).The first line of each test case contains $$$n$$$ and $$$k$$$ ($$$1 \le n, k \le 5000$$$).The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \le a_i \le k$$$).The third line of each test case contains $$$k$$$ integers $$$cold_1, cold_2, \ldots, cold_k$$$ ($$$1 \le cold_i \le 10^9$$$).The fourth line of each test case contains $$$k$$$ integers $$$hot_1, hot_2, \ldots, hot_k$$$ ($$$1 \le hot_i \le cold_i$$$).It is guaranteed the sum of $$$n$$$ and the sum of $$$k$$$ over all test cases do not exceed $$$5000$$$.OutputFor each test case, print the minimum time needed to run all programs in the given order.ExampleInput93 21 2 23 22 14 21 2 1 25 32 14 31 2 3 1100 100 1001 1 15 22 1 2 1 165 4554 75 31 3 2 1 22 2 21 1 15 11 1 1 1 110000000009999999995 61 6 1 4 13 6 4 1 4 51 1 1 1 4 11 334 5 61 2 38 33 3 3 1 2 3 2 110 10 810 10 5Output6
11
301
225
8
4999999996
11
6
63NoteIn the first test case, we can do the following:Run program $$$a_1 = 1$$$ on CPU $$$1$$$. It takes $$$cold_1 = 3$$$ seconds to run.Run program $$$a_2 = 2$$$ on CPU $$$2$$$. It takes $$$cold_2 = 2$$$ seconds to run.Run program $$$a_3 = 2$$$ on CPU $$$2$$$. The last program run on this CPU was also program $$$2$$$, so it takes $$$hot_2 = 1$$$ second to run.In total, we need $$$3 + 2 + 1 = 6$$$ seconds to run them all. We can show this is optimal.In the second test case, we can use do the following:Run program $$$a_1 = 1$$$ on CPU $$$1$$$. It takes $$$cold_1 = 5$$$ seconds to run.Run program $$$a_2 = 2$$$ on CPU $$$2$$$. It takes $$$cold_2 = 3$$$ seconds to run.Run program $$$a_3 = 1$$$ on CPU $$$1$$$. The last program run on this CPU was also program $$$1$$$, so it takes $$$hot_1 = 2$$$ seconds to run.Run program $$$a_4 = 2$$$ on CPU $$$2$$$. The last program run on this CPU was also program $$$2$$$, so it takes $$$hot_2 = 1$$$ second to run.In total, we need $$$5 + 3 + 2 + 1 = 11$$$ seconds. We can show this is optimal.



C. Double Lexicographically Minimumtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a string $$$s$$$. You can reorder the characters to form a string $$$t$$$. Define $$$t_{\mathrm{max}}$$$ to be the lexicographical maximum of $$$t$$$ and $$$t$$$ in reverse order.Given $$$s$$$ determine the lexicographically minimum value of $$$t_{\mathrm{max}}$$$ over all reorderings $$$t$$$ of $$$s$$$.A string $$$a$$$ is lexicographically smaller than a string $$$b$$$ if and only if one of the following holds:$$$a$$$ is a prefix of $$$b$$$, but $$$a \ne b$$$;in the first position where $$$a$$$ and $$$b$$$ differ, the string $$$a$$$ has a letter that appears earlier in the alphabet than the corresponding letter in $$$b$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^5$$$) — the number of test cases. Descriptions of test cases follow.The first and only line of each test case contains a string $$$s$$$ ($$$1 \leq |s| \leq 10^5$$$). $$$s$$$ consists of only lowercase English letters.It is guaranteed that the sum of $$$|s|$$$ over all test cases does not exceed $$$10^5$$$.OutputFor each test case print the lexicographically minimum value of $$$t_{\mathrm{max}}$$$ over all reorderings $$$t$$$ of $$$s$$$.ExampleInput12aaababbabcaabbaabbbaaabbabbbabbbbabbcceagaffcabaOutputa
aba
bab
bca
abba
abbba
ababa
bbab
bbabb
bbcca
agea
acffbaNoteFor the first test case, there is only one reordering of $$$s$$$, namely "a".For the second test case, there are three reorderings of $$$s$$$.$$$t = \mathtt{aab}$$$: $$$t_{\mathrm{max}} = \max(\mathtt{aab}, \mathtt{baa}) = \mathtt{baa}$$$$$$t = \mathtt{aba}$$$: $$$t_{\mathrm{max}} = \max(\mathtt{aba}, \mathtt{aba}) = \mathtt{aba}$$$$$$t = \mathtt{baa}$$$: $$$t_{\mathrm{max}} = \max(\mathtt{baa}, \mathtt{aab}) = \mathtt{baa}$$$The lexicographical minimum of $$$t_{\mathrm{max}}$$$ over all cases is "aba".



B. Equalize by Dividetime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an array $$$a_1, a_2, \ldots, a_n$$$ of positive integers.You can make this operation multiple (possibly zero) times:Choose two indices $$$i$$$, $$$j$$$ ($$$1 \leq i, j \leq n$$$, $$$i \neq j$$$).Assign $$$a_i := \lceil \frac{a_i}{a_j} \rceil$$$. Here $$$\lceil x \rceil$$$ denotes $$$x$$$ rounded up to the smallest integer $$$\geq x$$$.Is it possible to make all array elements equal by some sequence of operations (possibly empty)? If yes, printanyway to do it in at most $$$30n$$$ operations.It can be proven, that under the problem constraints, if some way exists to make all elements equal, there exists a way with at most $$$30n$$$ operations.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 1000$$$) — the number of test cases. Descriptions of test cases follow.The first line of each test case description contains a single integer $$$n$$$ ($$$1 \leq n \leq 100$$$).The second line of each test case description contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \leq a_i \leq 10^9$$$).It is guaranteed, that the sum of $$$n$$$ for all test cases does not exceed $$$1000$$$.OutputFor each test case print a single integer $$$q$$$ ($$$-1 \leq q \leq 30n$$$). If $$$q=-1$$$, there is no solution, otherwise $$$q$$$ is equal to the number of operations.If $$$q \geq 0$$$, on the next $$$q$$$ lines print two integers $$$i$$$, $$$j$$$ ($$$1 \leq i, j \leq n$$$, $$$i \neq j$$$) — descriptions of operations.If there are multiple solutions, you can print any.ExampleInput10110031 1 122 125 534 3 243 3 4 422 10055 3 6 7 863 3 80 3 8 3419 40 19 55Output0
0
-1
0
2
1 3
2 1
4
3 1
4 2
1 3
2 4
6
2 1
2 1
2 1
2 1
2 1
2 1
8
5 2
4 2
3 2
1 3
1 3
2 1
4 1
5 1
4
5 1
3 1
3 1
3 1
9
4 2
2 1
1 2
1 2
3 2
3 2
1 4
2 4
3 4NoteIn the first and second, fourth test cases all numbers are equal, so it is possible to do nothing.In the third test case, it is impossible to make all numbers equal.In the fifth test case: $$$[\color{red}{4}, 3, \color{blue}{2}] \to [\color{blue}{2}, \color{red}{3}, 2] \to [2, 2, 2]$$$.In the sixth test case: $$$[\color{blue}{3}, 3, \color{red}{4}, 4] \to [3, \color{blue}{3}, 2, \color{red}{4}] \to [\color{red}{3}, 3, \color{blue}{2}, 2] \to [2, \color{red}{3}, 2, \color{blue}{2}] \to [2, 2, 2, 2]$$$.Here the red numbers are $$$i$$$ indices (that will be assigned), blue numbers are $$$j$$$ indices.



A. Recent Actionstime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputOn Codeforces the "Recent Actions" field shows the last $$$n$$$ posts with recent actions.Initially, there are posts $$$1, 2, \ldots, n$$$ in the field (this is in order from top to down). Also there are infinitely many posts not in the field, numbered with integers $$$n + 1, n + 2, \ldots$$$.When recent action happens in the post $$$p$$$:If it is in the "Recent Actions" field, it moves from its position to the top position.Otherwise, it is added to the top position, and the post on the down position is removed from the "Recent Actions" field.You know, that the next $$$m$$$ recent actions will happen in the posts $$$p_1, p_2, \ldots, p_m$$$ ($$$n + 1 \leq p_i \leq n + m$$$) in the moments of time $$$1, 2, \ldots, m$$$.Note, that recent actions only happen with posts with numbers $$$\geq n + 1$$$.For each post $$$i$$$ ($$$1 \leq i \leq n$$$), find the first time it will be removed from the "Recent Actions" field or say, that it won't be removed.InputThe first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^4$$$) — the number of test cases. Descriptions of test cases follow.The first line of each test case contains two integers $$$n$$$, $$$m$$$ ($$$1 \leq n, m \leq 5 \cdot 10^4$$$) — the size of the "Recent Actions" field and the number of actions.The next line contains $$$m$$$ integers $$$p_1, p_2, \ldots, p_m$$$ ($$$n + 1 \leq p_i \leq n + m$$$).It is guaranteed, that the sum of $$$n$$$ and the sum of $$$m$$$ for all test cases does not exceed $$$5 \cdot 10^4$$$.OutputFor each test case print $$$n$$$ integers $$$t_1, t_2, \ldots, t_n$$$, where $$$t_i=-1$$$ if the post $$$i$$$ won't be removed or $$$t_i$$$ equals to the first moment of time the post $$$i$$$ will be removed ($$$1 \leq t_i \leq m$$$).ExampleInput101 123 25 44 55 9 9 5 75 56 7 8 9 103 44 4 4 44 45 5 6 63 54 5 5 5 44 205 5 24 24 24 5 6 7 8 9 10 12 13 14 15 16 17 18 19 205 77 8 7 11 7 12 106 78 11 7 8 8 8 12Output1 
-1 2 1 
-1 5 2 1 
5 4 3 2 1 
-1 -1 1 
-1 -1 3 1 
-1 2 1 
8 7 3 1 
7 6 4 2 1 
-1 -1 7 3 2 1NoteIn the first test case, the only post $$$1$$$ will be removed at the moment $$$1$$$ and replaced by the post $$$2$$$.In the second test case the "Recent Actions" field will be (given an order from top to down):Before moment $$$1$$$: $$$[1, 2, 3]$$$, after moment $$$1$$$: $$$[5, 1, 2]$$$. Post number $$$3$$$ was removed.Before moment $$$2$$$: $$$[5, 1, 2]$$$, after moment $$$2$$$: $$$[4, 5, 1]$$$. Post number $$$2$$$ was removed.Post number $$$1$$$ won't be removed.In the third test case the "Recent Actions" field will be (given an order from top to down):Before moment $$$1$$$: $$$[1, 2, 3, 4]$$$, after moment $$$1$$$: $$$[5, 1, 2, 3]$$$. Post number $$$4$$$ was removed.Before moment $$$2$$$: $$$[5, 1, 2, 3]$$$, after moment $$$2$$$: $$$[9, 5, 1, 2]$$$. Post number $$$3$$$ was removed.Before moment $$$3$$$: $$$[9, 5, 1, 2]$$$, after moment $$$3$$$: $$$[9, 5, 1, 2]$$$. Nothing was changed.Before moment $$$4$$$: $$$[9, 5, 1, 2]$$$, after moment $$$4$$$: $$$[5, 9, 1, 2]$$$. The order was changed.Before moment $$$5$$$: $$$[5, 9, 1, 2]$$$, after moment $$$5$$$: $$$[7, 5, 9, 1]$$$. Post number $$$2$$$ was removed.Post number $$$1$$$ won't be removed.



F. Gifts from Grandfather Ahmedtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputGrandfather Ahmed's School has $$$n+1$$$ students. The students are divided into $$$k$$$ classes, and $$$s_i$$$ students study in the $$$i$$$-th class. So, $$$s_1 + s_2 + \ldots + s_k = n+1$$$.Due to the upcoming April Fools' Day, all students will receive gifts!Grandfather Ahmed planned to order $$$n+1$$$ boxes of gifts. Each box can contain one or more gifts. He plans to distribute the boxes between classes so that the following conditions are satisfied:Class number $$$i$$$ receivesexactly$$$s_i$$$ boxes (so that each student can open exactly one box).The total number of gifts in the boxes received by the $$$i$$$-th class should be a multiple of $$$s_i$$$ (it should be possible to equally distribute the gifts among the $$$s_i$$$ students of this class).Unfortunately, Grandfather Ahmed ordered only $$$n$$$ boxes with gifts, the $$$i$$$-th of which contains $$$a_i$$$ gifts.Ahmed has to buy the missing gift box, and the number of gifts in the box should be an integer between $$$1$$$ and $$$10^6$$$. Help Ahmed to determine, how many gifts should the missing box contain, and build a suitable distribution of boxes to classes, or report that this is impossible.InputThe first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \le n, k \le 200$$$, $$$k \le n + 1$$$).The second line contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \le a_i \le 10^6$$$) — the number of gifts in the available boxes.The third line contains $$$k$$$ integers $$$s_1, s_2, \ldots, s_k$$$ ($$$1 \le s_i \le n+1$$$) — the number of students in classes. It is guaranteed that $$$\sum s_i = n+1$$$.OutputIf there is no way to buy the remaining box, output the integer $$$-1$$$ in a single line.Otherwise, in the first line, output a single integer $$$s$$$ — the number of gifts in the box that Grandfather Ahmed should buy ($$$1 \le s \le 10^6$$$).Next, in $$$k$$$ lines, print the distribution of boxes to classes. In the $$$i$$$-th line print $$$s_i$$$ integers — the sizes of the boxes that should be sent to the $$$i$$$-th class.If there are multiple solutions, print any of them.ExamplesInput4 2
7 7 7 127
2 3Output1
7 7 
7 127 1Input18 4
1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9
6 1 9 3Output9
7 1 7 6 5 4 
9 
1 2 3 8 3 2 9 8 9 
6 5 4NoteIn the first test, Grandfather Ahmed can buy a box with just $$$1$$$ gift. After that, two boxes with $$$7$$$ gifts are sent to the first class. $$$7 + 7 = 14$$$ is divisible by $$$2$$$. And the second class gets boxes with $$$1, 7, 127$$$ gifts. $$$1 + 7 + 127 = 135$$$ is evenly divisible by $$$3$$$.In the second test, the classes have sizes $$$6$$$, $$$1$$$, $$$9$$$, and $$$3$$$. We show that the available boxes are enough to distribute into classes with sizes $$$6$$$, $$$9$$$, $$$3$$$, and in the class with size $$$1$$$, you can buy a box of any size. In class with size $$$6$$$ we send boxes with sizes $$$7$$$, $$$1$$$, $$$7$$$, $$$6$$$, $$$5$$$, $$$4$$$. $$$7 + 1 + 7 + 6 + 5 + 4 = 30$$$ is divisible by $$$6$$$. In class with size $$$9$$$ we send boxes with sizes $$$1$$$, $$$2$$$, $$$3$$$, $$$8$$$, $$$3$$$, $$$2$$$, $$$9$$$, $$$8$$$, $$$9$$$. $$$1 + 2 + 3 + 8 + 3 + 2 + 9 + 8 + 9 = 45$$$ is divisible by $$$9$$$. The remaining boxes ($$$6$$$, $$$5$$$, $$$4$$$) are sent to the class with size $$$3$$$. $$$6 + 5 + 4 = 15$$$ is divisible by $$$3$$$.



E. Multitest Generatortime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputLet's call an array $$$b_1, b_2, \ldots, b_m$$$ atestif $$$b_1 = m - 1$$$.Let's call an array $$$b_1, b_2, \ldots, b_m$$$ amultitestif the array $$$b_2, b_3, \ldots, b_m$$$ can be split into $$$b_1$$$ non-empty subarrays so that each of these subarrays is atest. Note that each element of the array must be included in exactly one subarray, and the subarrays must consist of consecutive elements.Let's define the function $$$f$$$ from the array $$$b_1, b_2, \ldots, b_m$$$ as the minimum number of operations of the form "Replace any $$$b_i$$$ with anynon-negativeinteger $$$x$$$", which needs to be done so that the array $$$b_1, b_2, \ldots, b_m$$$ becomes amultitest.You are given an array ofpositiveintegers $$$a_1, a_2, \ldots, a_n$$$. For each $$$i$$$ from $$$1$$$ to $$$n - 1$$$, find $$$f([a_i, a_{i+1}, \ldots, a_n])$$$.Below are some examples oftestsandmultitests.Tests: $$$[\underline{1}, 5]$$$, $$$[\underline{2}, 2, 2]$$$, $$$[\underline{3}, 4, 1, 1]$$$, $$$[\underline{5}, 0, 0, 0, 0, 0]$$$, $$$[\underline{7}, 1, 2, 3, 4, 5, 6, 7]$$$, $$$[\underline{0}]$$$. These arrays aretestssince their first element (underlined) is equal to the length of the array minus one.Multitests: $$$[1, \underline{\underline{1}, 1}]$$$, $$$[2, \underline{\underline{3}, 0, 0, 1}, \underline{\underline{1}, 12}]$$$, $$$[3, \underline{\underline{2}, 2, 7}, \underline{\underline{1}, 1}, \underline{\underline{3}, 4, 4, 4}]$$$, $$$[4, \underline{\underline{0}}, \underline{\underline{3}, 1, 7, 9}, \underline{\underline{4}, 2, 0, 0, 9}, \underline{\underline{1}, 777}]$$$. Underlined are the subarrays after the split, and double underlined are the first elements of each subarray.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 300\,000$$$). The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$2 \le n \le 300\,000$$$) — the length of the array $$$a$$$.The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \le a_i \le 300\,000$$$) — elements of the array $$$a$$$.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$300\,000$$$.OutputFor each test case print $$$n - 1$$$ numbers — $$$f([a_i, a_{i+1}, \ldots, a_n])$$$ for each $$$i$$$ from $$$1$$$ to $$$n - 1$$$.ExamplesInput341 2 1 773 1 3 1 2 1 142 7 1 1Output0 1 1 
0 1 1 0 1 1 
1 1 1Input1193 4 1 2 1 7 7 3 1 3 1 2 1 1 4 2 7 1 1Output0 0 1 1 1 1 1 1 1 0 1 0 1 0 2 1 1 1NoteIn the first test case of the first test the array $$$[1, 2, 1, 7]$$$ is amultitestsince the array $$$[2, 1, 7]$$$ is atest. The array $$$[2, 1, 7]$$$ is not amultitest, but after replacing the first number with $$$1$$$, an array $$$[1, 1, 7]$$$ is obtained, which is amultitest. The array $$$[1, 7]$$$ is also not amultitest, but the array $$$[1, 0]$$$ is, so $$$f([1, 7]) = 1$$$.In the second test case of first test, for $$$i = 2$$$, $$$f([a_i, a_{i+1}, \ldots, a_n]) = f([1, 3, 1, 2, 1, 1]) = 1$$$, since the array itself is not amultitest, but after replacing the second element with $$$4$$$ you getmultitest.In the third test case of first test, for $$$i = 1$$$, $$$f([a_i, a_{i+1}, \ldots, a_n]) = f([2, 7, 1, 1]) = 1$$$, since the array itself is not amultitest, but after replacing the second element with $$$0$$$ you getmultitest.The second test is an array composed of all the numbers of the first test. Therefore $$$f([a_1, a_2, \ldots, a_n])$$$ naturally equals to $$$0$$$.



D. Shocking Arrangementtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an array $$$a_1, a_2, \ldots, a_n$$$ consisting of integers such that $$$a_1 + a_2 + \ldots + a_n = 0$$$.You have to rearrange the elements of the array $$$a$$$ so that the following condition is satisfied:$$$$$$\max\limits_{1 \le l \le r \le n} \lvert a_l + a_{l+1} + \ldots + a_r \rvert < \max(a_1, a_2, \ldots, a_n) - \min(a_1, a_2, \ldots, a_n),$$$$$$ where $$$|x|$$$ denotes the absolute value of $$$x$$$.More formally, determine if there exists a permutation $$$p_1, p_2, \ldots, p_n$$$ that for the array $$$a_{p_1}, a_{p_2}, \ldots, a_{p_n}$$$, the condition above is satisfied, and find the corresponding array.Recall that the array $$$p_1, p_2, \ldots, p_n$$$ is called a permutation if for each integer $$$x$$$ from $$$1$$$ to $$$n$$$ there is exactly one $$$i$$$ from $$$1$$$ to $$$n$$$ such that $$$p_i = x$$$.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 50\,000$$$). The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \le n \le 300\,000$$$) — the length of the array $$$a$$$.The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$-10^9 \le a_i \le 10^9$$$) — elements of the array $$$a$$$. It is guaranteed that the sum of the array $$$a$$$ is zero, in other words: $$$a_1 + a_2 + \ldots + a_n = 0$$$.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$300\,000$$$.OutputFor each test case, if it is impossible to rearrange the elements of the array $$$a$$$ in the required way, print "No" in a single line.If possible, print "Yes" in the first line, and then in a separate line $$$n$$$ numbers — elements $$$a_1, a_2, \ldots, a_n$$$ rearranged in a valid order ($$$a_{p_1}, a_{p_2}, \ldots, a_{p_n}$$$).If there are several possible answers, you can output any of them.ExampleInput7
4
3 4 -2 -5
5
2 2 2 -3 -3
8
-3 -3 1 1 1 1 1 1
3
0 1 -1
7
-3 4 3 4 -4 -4 0
1
0
7
-18 13 -18 -17 12 15 13OutputYes
-5 -2 3 4
Yes
-3 2 -3 2 2
Yes
1 1 1 -3 1 1 1 -3
Yes
-1 0 1
Yes
4 -4 4 -4 0 3 -3
No
Yes
13 12 -18 15 -18 13 -17NoteIn the first test case $$$\max(a_1, \ldots, a_n) - \min(a_1, \ldots, a_n) = 9$$$. Therefore, the elements can be rearranged as $$$[-5, -2, 3, 4]$$$. It is easy to see that for such an arrangement $$$\lvert a_l + \ldots + a_r \rvert$$$ is always not greater than $$$7$$$, and therefore less than $$$9$$$.In the second test case you can rearrange the elements of the array as $$$[-3, 2, -3, 2, 2]$$$. Then the maximum modulus of the sum will be reached on the subarray $$$[-3, 2, -3]$$$, and will be equal to $$$\lvert -3 + 2 + -3 \rvert = \lvert -4 \rvert = 4$$$, which is less than $$$5$$$.In the fourth test example, any rearrangement of the array $$$a$$$ will be suitable as an answer, including $$$[-1, 0, 1]$$$.



C. Candy Storetime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe store sells $$$n$$$ types of candies with numbers from $$$1$$$ to $$$n$$$. One candy of type $$$i$$$ costs $$$b_i$$$ coins. In total, there are $$$a_i$$$ candies of type $$$i$$$ in the store.You need to pack all available candies in packs, each pack should contain only one type of candies. Formally, for each type of candy $$$i$$$ you need to choose the integer $$$d_i$$$, denoting the number of type $$$i$$$ candies in one pack, so that $$$a_i$$$ is divided without remainder by $$$d_i$$$.Then the cost of one pack of candies of type $$$i$$$ will be equal to $$$b_i \cdot d_i$$$. Let's denote this cost by $$$c_i$$$, that is, $$$c_i = b_i \cdot d_i$$$.After packaging, packs will be placed on the shelf. Consider the cost of the packs placed on the shelf, in order $$$c_1, c_2, \ldots, c_n$$$. Price tags will be used to describe costs of the packs. One price tag can describe the cost of all packs from $$$l$$$ to $$$r$$$ inclusive if $$$c_l = c_{l+1} = \ldots = c_r$$$. Each of the packs from $$$1$$$ to $$$n$$$ must be described by at least one price tag. For example, if $$$c_1, \ldots, c_n = [4, 4, 2, 4, 4]$$$, to describe all the packs, a $$$3$$$ price tags will be enough, the first price tag describes the packs $$$1, 2$$$, the second: $$$3$$$, the third: $$$4, 5$$$.You are given the integers $$$a_1, b_1, a_2, b_2, \ldots, a_n, b_n$$$. Your task is to choose integers $$$d_i$$$ so that $$$a_i$$$ is divisible by $$$d_i$$$ for all $$$i$$$, and the required number of price tags to describe the values of $$$c_1, c_2, \ldots, c_n$$$ is the minimum possible.For a better understanding of the statement, look at the illustration of the first test case of the first test:Let's repeat the meaning of the notation used in the problem:$$$a_i$$$ — the number of candies of type $$$i$$$ available in the store.$$$b_i$$$ — the cost of one candy of type $$$i$$$.$$$d_i$$$ — the number of candies of type $$$i$$$ in one pack.$$$c_i$$$ — the cost of one pack of candies of type $$$i$$$ is expressed by the formula $$$c_i = b_i \cdot d_i$$$.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 100\,000$$$). Description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$2 \le n \le 200\,000$$$) — the number of types of candies.Each of the next $$$n$$$ lines of each test case contains two integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \le a_i \le 10^9$$$, $$$1 \le b_i \le 10\,000$$$) — the number of candies and the cost of one candy of type $$$i$$$, respectively.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$200\,000$$$.OutputFor each test case, output the minimum number of price tags required to describe the costs of all packs of candies in the store.ExampleInput5420 36 214 520 73444 52002 102020 257 76 515 210 37 7510 111 55 12 28 267 1212 35 39 129 31000000000 10000Output2
1
3
2
5NoteIn the first test case, you can choose $$$d_1 = 4$$$, $$$d_2 = 6$$$, $$$d_3 = 7$$$, $$$d_4 = 5$$$. Then the cost of packs will be equal to $$$[12, 12, 35, 35]$$$. $$$2$$$ price tags are enough to describe them, the first price tag for $$$c_1, c_2$$$ and the second price tag for $$$c_3, c_4$$$. It can be shown that with any correct choice of $$$d_i$$$, at least $$$2$$$ of the price tag will be needed to describe all the packs. Also note that this example is illustrated by a picture in the statement.In the second test case, with $$$d_1 = 4$$$, $$$d_2 = 2$$$, $$$d_3 = 10$$$, the costs of all packs will be equal to $$$20$$$. Thus, $$$1$$$ price tag is enough to describe all the packs. Note that $$$a_i$$$ is divisible by $$$d_i$$$ for all $$$i$$$, which is necessary condition.In the third test case, it is not difficult to understand that one price tag can be used to describe $$$2$$$nd, $$$3$$$rd and $$$4$$$th packs. And additionally a price tag for pack $$$1$$$ and pack $$$5$$$. Total: $$$3$$$ price tags.



B. Three Sevenstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputLottery "Three Sevens" was held for $$$m$$$ days. On day $$$i$$$, $$$n_i$$$ people with the numbers $$$a_{i, 1}, \ldots, a_{i, n_i}$$$ participated in the lottery.It is known that in each of the $$$m$$$ days, only one winner was selected from the lottery participants. The lottery winner on day $$$i$$$ was not allowed to participate in the lottery in the days from $$$i+1$$$ to $$$m$$$.Unfortunately, the information about the lottery winners has been lost. You need to find any possible list of lottery winners on days from $$$1$$$ to $$$m$$$ or determine that no solution exists.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 50\,000$$$). The description of the test cases follows.The first line of each test case contains a single integer $$$m$$$ ($$$1 \le m \le 50\,000$$$) — the number of days in which the lottery was held.Next, for each $$$i$$$ from $$$1$$$ to $$$m$$$, follows a two-line block of data.The first line of each block contains a single integer $$$n_i$$$ ($$$1 \le n_i \le 50\,000$$$) — the number of lottery participants on day $$$i$$$.The second line of the block contains integers $$$a_{i, 1}, \ldots, a_{i, n_i}$$$ ($$$1 \le a_{i, j} \le 50\,000$$$) — lottery participants on day $$$i$$$. It is guaranteed that all the numbers $$$a_{i, 1}, \ldots, a_{i, n_i}$$$ are pairwise distinct.It is guaranteed that the sum of $$$n_i$$$ over all blocks of all test cases does not exceed $$$50\,000$$$.OutputFor each test case, if there is no solution, print a single integer $$$-1$$$.Otherwise, print $$$m$$$ integers $$$p_1, p_2, \ldots, p_m$$$ ($$$1 \le p_i \le 50\,000$$$) — lottery winners on days from $$$1$$$ to $$$m$$$. If there are multiple solutions, print any of them.ExampleInput3341 2 4 832 9 121 4221 222 1441 2 3 4111413Output8 2 1 
-1
2 1 4 3NoteIn the first test case, one of the answers is $$$[8, 2, 1]$$$ since the participant with the number $$$8$$$ participated on day $$$1$$$, but did not participate on days $$$2$$$ and $$$3$$$; the participant with the number $$$2$$$ participated on day $$$2$$$, but did not participate on day $$$3$$$; and the participant with the number $$$1$$$ participated on day $$$3$$$. Note that this is not the only possible answer, for example, $$$[8, 9, 4]$$$ is also a correct answer.In the second test case, both lottery participants participated on both days, so any possible lottery winner on the day $$$1$$$ must have participated on the day $$$2$$$, which is not allowed. Thus, there is no correct answer.In the third test case, only one participant participated on days $$$2$$$, $$$3$$$, $$$4$$$, and on day $$$1$$$ there is only one participant who did not participate in the lottery on days $$$2, 3, 4$$$ — participant $$$2$$$, which means $$$[2, 1, 4, 3]$$$ is the only correct answer to this test case.



A. Showstoppertime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given two arrays $$$a_1, a_2, \ldots, a_n$$$ and $$$b_1, b_2, \ldots, b_n$$$.In one operation, you can choose any integer $$$i$$$ from $$$1$$$ to $$$n$$$ and swap the numbers $$$a_i$$$ and $$$b_i$$$.Determine whether, after using any (possibly zero) number of operations, the following two conditions can be satisfied simultaneously:$$$a_n = \max(a_1, a_2, \ldots, a_n)$$$,$$$b_n = \max(b_1, b_2, \ldots, b_n)$$$.Here $$$\max(c_1, c_2, \ldots, c_k)$$$ denotes the maximum number among $$$c_1, c_2, \ldots, c_k$$$. For example, $$$\max(3, 5, 4) = 5$$$, $$$\max(1, 7, 7) = 7$$$, $$$\max(6, 2) = 6$$$.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 200$$$). The description of the test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$1 \le n \le 100$$$) — the length of the arrays.The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \le a_i \le 100$$$) — elements of the first array.The third line of each test case contains $$$n$$$ integers $$$b_1, b_2, \ldots, b_n$$$ ($$$1 \le b_i \le 100$$$) — elements of the second array.OutputFor each test case, print "Yes" if after using any (possibly zero) number of operations the conditions described above are satisfied. Otherwise, print "No".You can output the answer in any case (upper or lower). For example, the strings "yEs", "yes", "Yes", and "YES" will be recognized as positive responses.ExampleInput737 9 77 6 9410 10 15 1510 16 15 152100 9999 10011191 2 3 4 5 6 7 8 99 9 9 9 9 9 6 6 671 1 2 2 1 1 21 2 1 2 1 2 1230 45 30OutputYes
No
Yes
Yes
Yes
No
NoNoteIn the first test case, you can swap the numbers $$$a_3$$$ and $$$b_3$$$, after which the array $$$a$$$ becomes equal to $$$[7, 9, 9]$$$, and the array $$$b$$$ becomes equal to $$$[7, 6, 7]$$$, and both conditions are met.In the second test case, it can be proved that it is impossible to satisfy both conditions.In the third test case, you can swap the numbers $$$a_1$$$ and $$$b_1$$$, after which the array $$$a$$$ becomes equal to $$$[99, 99]$$$, and the array $$$b$$$ becomes equal to $$$[100, 100]$$$, and both conditions are satisfied.In fifth test case, you can swap $$$a_7$$$ and $$$b_7$$$, $$$a_8$$$ and $$$b_8$$$, $$$a_9$$$ and $$$b_9$$$, after which the array $$$a$$$ becomes equal to $$$[1, 2, 3, 4, 5, 6, 6, 6, 6]$$$, and the array $$$b$$$ becomes equal to $$$[9, 9, 9, 9, 9, 9, 7, 8, 9]$$$, and both conditions are satisfied.



F. Li Hua and Pathtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputLi Hua has a tree of $$$n$$$ vertices and $$$n-1$$$ edges. The vertices are numbered from $$$1$$$ to $$$n$$$.A pair of vertices $$$(u,v)$$$ ($$$u < v$$$) is consideredcuteifexactly oneof the following two statements is true:$$$u$$$ is the vertex with the minimum index among all vertices on the path $$$(u,v)$$$.$$$v$$$ is the vertex with the maximum index among all vertices on the path $$$(u,v)$$$.There will be $$$m$$$ operations. In each operation, he decides an integer $$$k_j$$$, then inserts a vertex numbered $$$n+j$$$ to the tree, connecting with the vertex numbered $$$k_j$$$.He wants to calculate the number ofcutepairs before operations and after each operation.Suppose you were Li Hua, please solve this problem.InputThe first line contains the single integer $$$n$$$ ($$$2\le n\le 2\cdot 10^5$$$) — the number of vertices in the tree.Next $$$n-1$$$ lines contain the edges of the tree. The $$$i$$$-th line contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1\le u_i,v_i\le n$$$; $$$u_i\ne v_i$$$) — the corresponding edge. The given edges form a tree.The next line contains the single integer $$$m$$$ ($$$1\le m\le 2\cdot 10^5$$$) — the number of operations.Next $$$m$$$ lines contain operations — one operation per line. The $$$j$$$-th operation contains one integer $$$k_j$$$ ($$$1\le k_j < n+j$$$) — a vertex.OutputPrint $$$m+1$$$ integers — the number ofcutepairs before operations and after each operation.ExampleInput7
2 1
1 3
1 4
4 6
4 7
6 5
2
5
6Output11
15
19NoteThe initial tree is shown in the following picture:There are $$$11$$$cutepairs — $$$(1,5),(2,3),(2,4),(2,6),(2,7),(3,4),(3,6),(3,7),(4,5),(5,7),(6,7)$$$.Similarly, we can count thecutepairs after each operation and the result is $$$15$$$ and $$$19$$$.



E. Li Hua and Arraytime limit per test3 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputLi Hua wants to solve a problem about $$$\varphi$$$ — Euler's totient function. Please recall that $$$\varphi(x)=\sum\limits_{i=1}^x[\gcd(i,x)=1]$$$.$$$^{\dagger,\ddagger}$$$He has a sequence $$$a_1,a_2,\cdots,a_n$$$ and he wants to perform $$$m$$$ operations:"1 $$$l$$$ $$$r$$$" ($$$1\le l\le r\le n$$$) — foreach$$$x\in[l,r]$$$, change $$$a_x$$$ into $$$\varphi(a_x)$$$."2 $$$l$$$ $$$r$$$" ($$$1\le l\le r\le n$$$) — find out the minimum changes needed to make sure $$$a_l=a_{l+1}=\cdots=a_r$$$. In each change, he choosesone$$$x\in[l,r]$$$, change $$$a_x$$$ into $$$\varphi(a_x)$$$. Each operation of this type is independent, which means the array doesn't actually change.Suppose you were Li Hua, please solve this problem.$$$^\dagger$$$ $$$\gcd(x,y)$$$ denotes thegreatest common divisor (GCD)of integers $$$x$$$ and $$$y$$$.$$$^\ddagger$$$ The notation $$$[\textrm{cond}]$$$ equals $$$1$$$ if the condition $$$\textrm{cond}$$$ is true, and $$$0$$$ otherwise.InputThe first line contains two integers $$$n$$$ and $$$m$$$ ($$$1\le n,m\le 10^{5}$$$) — the number of elements in the array and the number of operations to process, respectively.The second line contains $$$n$$$ integers $$$a_{1},a_{2},\cdots ,a_{n}$$$ ($$$1\le a_{i}\le 5\cdot 10^{6}$$$) — the elements of the array.Next $$$m$$$ lines, each line contains three integers $$$t_{i},l_{i},r_{i}$$$ ($$$t_i\in\{1,2\},1\le l_i\le r_i\le n$$$) — the $$$i$$$-th operation.OutputFor each "2 $$$l$$$ $$$r$$$", output the answer in an separate line.ExampleInput5 4
8 1 6 3 7
2 1 5
2 3 4
1 1 3
2 3 4Output10
2
1NoteDenote $$$\varphi^k(x)=\begin{cases}x,&k=0\\\varphi(\varphi^{k-1}(x)),&k > 0\end{cases}$$$.At first, $$$a=[8,1,6,3,7]$$$.To make sure $$$a_1=a_2=a_3=a_4=a_5$$$, we can change $$$a$$$ to $$$a'=[\varphi^3(8),\varphi^0(1),\varphi^2(6),\varphi^2(3),\varphi^3(7)]=[1,1,1,1,1]$$$, using $$$3+0+2+2+3=10$$$ changes.To make sure $$$a_3=a_4$$$, we can change $$$a$$$ to $$$a'=[\varphi^0(8),\varphi^0(1),\varphi^1(6),\varphi^1(3),\varphi^0(7)]=[8,1,2,2,7]$$$, using $$$0+0+1+1+0=2$$$ changes.After "1 $$$1$$$ $$$3$$$", $$$a$$$ is changed to $$$a=[\varphi^1(8),\varphi^1(1),\varphi^1(6),\varphi^0(3),\varphi^0(7)]=[4,1,2,3,7]$$$.To make sure $$$a_3=a_4$$$, we can change $$$a$$$ to $$$a'=[\varphi^0(4),\varphi^0(1),\varphi^0(2),\varphi^1(3),\varphi^0(7)]=[4,1,2,2,7]$$$, using $$$0+0+0+1+0=1$$$ change.



D. Li Hua and Treetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputLi Hua has a tree of $$$n$$$ vertices and $$$n-1$$$ edges. The root of the tree is vertex $$$1$$$. Each vertex $$$i$$$ has importance $$$a_i$$$. Denote thesizeof a subtree as the number of vertices in it, and theimportanceas the sum of the importance of vertices in it. Denote theheavy sonof a non-leaf vertex as the son with thelargestsubtreesize. If multiple of them exist, theheavy sonis the one with theminimumindex.Li Hua wants to perform $$$m$$$ operations:"1 $$$x$$$" ($$$1\leq x \leq n$$$) — calculate theimportanceof the subtree whose root is $$$x$$$."2 $$$x$$$" ($$$2\leq x \leq n$$$) — rotate theheavy sonof $$$x$$$ up. Formally, denote $$$son_x$$$ as theheavy sonof $$$x$$$, $$$fa_x$$$ as the father of $$$x$$$. He wants to remove the edge between $$$x$$$ and $$$fa_x$$$ and connect an edge between $$$son_x$$$ and $$$fa_x$$$. It is guaranteed that $$$x$$$ is not root, butnotguaranteed that $$$x$$$ is not a leaf. If $$$x$$$ is a leaf, please ignore the operation.Suppose you were Li Hua, please solve this problem.InputThe first line contains 2 integers $$$n,m$$$ ($$$2\le n\le 10^{5},1\le m\le 10^{5}$$$) — the number of vertices in the tree and the number of operations.The second line contains $$$n$$$ integers $$$a_{1},a_{2},\ldots ,a_{n}$$$ ($$$-10^{9}\le a_{i}\le 10^{9}$$$) — the importance of each vertex.Next $$$n-1$$$ lines contain the edges of the tree. The $$$i$$$-th line contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1\le u_i,v_i\le n$$$, $$$u_i\ne v_i$$$) — the corresponding edge. The given edges form a tree.Next $$$m$$$ lines contain operations — one operation per line. The $$$j$$$-th operation contains two integers $$$t_{j},x_{j}$$$ ($$$t_{j}\in \{1,2\}$$$, $$$1 \leq x_{j} \leq n$$$, $$$x_{j}\neq 1$$$ if $$$t_j = 2$$$) — the $$$j$$$-th operation.OutputFor each query "1 $$$x$$$", output the answer in an independent line.ExamplesInput7 4
1 1 1 1 1 1 1
1 2
1 3
2 4
2 5
3 6
6 7
1 6
2 3
1 6
1 2Output2
3
3Input10 14
-160016413 -90133231 -671446275 -314847579 -910548234 121155052 -359359950 83112406 -704889624 145489303
1 6
1 10
10 8
1 4
3 4
2 7
2 5
3 2
9 8
1 4
2 2
2 4
1 4
1 10
2 10
1 9
1 6
2 8
2 10
1 5
1 8
1 1
2 5Output-2346335269
-314847579
-476287915
-704889624
121155052
-1360041415
228601709
-2861484545NoteIn the first example:The initial tree is shown in the following picture:Theimportanceof the subtree of $$$6$$$ is $$$a_6+a_7=2$$$.After rotating theheavy sonof $$$3$$$ (which is $$$6$$$) up, the tree is shown in the following picture:Theimportanceof the subtree of $$$6$$$ is $$$a_6+a_3+a_7=3$$$.Theimportanceof the subtree of $$$2$$$ is $$$a_2+a_4+a_5=3$$$.



C. Li Hua and Chesstime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is an interactive problem.Li Ming and Li Hua are playing a game. Li Hua has a chessboard of size $$$n\times m$$$. Denote $$$(r, c)$$$ ($$$1\le r\le n, 1\le c\le m$$$) as the cell on the $$$r$$$-th row from the top and on the $$$c$$$-th column from the left. Li Ming put a king on the chessboard and Li Hua needs to guess its position.Li Hua can ask Li Mingno more than $$$3$$$questions. In each question, he can choose a cell and ask the minimum steps needed to move the king to the chosen cell. Each question is independent, which means the king doesn't actually move.A king can move from $$$(x,y)$$$ to $$$(x',y')$$$ if and only if $$$\max\{|x-x'|,|y-y'|\}=1$$$ (shown in the following picture).The position of the king is chosenbeforethe interaction.Suppose you were Li Hua, please solve this problem.InteractionThe first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 10^3$$$).The first line of each test case contains two integers $$$n,m$$$ ($$$1\le n,m\le 10^9$$$) — the size of the chessboard, and then the interaction begins.To ask a question, print "?$$$r$$$ $$$c$$$" (without quotes, $$$1 \leq r \leq n, 1 \leq c \leq m$$$). Then you should input the response from standard input — the minimum steps the king needs to move to the chosen cell.If your program has asked an invalid question or has run out of questions, the interactor will terminate immediately and your program will get a verdictWrong answer.To give the final answer, print "!$$$r$$$ $$$c$$$" (without the quotes, $$$(r,c)$$$ is the king's initial coordinate). Note that giving this answer is not counted towards the limit of $$$3$$$ questions.After asking a question do not forget to output the end of line and flush the output. Otherwise, you will getIdleness limit exceeded. To do this, use:fflush(stdout)orcout.flush()in C++;System.out.flush()in Java;flush(output)in Pascal;stdout.flush()in Python;see the documentation for other languages.HacksTo hack, use the following format.The first line should contain a single integer $$$t$$$ ($$$1 \le t \le 10^3$$$).The first and only line of each test case should contain four integers $$$n,m,r,c$$$ ($$$1\le r\le n\le 10^9,1\le c\le m\le 10^9$$$).ExampleInput2
3 4

1

2

5 3

3

1

2Output? 2 3

? 2 4

! 2 2

? 2 2

? 5 2

? 5 3

! 5 1NoteIn test case 1, the king is at $$$(2,2)$$$. It takes $$$1$$$ step to move to $$$(2,3)$$$ and $$$2$$$ steps to move to $$$(2,4)$$$.Note that the questions may not seem sensible. They are just a sample of questions you may ask.



B. Li Hua and Patterntime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputLi Hua has a pattern of size $$$n\times n$$$, each cell is either blue or red. He can performexactly $$$k$$$operations. In each operation, he chooses a cell and changes its color from red to blue or from blue to red. Each cell can be chosen as many times as he wants. Is it possible to make the pattern, that matches its rotation by $$$180^{\circ}$$$?Suppose you were Li Hua, please solve this problem.InputThe first line contains the single integer $$$t$$$ ($$$1 \le t \le 100$$$) — the number of test cases.The first line of each test case contains two integers $$$n,k$$$ ($$$1\le n\le 10^3,0\le k \le 10^9$$$) — the size of the pattern and the number of operations.Each of next $$$n$$$ lines contains $$$n$$$ integers $$$a_{i,j}$$$ ($$$a_{i,j}\in\{0,1\}$$$) — the initial color of the cell, $$$0$$$ for blue and $$$1$$$ for red.It's guaranteed that sum of $$$n$$$ over all test cases does not exceed $$$10^3$$$.OutputFor each set of input, print "YES" if it's possible to make the pattern, that matches its rotation by $$$180^{\circ}$$$ after applying exactly $$$k$$$ of operations, and "NO" otherwise.You can output the answer in any case (upper or lower). For example, the strings "yEs", "yes", "Yes", and "YES" will be recognized as positive responses.ExampleInput34 01 1 1 10 0 0 11 0 1 01 1 1 14 31 0 1 11 0 0 00 1 0 11 1 0 15 40 0 0 0 00 1 1 1 10 1 0 0 01 1 1 1 10 0 0 0 0OutputNO
YES
YESNoteIn test case 1, you can't perform any operation. The pattern after rotation is on the right.In test case 2, you can perform operations on $$$(2,1),(3,2),(3,4)$$$. The pattern after operations is in the middle and the pattern after rotation is on the right.



A. Li Hua and Mazetime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere is a rectangular maze of size $$$n\times m$$$. Denote $$$(r,c)$$$ as the cell on the $$$r$$$-th row from the top and the $$$c$$$-th column from the left. Two cells areadjacentif they share an edge. Apathis a sequence ofadjacentempty cells.Each cell is initially empty. Li Hua can choose some cells (except $$$(x_1, y_1)$$$ and $$$(x_2, y_2)$$$) and place an obstacle in each of them. He wants to know the minimum number of obstacles needed to be placed so that there isn't apathfrom $$$(x_1, y_1)$$$ to $$$(x_2, y_2)$$$.Suppose you were Li Hua, please solve this problem.InputThe first line contains the single integer $$$t$$$ ($$$1 \le t \le 500$$$) — the number of test cases.The first line of each test case contains two integers $$$n,m$$$ ($$$4\le n,m\le 10^9$$$) — the size of the maze.The second line of each test case contains four integers $$$x_1,y_1,x_2,y_2$$$ ($$$1\le x_1,x_2\le n, 1\le y_1,y_2\le m$$$) — the coordinates of the start and the end.It is guaranteed that $$$|x_1-x_2|+|y_1-y_2|\ge 2$$$.OutputFor each test case print the minimum number of obstacles you need to put on the field so that there is nopathfrom $$$(x_1, y_1)$$$ to $$$(x_2, y_2)$$$.ExampleInput34 42 2 3 36 71 1 2 39 95 1 3 6Output4
2
3NoteIn test case 1, you can put obstacles on $$$(1,3), (2,3), (3,2), (4,2)$$$. Then the path from $$$(2,2)$$$ to $$$(3,3)$$$ will not exist.



F. Strange Triplestime limit per test10 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputLet's call a triple of positive integers ($$$a, b, n$$$)strangeif the equality $$$\frac{an}{nb} = \frac{a}{b}$$$ holds, where $$$an$$$ is the concatenation of $$$a$$$ and $$$n$$$ and $$$nb$$$ is the concatenation of $$$n$$$ and $$$b$$$. For the purpose of concatenation, the integers are considered without leading zeroes.For example, if $$$a = 1$$$, $$$b = 5$$$ and $$$n = 9$$$, then the triple is strange, because $$$\frac{19}{95} = \frac{1}{5}$$$. But $$$a = 7$$$, $$$b = 3$$$ and $$$n = 11$$$ is not strange, because $$$\frac{711}{113} \ne \frac{7}{3}$$$.You are given three integers $$$A$$$, $$$B$$$ and $$$N$$$. Calculate the number of strange triples $$$(a, b, n$$$), such that $$$1 \le a < A$$$, $$$1 \le b < B$$$ and $$$1 \le n < N$$$.InputThe only line contains three integers $$$A$$$, $$$B$$$ and $$$N$$$ ($$$1 \le A, B \le 10^5$$$; $$$1 \le N \le 10^9$$$).OutputPrint one integer — the number of strange triples $$$(a, b, n$$$) such that $$$1 \le a < A$$$, $$$1 \le b < B$$$ and $$$1 \le n < N$$$.ExamplesInput5 6 10Output7Input10 10 100Output29Input1 10 25Output0Input4242 6969 133333337Output19536Input94841 47471 581818184Output98715NoteIn the first example, there are $$$7$$$ strange triples: $$$(1, 1, 1$$$), ($$$1, 4, 6$$$), ($$$1, 5, 9$$$), ($$$2, 2, 2$$$), ($$$2, 5, 6$$$), ($$$3, 3, 3$$$) and ($$$4, 4, 4$$$).



E. Colored Subgraphstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputMonocarp has a tree, consisting of $$$n$$$ vertices.He is going to select some vertex $$$r$$$ and perform the following operations on each vertex $$$v$$$ from $$$1$$$ to $$$n$$$:set $$$d_v$$$ equal to the distance from $$$v$$$ to $$$r$$$ (the number of edges on the shortest path);color $$$v$$$ some color.Anicecoloring satisfies two conditions:for each pair of vertices of the same color $$$(v, u)$$$, there exists a path from $$$v$$$ to $$$u$$$ that only visits vertices of the same color;for each pair of vertices of the same color $$$(v, u)$$$, $$$d_v \neq d_u$$$.Note that Monocarp can choose any amount of different colors he wants to use.For each used color, he then counts the number of vertices of this color. Thecostof the tree is the minimum of these numbers.What can be the maximum cost of the tree?InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of testcases.The first line of each testcase contains a single integer $$$n$$$ ($$$3 \le n \le 2 \cdot 10^5$$$) — the number of vertices in the tree.Each of the next $$$n-1$$$ lines contains two integers $$$v$$$ and $$$u$$$ ($$$1 \le v, u \le n$$$) — the description of an edge.The given edges form a tree. The sum of $$$n$$$ over all testcases doesn't exceed $$$2 \cdot 10^5$$$.OutputFor each testcase print a single integer — the maximum possible cost of the tree.ExampleInput441 22 33 451 21 31 41 531 33 273 22 57 53 11 61 4Output4
1
3
3



D. Maximum Subarraytime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou are given an array $$$a_1, a_2, \dots, a_n$$$, consisting of $$$n$$$ integers. You are also given two integers $$$k$$$ and $$$x$$$.You have to perform the following operation exactly once: add $$$x$$$ to the elements onexactly$$$k$$$distinctpositions, and subtract $$$x$$$ from all the others.For example, if $$$a = [2, -1, 2, 3]$$$, $$$k = 1$$$, $$$x = 2$$$, and we have picked the first element, then after the operation the array $$$a = [4, -3, 0, 1]$$$.Let $$$f(a)$$$ be the maximum possible sum of a subarray of $$$a$$$. The subarray of $$$a$$$ is a contiguous part of the array $$$a$$$, i. e. the array $$$a_i, a_{i + 1}, \dots, a_j$$$ for some $$$1 \le i \le j \le n$$$. An empty subarray should also be considered, it has sum $$$0$$$.Let the array $$$a'$$$ be the array $$$a$$$ after applying the aforementioned operation. Apply the operation in such a way that $$$f(a')$$$ is the maximum possible, and print the maximum possible value of $$$f(a')$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The first line of each test case contains three integers $$$n$$$, $$$k$$$ and $$$x$$$ ($$$1 \le n \le 2 \cdot 10^5$$$; $$$0 \le k \le \min(20, n)$$$; $$$-10^9 \le x \le 10^9$$$).The second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$-10^9 \le a_i \le 10^9$$$).The sum of $$$n$$$ over all test cases doesn't exceed $$$2 \cdot 10^5$$$.OutputFor each test case, print one integer — the maximum possible value of $$$f(a')$$$.ExampleInput44 1 22 -1 2 32 2 3-1 23 0 53 2 46 2 -84 -1 9 -3 7 -8Output5
7
0
44



C. Maximum Settime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputA set of positive integers $$$S$$$ is called beautiful if, for every two integers $$$x$$$ and $$$y$$$ from this set, either $$$x$$$ divides $$$y$$$ or $$$y$$$ divides $$$x$$$ (or both).You are given two integers $$$l$$$ and $$$r$$$. Consider all beautiful sets consisting of integers not less than $$$l$$$ and not greater than $$$r$$$. You have to print two numbers:the maximum possible size of a beautiful set where all elements are from $$$l$$$ to $$$r$$$;the number of beautiful sets consisting of integers from $$$l$$$ to $$$r$$$ with the maximum possible size.Since the second number can be very large, print it modulo $$$998244353$$$.InputThe first line contains one integer $$$t$$$ ($$$1 \le t \le 2 \cdot 10^4$$$) — the number of test cases.Each test case consists of one line containing two integers $$$l$$$ and $$$r$$$ ($$$1 \le l \le r \le 10^6$$$).OutputFor each test case, print two integers — the maximum possible size of a beautiful set consisting of integers from $$$l$$$ to $$$r$$$, and the number of such sets with maximum possible size. Since the second number can be very large, print it modulo $$$998244353$$$.ExampleInput43 1113 371 224 100Output2 4
2 6
5 1
5 7NoteIn the first test case, the maximum possible size of a beautiful set with integers from $$$3$$$ to $$$11$$$ is $$$2$$$. There are $$$4$$$ such sets which have the maximum possible size:$$$\{ 3, 6 \}$$$;$$$\{ 3, 9 \}$$$;$$$\{ 4, 8 \}$$$;$$$\{ 5, 10 \}$$$.



B. Asterisk-Minor Templatetime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given two strings $$$a$$$ and $$$b$$$, consisting of lowercase Latin letters.A template $$$t$$$ is string, consisting of lowercase Latin letters and asterisks (character '*'). A template is calledasterisk-minorif the number of asterisks in it is less than or equal to the number of letters in it.A string $$$s$$$ is said to be matching a template $$$t$$$ if you can replace each asterisk in $$$t$$$ with a string of lowercase Latin letters (possibly, an empty string) so that it becomes equal to $$$s$$$.Find anasterisk-minortemplate such that both $$$a$$$ and $$$b$$$ match it, or report that such a template doesn't exist. If there are multiple answers, print any of them.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of testcases.The first line of each testcase contains a string $$$a$$$ ($$$1 \le |a| \le 50$$$, where $$$|a|$$$ is the length of $$$a$$$), consisting of lowercase Latin letters.The second line contains a string $$$b$$$ ($$$1 \le |b| \le 50$$$), consisting of lowercase Latin letters.OutputFor each testcase, output "NO", if there doesn't exist anasterisk-minortemplate that both $$$a$$$ and $$$b$$$ match. Otherwise, print "YES" in the first line and the template in the second line. If there are multiple answers, print any of them.A template should consist only of lowercase Latin letters and asterisks (character '*'). The number of asterisks should be less than or equal to the number of letters.ExampleInput6aaabzzzbcodeforcesatcodercodeforcestokitlxaaaaaaaaaaabcdabcdcfOutputYES
*b
YES
*co*
NO
YES
a*a*a*a
YES
abcd
NONoteIn the first testcase, for a template "*b", you can replace the only asterisk with "aaa" to get "aaab" (which is equal to $$$a$$$) or with "zzz" to get "zzzb" (which is equal to $$$b$$$).In the third testcase, a template "*o*" is notasterisk-minor, as it contains more asterisks than letters. There are noasterisk-minortemplates that both $$$a$$$ and $$$b$$$ match.In the fourth testcase, for a template "a*a*a*a", you can replace all asterisks with empty strings to get "aaaa" (which is equal to $$$a$$$) or two of them with "a" and two of them with an empty string to get "aaaaaa" (which is equal to $$$b$$$).In the fifth testcase, there are no asterisks in a template "abcd", so only "abcd" can match it (which is coincidentally both $$$a$$$ and $$$b$$$).



A. Typical Interview Problemtime limit per test2 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputThe FB-string is formed as follows. Initially, it is empty. We go through all positive integers, starting from $$$1$$$, in ascending order, and do the following for each integer:if the current integer is divisible by $$$3$$$, appendFto the end of the FB-string;if the current integer is divisible by $$$5$$$, appendBto the end of the FB-string.Note that if an integer is divisible by both $$$3$$$ and $$$5$$$, we appendF, and thenB, not in the opposite order.The first $$$10$$$ characters of the FB-string areFBFFBFFBFB: the firstFcomes from the integer $$$3$$$, the next character (B) comes from $$$5$$$, the nextFcomes from the integer $$$6$$$, and so on. It's easy to see that this string is infinitely long. Let $$$f_i$$$ be the $$$i$$$-th character of FB-string; so, $$$f_1$$$ isF, $$$f_2$$$ isB, $$$f_3$$$ isF, $$$f_4$$$ isF, and so on.You are given a string $$$s$$$, consisting of charactersFand/orB. You have to determine whether it is a substring (contiguous subsequence) of the FB-string. In other words, determine if it is possible to choose two integers $$$l$$$ and $$$r$$$ ($$$1 \le l \le r$$$) so that the string $$$f_l f_{l+1} f_{l+2} \dots f_r$$$ is exactly $$$s$$$.For example:FFBis a substring of the FB-string: if we pick $$$l = 3$$$ and $$$r = 5$$$, the string $$$f_3 f_4 f_5$$$ is exactlyFFB;BFFBFFBFis a substring of the FB-string: if we pick $$$l = 2$$$ and $$$r = 9$$$, the string $$$f_2 f_3 f_4 \dots f_9$$$ is exactlyBFFBFFBF;BBBis not a substring of the FB-string.InputThe first line contains one integer $$$t$$$ ($$$1 \le t \le 2046$$$) — the number of test cases.Each test case consists of two lines. The first line contains one integer $$$k$$$ ($$$1 \le k \le 10$$$) — the number of characters in $$$s$$$. The second line contains $$$s$$$, which is a string of exactly $$$k$$$ characters. Each character of $$$s$$$ is eitherForB.OutputFor each test case, printYESif $$$s$$$ is a substring of the FB-string, orNOotherwise.You may print each letter in any case (YES,yes,Yeswill all be recognized as positive answer,NO,noandnOwill all be recognized as negative answer).ExampleInput33FFB8BFFBFFBF3BBBOutputYES
YES
NO



G. Removal Sequencestime limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a simple undirected graph, consisting of $$$n$$$ vertices and $$$m$$$ edges. The vertices are numbered from $$$1$$$ to $$$n$$$. The $$$i$$$-th vertex has a value $$$a_i$$$ written on it.You will be removing vertices from that graph. You are allowed to remove vertex $$$i$$$ only if its degree is equal to $$$a_i$$$. When a vertex is removed, all edges incident to it are also removed, thus, decreasing the degree of adjacent non-removed vertices.A valid sequence of removals is a permutation $$$p_1, p_2, \dots, p_n$$$ $$$(1 \le p_i \le n)$$$ such that the $$$i$$$-th vertex to be removed is $$$p_i$$$, and every removal is allowed.A pair $$$(x, y)$$$ of vertices isniceif there exist two valid sequences of removals such that $$$x$$$ is removed before $$$y$$$ in one of them and $$$y$$$ is removed before $$$x$$$ in the other one.Count the number ofnicepairs $$$(x, y)$$$ such that $$$x < y$$$.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of testcases.The first line of each testcase contains two integers $$$n$$$ and $$$m$$$ ($$$1 \le n \le 10^5$$$; $$$0 \le m \le \min(10^5, \frac{n \cdot (n - 1)}{2})$$$) — the number of vertices and the number of edges of the graph.The second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$0 \le a_i \le n - 1$$$) — the degree requirements for each removal.Each of the next $$$m$$$ lines contains two integers $$$v$$$ and $$$u$$$ ($$$1 \le v, u \le n$$$; $$$v \neq u$$$) — the description of an edge.The graph doesn't contain any self-loops or multiple edges.The sum of $$$n$$$ over all testcases doesn't exceed $$$10^5$$$. The sum of $$$m$$$ over all testcases doesn't exceed $$$10^5$$$.Additional constraint on the input: there always exists at least one valid sequence of removals.OutputFor each testcase, print a single integer — the number ofnicepairs of vertices.ExampleInput43 21 0 12 31 23 31 2 01 22 31 35 63 0 2 1 01 24 14 23 42 35 11 00Output1
0
4
0



F. Blocking Chipstime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a tree, consisting of $$$n$$$ vertices. There are $$$k$$$ chips, placed in vertices $$$a_1, a_2, \dots, a_k$$$. All $$$a_i$$$ are distinct. Vertices $$$a_1, a_2, \dots, a_k$$$ are colored black initially. The remaining vertices are white.You are going to play a game where you perform some moves (possibly, zero). On the $$$i$$$-th move ($$$1$$$-indexed) you are going to move the $$$((i - 1) \bmod k + 1)$$$-st chip from its current vertex to an adjacentwhitevertex and color that vertexblack. So, if $$$k=3$$$, you move chip $$$1$$$ on move $$$1$$$, chip $$$2$$$ on move $$$2$$$, chip $$$3$$$ on move $$$3$$$, chip $$$1$$$ on move $$$4$$$, chip $$$2$$$ on move $$$5$$$ and so on. If there is no adjacent white vertex, then the game ends.What's the maximum number of moves you can perform?InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of testcases.The first line of each testcase contains a single integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$) — the number of vertices of the tree.Each of the next $$$n - 1$$$ lines contains two integers $$$v$$$ and $$$u$$$ ($$$1 \le v, u \le n$$$) — the descriptions of the edges. The given edges form a tree.The next line contains a single integer $$$k$$$ ($$$1 \le k \le n$$$) — the number of chips.The next line contains $$$k$$$ integers $$$a_1, a_2, \dots, a_k$$$ ($$$1 \le a_i \le n$$$) — the vertices with the chips. All $$$a_i$$$ are distinct.The sum of $$$n$$$ over all testcases doesn't exceed $$$2 \cdot 10^5$$$.OutputFor each testcase, print a single integer — the maximum number of moves you can perform.ExampleInput551 22 33 44 51351 22 33 44 521 251 22 33 44 522 161 21 32 42 53 631 4 6111Output2
0
1
2
0



E. Explosions?time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are playing yet another game where you kill monsters using magic spells. There are $$$n$$$ cells in the row, numbered from $$$1$$$ to $$$n$$$. Initially, the $$$i$$$-th cell contains the $$$i$$$-th monster with $$$h_i$$$ health.You have a basic spell that costs $$$1$$$ MP and deals $$$1$$$ damage to the monster you choose. You can cast it any number of times. Also, you have a special scroll with "Explosion" spell you can use only once. You want to finish killing monsters with explosion, that's why you, firstly, cast the basic spell several times (possibly, zero), and then after that, you cast one "Explosion".How does "Explosion" spell work? Firstly, you choose the power of the spell: if you pour $$$x$$$ MP into it, "Explosion" will deal $$$x$$$ damage. Secondly, you choose some monster $$$i$$$, which will be targeted by the spell. That's what happens next:if itscurrenthealth $$$h_i > x$$$, then he stays alive with health decreased by $$$x$$$;if $$$h_i \le x$$$, the $$$i$$$-th monster dies with an explosion that deals $$$h_i - 1$$$ damage to monsters in the neighboring cells $$$i - 1$$$ and $$$i + 1$$$, if these cells exist and monsters inside are still alive;if the damage dealt by the explosion is enough to kill the monster $$$i - 1$$$ (or $$$i + 1$$$), i. e. the current $$$h_{i - 1} \le h_i - 1$$$ (or $$$h_{i + 1} \le h_i - 1$$$), then that monster also dies creating a secondary explosion of power $$$h_{i-1} - 1$$$ (or $$$h_{i+1} - 1$$$) that may deals damage to their neighbors, and so on, until the explosions end.Your goal is to kill all the remaining monsters with those "chaining" explosions, that's why you need a basic spell to decrease $$$h_i$$$ of some monsters or even kill them beforehand (monsters die when their current health $$$h_i$$$ becomes less or equal to zero). Note that monsters don't move between cells, so, for example, monsters $$$i$$$ and $$$i + 2$$$ will never become neighbors.What is the minimum total MP you need to kill all monsters in the way you want? The total MP is counted as the sum of the number of basic spells you cast and the power $$$x$$$ of explosion scroll you've chosen.InputThe first line contains one integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of test cases.The first line of each test case contains the single integer $$$n$$$ ($$$1 \le n \le 3 \cdot 10^5$$$) — the number of cells in the row, i. e. the number of monsters.The second line of each test case contains $$$n$$$ integers $$$h_1, h_2, \dots, h_n$$$ ($$$1 \le h_i \le 10^6$$$) — the initial health of the monsters.It's guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$3 \cdot 10^5$$$.OutputFor each test case, print one integer — the minimum total MP you need to kill all monsters by finishing them with explosion.ExampleInput531 1 144 1 2 145 10 15 1014291 2 3 2 2 2 3 2 1Output3
6
15
42
12NoteIn the first test case, you can, for example, use basic spell on monsters $$$1$$$ and $$$2$$$ (once per monster) to kill them. After that, you cast "Explosion" of power $$$x = 1$$$ on monster $$$3$$$ to kill it. The total MP you need is $$$2 + 1 = 3$$$.In the second test case, it's optimal to cast basic spell $$$4$$$ times onto monster $$$1$$$ to kill it. After that, you can cast "Explosion" of power $$$x = 2$$$ onto monster $$$3$$$. It dies, creating an explosion of power $$$1$$$ that kills monsters $$$2$$$ and $$$4$$$. The total MP you need is $$$4 + 2 = 6$$$.In the third test case, you cast "Explosion" of power $$$15$$$ onto monster $$$3$$$. Explosion of the $$$3$$$-rd monster (of power $$$14$$$) kills monsters $$$2$$$ and $$$4$$$. Secondary explosion of monster $$$2$$$ (of power $$$9$$$) kills monster $$$1$$$.



D. Triangle Coloringtime limit per test3 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputYou are given an undirected graph consisting of $$$n$$$ vertices and $$$n$$$ edges, where $$$n$$$ is divisible by $$$6$$$. Each edge has a weight, which is a positive (greater than zero) integer.The graph has the following structure: it is split into $$$\frac{n}{3}$$$ triples of vertices, the first triple consisting of vertices $$$1, 2, 3$$$, the second triple consisting of vertices $$$4, 5, 6$$$, and so on. Every pair of vertices from the same triple is connected by an edge. There are no edges between vertices from different triples.You have to paint the vertices of this graph into two colors, red and blue. Each vertex should have exactly one color, there should be exactly $$$\frac{n}{2}$$$ red vertices and $$$\frac{n}{2}$$$ blue vertices. The coloring is called valid if it meets these constraints.The weight of the coloring is the sum of weights of edges connecting two vertices with different colors.Let $$$W$$$ be the maximum possible weight of a valid coloring. Calculate the number of valid colorings with weight $$$W$$$, and print it modulo $$$998244353$$$.InputThe first line contains one integer $$$n$$$ ($$$6 \le n \le 3 \cdot 10^5$$$, $$$n$$$ is divisible by $$$6$$$).The second line contains $$$n$$$ integers $$$w_1, w_2, \dots, w_n$$$ ($$$1 \le w_i \le 1000$$$) — the weights of the edges. Edge $$$1$$$ connects vertices $$$1$$$ and $$$2$$$, edge $$$2$$$ connects vertices $$$1$$$ and $$$3$$$, edge $$$3$$$ connects vertices $$$2$$$ and $$$3$$$, edge $$$4$$$ connects vertices $$$4$$$ and $$$5$$$, edge $$$5$$$ connects vertices $$$4$$$ and $$$6$$$, edge $$$6$$$ connects vertices $$$5$$$ and $$$6$$$, and so on.OutputPrint one integer — the number of valid colorings with maximum possible weight, taken modulo $$$998244353$$$.ExamplesInput12
1 3 3 7 8 5 2 2 2 2 4 2Output36Input6
4 2 6 6 6 4Output2NoteThe following picture describes the graph from the first example test.The maximum possible weight of a valid coloring of this graph is $$$31$$$.



C. Tea Tastingtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputA tea manufacturer decided to conduct a massive tea tasting. $$$n$$$ sorts of tea will be tasted by $$$n$$$ tasters. Both the sorts of tea and the tasters are numbered from $$$1$$$ to $$$n$$$. The manufacturer prepared $$$a_i$$$ milliliters of the $$$i$$$-th sort of tea. The $$$j$$$-th taster can drink $$$b_j$$$ milliliters of tea at once.The tasting will be conducted in steps. During the first step, the $$$i$$$-th taster tastes the $$$i$$$-th sort of tea. The $$$i$$$-th taster drinks $$$\min(a_i, b_i)$$$ tea (how much is available of the $$$i$$$-th sort and how much the $$$i$$$-th taster can drink). $$$a_i$$$ also decreases by this amount.Then all tasters move to the previous sort of tea. Thus, during the second step, the $$$i$$$-th taster tastes the $$$(i-1)$$$-st sort of tea. The $$$i$$$-th taster drinks $$$\min(a_{i-1}, b_i)$$$ tea. The $$$1$$$-st person ends the tasting.During the third step, the $$$i$$$-th taster tastes the $$$(i-2)$$$-nd sort of tea. The $$$2$$$-nd taster ends the tasting. This goes on until everyone ends the tasting.Take a look at the tasting process for $$$n = 3$$$, $$$a = [10, 20, 15]$$$, $$$b = [9, 8, 6]$$$. In the left row, there are the current amounts of each sort of tea. In the right column, there are current amounts of tea each taster has drunk in total. The arrow tells which taster each tea goes to on the current step. The number on the arrow is the amount — minimum of how much is available of the sort of tea and how much the taster can drink.For each taster, print how many milliliters of tea he/she will drink in total.InputThe first line contains a single integer $$$t$$$ ($$$1 \le t \le 10^4$$$) — the number of testcases.The first line of each testcase contains a single integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$) — the number of sorts of tea and the number of tasters.The second line contains $$$n$$$ integers $$$a_1, a_2, \dots, a_n$$$ ($$$1 \le a_i \le 10^9$$$) — the amount of each sort of tea.The third line contains $$$n$$$ integers $$$b_1, b_2, \dots, b_n$$$ ($$$1 \le b_i \le 10^9$$$) — the amount of tea each taster can drink at once.The sum of $$$n$$$ over all testcases doesn't exceed $$$2 \cdot 10^5$$$.OutputFor each testcase, print $$$n$$$ integers — the $$$i$$$-th value should be equal to the total amount of tea the $$$i$$$-th taster will drink.ExampleInput4310 20 159 8 6157413 8 5 43 4 2 131000000000 1000000000 10000000001 1 1000000000Output9 9 12 
5 
3 8 6 4 
1 2 2999999997NoteThe first testcase is described in the statement. Here are the remaining amounts of each sort of teaaftereach step and the total amount of tea each taster has drunk:$$$a = [1, 12, 9]$$$, $$$\mathit{ans} = [9, 8, 6]$$$$$$a = [0, 6, 9]$$$, $$$\mathit{ans} = [9, 9, 12]$$$$$$a = [0, 6, 9]$$$, $$$\mathit{ans} = [9, 9, 12]$$$In the second testcase, the only taster drinks $$$\min(5, 7)$$$ milliliters of tea of the only sort.Here are the remaining amounts of each sort of teaaftereach step and the total amount of tea each taster has drunk for the third testcase:$$$a = [10, 4, 3, 3]$$$, $$$\mathit{ans} = [3, 4, 2, 1]$$$;$$$a = [6, 2, 2, 3]$$$, $$$\mathit{ans} = [3, 8, 4, 2]$$$;$$$a = [4, 1, 2, 3]$$$, $$$\mathit{ans} = [3, 8, 6, 3]$$$;$$$a = [3, 1, 2, 3]$$$, $$$\mathit{ans} = [3, 8, 6, 4]$$$.Here are the remaining amounts of each sort of teaaftereach step and the total amount of tea each taster has drunk for the fourth testcase:$$$a = [999999999, 999999999, 0]$$$, $$$\mathit{ans} = [1, 1, 1000000000]$$$;$$$a = [999999998, 0, 0]$$$, $$$\mathit{ans} = [1, 2, 1999999999]$$$;$$$a = [0, 0, 0]$$$, $$$\mathit{ans} = [1, 2, 2999999997]$$$.



B. Ideal Pointtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given $$$n$$$ one-dimensional segments (each segment is denoted by two integers — its endpoints).Let's define the function $$$f(x)$$$ as the number of segments covering point $$$x$$$ (a segment covers the point $$$x$$$ if $$$l \le x \le r$$$, where $$$l$$$ is the left endpoint and $$$r$$$ is the right endpoint of the segment).An integer point $$$x$$$ is calledidealif it belongs to more segments than any other integer point, i. e. $$$f(y) < f(x)$$$ is true for any other integer point $$$y$$$.You are given an integer $$$k$$$. Your task is to determine whether it is possible to remove some (possibly zero) segments, so that the given point $$$k$$$ becomesideal.InputThe first line contains one integer $$$t$$$ ($$$1 \le t \le 1000$$$) — the number of test cases.The first line of each test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \le n, k \le 50$$$).Then $$$n$$$ lines follow, $$$i$$$-th line of them contains two integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \le l_i, r_i \le 50$$$; $$$l_i \le r_i$$$) — the endpoints of the $$$i$$$-th segment.OutputFor each test case, printYESif it is possible to remove some (possibly zero) segments, so that the given point $$$k$$$ becomesideal, otherwise printNO.You may print each letter in any case (YES,yes,Yeswill all be recognized as positive answer,NO,noandnOwill all be recognized as negative answer).ExampleInput44 31 37 92 53 62 91 43 71 32 43 51 46 75 5OutputYES
NO
NO
YESNoteIn the first example, the point $$$3$$$ is already ideal (it is covered by three segments), so you don't have to delete anything.In the fourth example, you can delete everything except the segment $$$[5, 5]$$$.



A. Two Towerstime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThere are two towers consisting of blocks of two colors: red and blue. Both towers are represented by strings of charactersBand/orRdenoting the order of blocks in themfrom the bottom to the top, whereBcorresponds to a blue block, andRcorresponds to a red block.These two towers are represented by stringsBRBBandRBR.You can perform the following operation any number of times: choose a tower withat least two blocks, and move itstopblock to thetopof the other tower.The pair of towers isbeautifulif no pair of touching blocks has the same color; i. e. no red block stands on top of another red block, and no blue block stands on top of another blue block.You have to check if it is possible to perform any number of operations (possibly zero) to make the pair of towers beautiful.InputThe first line contains one integer $$$t$$$ ($$$1 \le t \le 1000$$$) — the number of test cases.Each test case consists of three lines:the first line contains two integers $$$n$$$ and $$$m$$$ ($$$1 \le n, m \le 20$$$) — the number of blocks in the first tower and the number of blocks in the second tower, respectively;the second line contains $$$s$$$ — a string of exactly $$$n$$$ charactersBand/orR, denoting the first tower;the third line contains $$$t$$$ — a string of exactly $$$m$$$ charactersBand/orR, denoting the second tower.OutputFor each test case, printYESif it is possible to perform several (possibly zero) operations in such a way that the pair of towers becomes beautiful; otherwise printNO.You may print each letter in any case (YES,yes,Yeswill all be recognized as positive answer,NO,noandnOwill all be recognized as negative answer).ExampleInput44 3BRBBRBR4 7BRBRRRBRBRB3 4RBRBRBR5 4BRBRRBRBROutputYES
YES
YES
NONoteIn the first test case, you can move the top block from the first tower to the second tower (see the third picture).In the second test case, you can move the top block from the second tower to the first tower $$$6$$$ times.In the third test case, the pair of towers is already beautiful.



E. Labeling the Tree with Distancestime limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an unweighted tree of $$$n$$$ vertices numbered from $$$1$$$ to $$$n$$$ and a list of $$$n-1$$$ integers $$$a_1, a_2, \ldots, a_{n-1}$$$. A tree is a connected undirected graph without cycles. You will use each element of the list to label one vertex. No vertex should be labeled twice. You can label the only remaining unlabeled vertex with any integer.A vertex $$$x$$$ is calledgoodif it is possible to do this labeling so that for each vertex $$$i$$$, its label is the distance between $$$x$$$ and $$$i$$$. The distance between two vertices $$$s$$$ and $$$t$$$ on a tree is the minimum number of edges on a path that starts at vertex $$$s$$$ and ends at vertex $$$t$$$.Find all good vertices.InputThe first line contains one integer $$$n$$$ ($$$2\le n\le 2\cdot 10^5$$$) — the number of vertices in the tree.The second line contains $$$n - 1$$$ integers $$$a_1,a_2,\ldots,a_{n-1}$$$ ($$$0\le a_i < n$$$) — the given list.Then, $$$n−1$$$ lines follow. Each of them contains two integers $$$u$$$ and $$$v$$$ ($$$1\le u,v\le n$$$) denoting an edge between vertices $$$u$$$ and $$$v$$$. It is guaranteed that the edges form a tree.OutputIn the first line print the number of good vertices.In the second line, print the indices of all good verticesin ascending order.ExamplesInput6
2 1 0 1 2
1 2
2 3
2 4
4 5
4 6Output2
2 4Input5
1 2 1 2
1 2
3 2
3 4
5 4Output1
3Input3
2 2
1 2
2 3Output0NoteThis is the tree for the first example:And these are two possible labelings with the elements on the list so that $$$2$$$ is a good vertex (left) and $$$4$$$ is a good vertex (right).The square below each vertex represents its label. The black squares contain the numbers which were on the given list and the only white square contains the only number which was not on the given list.In the second example, the only good vertex is vertex $$$3$$$.In the third example, there are no good vertices.



D. Counting Factorizationstime limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe prime factorization of a positive integer $$$m$$$ is the unique way to write it as $$$\displaystyle m=p_1^{e_1}\cdot p_2^{e_2}\cdot \ldots \cdot p_k^{e_k}$$$, where $$$p_1, p_2, \ldots, p_k$$$ are prime numbers, $$$p_1 < p_2 < \ldots < p_k$$$ and $$$e_1, e_2, \ldots, e_k$$$ are positive integers.For each positive integer $$$m$$$, $$$f(m)$$$ is defined as the multiset of all numbers in its prime factorization, that is $$$f(m)=\{p_1,e_1,p_2,e_2,\ldots,p_k,e_k\}$$$.For example, $$$f(24)=\{2,3,3,1\}$$$, $$$f(5)=\{1,5\}$$$ and $$$f(1)=\{\}$$$.You are given a list consisting of $$$2n$$$ integers $$$a_1, a_2, \ldots, a_{2n}$$$. Count how many positive integers $$$m$$$ satisfy that $$$f(m)=\{a_1, a_2, \ldots, a_{2n}\}$$$. Since this value may be large, print it modulo $$$998\,244\,353$$$.InputThe first line contains one integer $$$n$$$ ($$$1\le n \le 2022$$$).The second line contains $$$2n$$$ integers $$$a_1, a_2, \ldots, a_{2n}$$$ ($$$1\le a_i\le 10^6$$$)  — the given list.OutputPrint one integer, the number of positive integers $$$m$$$ satisfying $$$f(m)=\{a_1, a_2, \ldots, a_{2n}\}$$$ modulo $$$998\,244\,353$$$.ExamplesInput2
1 3 2 3Output2Input2
2 2 3 5Output5Input1
1 4Output0NoteIn the first sample, the two values of $$$m$$$ such that $$$f(m)=\{1,2,3,3\}$$$ are $$$m=24$$$ and $$$m=54$$$. Their prime factorizations are $$$24=2^3\cdot 3^1$$$ and $$$54=2^1\cdot 3^3$$$.In the second sample, the five values of $$$m$$$ such that $$$f(m)=\{2,2,3,5\}$$$ are $$$200, 225, 288, 500$$$ and $$$972$$$.In the third sample, there is no value of $$$m$$$ such that $$$f(m)=\{1,4\}$$$. Neither $$$1^4$$$ nor $$$4^1$$$ are prime factorizations because $$$1$$$ and $$$4$$$ arenotprimes.



C. Scoring Subsequencestime limit per test2.5 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThescoreof a sequence $$$[s_1, s_2, \ldots, s_d]$$$ is defined as $$$\displaystyle \frac{s_1\cdot s_2\cdot \ldots \cdot s_d}{d!}$$$, where $$$d!=1\cdot 2\cdot \ldots \cdot d$$$. In particular, the score of an empty sequence is $$$1$$$.For a sequence $$$[s_1, s_2, \ldots, s_d]$$$, let $$$m$$$ be the maximum score among all its subsequences. Itscostis defined as the maximum length of a subsequence with a score of $$$m$$$.You are given anon-decreasingsequence $$$[a_1, a_2, \ldots, a_n]$$$ of integers of length $$$n$$$. In other words, the condition $$$a_1 \leq a_2 \leq \ldots \leq a_n$$$ is satisfied. For each $$$k=1, 2, \ldots , n$$$, find the cost of the sequence $$$[a_1, a_2, \ldots , a_k]$$$.A sequence $$$x$$$ is a subsequence of a sequence $$$y$$$ if $$$x$$$ can be obtained from $$$y$$$ by deletion of several (possibly, zero or all) elements.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 10^4$$$). The description of the test cases follows.The first line of each test case contains an integer $$$n$$$ ($$$1\le n\le 10^5$$$) — the length of the given sequence.The second line of each test case contains $$$n$$$ integers $$$a_1,a_2,\ldots,a_n$$$ ($$$1\le a_i\leq n$$$) — the given sequence. It is guaranteed that its elements are in non-decreasing order.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5\cdot 10^5$$$.OutputFor each test case, output $$$n$$$ integers — the costs of sequences $$$[a_1, a_2, \ldots , a_k]$$$ in ascending order of $$$k$$$.ExampleInput331 2 321 155 5 5 5 5Output1 1 2 
1 1 
1 2 3 4 5NoteIn the first test case:The maximum score among the subsequences of $$$[1]$$$ is $$$1$$$. The subsequences $$$[1]$$$ and $$$[]$$$ (the empty sequence) are the only ones with this score. Thus, the cost of $$$[1]$$$ is $$$1$$$.The maximum score among the subsequences of $$$[1, 2]$$$ is $$$2$$$. The only subsequence with this score is $$$[2]$$$. Thus, the cost of $$$[1, 2]$$$ is $$$1$$$.The maximum score among the subsequences of $$$[1, 2, 3]$$$ is $$$3$$$. The subsequences $$$[2, 3]$$$ and $$$[3]$$$ are the only ones with this score. Thus, the cost of $$$[1, 2, 3]$$$ is $$$2$$$.Therefore, the answer to this case is $$$1\:\:1\:\:2$$$, which are the costs of $$$[1], [1, 2]$$$ and $$$[1, 2, 3]$$$ in this order.



B. Not Dividingtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given an array of $$$n$$$ positive integers $$$a_1, a_2, \ldots, a_n$$$. In one operation, you can choose any number of the array and add $$$1$$$ to it.Make at most $$$2n$$$ operations so that the array satisfies the following property: $$$a_{i+1}$$$ isnotdivisible by $$$a_i$$$, for each $$$i = 1, 2, \ldots, n-1$$$.You donotneed to minimize the number of operations.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 10^4$$$). The description of the test cases follows.The first line of each test case contains an integer $$$n$$$ ($$$1\le n\le 10^4$$$) — the length of the given array.The second line of each test case contains $$$n$$$ integers $$$a_1,a_2,\ldots,a_n$$$ ($$$1\le a_i\leq 10^9$$$) — the given array.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$5\cdot 10^4$$$.OutputFor each test case, print the answer on a separate line.In the only line, print $$$n$$$ integers — the resulting array $$$a$$$ after applying at most $$$2n$$$ operations.We can show that an answer always exists under the given constraints. If there are multiple answers, print any of them.ExampleInput342 4 3 631 2 324 2Output4 5 6 7
3 2 3
4 2NoteIn the first test case, the array $$$[4, 5, 6, 7]$$$ can be achieved by applying $$$2$$$ operations to the first element, $$$1$$$ operation to the second element, $$$3$$$ operations to the third element, and $$$1$$$ operation to the last element. The total number of operations performed is $$$7$$$, which is less than the allowed $$$8$$$ operations in this case.In the second test case, the array $$$[3, 2, 3]$$$ can be achieved by applying two operations to the first element. Another possible resulting array could be $$$[2, 3, 5]$$$, because the total number of operations doesnotneed to be minimum.In the third test case, not applying any operations results in an array that satisfies the statement's property. Observe that it is not mandatory to make operations.



A. Prefix and Suffix Arraytime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputMarcos loves strings a lot, so he has a favorite string $$$s$$$ consisting of lowercase English letters. For this string, he wrote down all its non-empty prefixes and suffixes (except for $$$s$$$) on a piece of paper in arbitrary order. You see all these strings and wonder if Marcos' favorite string is a palindrome or not. So, your task is to decide whether $$$s$$$ is a palindrome by just looking at the piece of paper.A string $$$a$$$ is a prefix of a string $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) characters from the end.A string $$$a$$$ is a suffix of a string $$$b$$$ if $$$a$$$ can be obtained from $$$b$$$ by deletion of several (possibly, zero or all) characters from the beginning.A palindrome is a string that reads the same backward as forward, for example, strings "gg", "ioi", "abba", "icpci" are palindromes, but strings "codeforces", "abcd", "alt" are not.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \le t \le 120$$$) — the number of test cases. The description of test cases follows.The first line of each test case contains a single integer $$$n$$$ ($$$2\le n \le 20$$$) — the length of the string $$$s$$$.The second line of each test case contains $$$2n-2$$$ strings $$$a_1, a_2, \cdots, a_{2n-2}$$$ — all non-empty prefixes and suffixes of $$$s$$$, not including itself, in arbitrary order.It is guaranteed that these strings are all the non-empty prefixes and suffixes of some string consisting of lowercase English letters.OutputFor each test case, output "YES" if $$$s$$$ is a palindrome, and "NO" otherwise.You can output the answer in any case (upper or lower). For example, the strings "yEs", "yes", "Yes", and "YES" will be recognized as positive responses.ExampleInput54bcd cd a d abc ab3i io i oi2g g3t al lt a4bba a ab a abb baOutputNO
YES
YES
NO
YESNoteIn the first test case, $$$s$$$ is "abcd". Its prefixes are "a", "ab" and "abc", and its suffixes are "d", "cd" and "bcd". As the string "abcd" is not a palindrome, the answer isNO.In the second test case, $$$s$$$ is "ioi". Its prefixes are "i" and "io", and its suffixes are "i" and "oi". As the string "ioi" is a palindrome, the answer isYES.In the third test case, $$$s$$$ is "gg" which is a palindrome.In the fourth test case, $$$s$$$ is "alt" which is not a palindrome.



F. Rebrendingtime limit per test4 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputKostya and Zhenya — the creators of the band "Paper" — after the release of the legendary album decided to create a new band "Day movers", for this they need to find two new people.They invited $$$n$$$ people to the casting. The casting will last $$$q$$$ days. On the $$$i$$$th of the days, Kostya and Zhenya want to find two people on the segment from $$$l_i$$$ to $$$r_i$$$ who are most suitable for their band. Since "Day movers" are doing a modern art, musical skills are not important to them and they look only at other signs: they want the height difference between two people to be as small as possible.Help them, and for each day, find the minimum difference in the growth of people from the casting on this segment!InputIn the first line you are given two integers $$$n$$$ and $$$q$$$ ($$$2 \leq n \leq 3 \cdot 10^5, 1 \leq q \leq 10^6$$$) — the number of people who came to the casting and the number of casting days.In the second line, you are given $$$n$$$ integers $$$a_1, a_2, a_3, \ldots, a_n$$$ ($$$1 \leq a_i \leq n$$$) — the growth of each of the candidates.It is also guaranteed that all $$$a_i$$$are different.The following $$$q$$$ lines each contains two integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \leq l_i < r_i \leq n$$$) — a segment of people on the $$$i$$$th day of casting.OutputOutput $$$q$$$ lines. In the $$$i$$$-th line there should be a minimum height difference between the two candidates on the segment on the $$$i$$$-th day of casting.ExamplesInput3 31 3 21 22 31 3Output2
1
1Input5 34 1 5 3 21 23 42 4Output3
2
2Input7 42 6 1 7 3 5 44 61 23 61 3Output2
4
2
1NoteIn the first example, the minimum difference on the segment $$$[1, 2]$$$ is $$$2$$$, on the segment $$$[2, 3]$$$ — $$$1$$$, on the segment $$$[1, 3]$$$ is also $$$1$$$.In the third example, the numbers with the minimum difference on the segment $$$[4, 6]$$$ are $$$3$$$ and $$$5$$$ ($$$5 - 3 = 2$$$). On the segment $$$[1, 2]$$$, the numbers with the minimum difference are $$$2$$$ and $$$6$$$ ($$$6 - 2 = 4$$$). On the segment $$$[3, 6]$$$, the numbers with the minimum difference are $$$1$$$ and $$$3$$$ ($$$3 - 1 = 2$$$). On the segment $$$[1, 3]$$$, the minimum difference is formed by the numbers $$$1$$$ and $$$2$$$ ($$$2 - 1 = 1$$$).



E. Velepin and Marketingtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe famous writer Velepin is very productive. Recently, he signed a contract with a well-known publication and now he needs to write $$$k_i$$$ books for $$$i$$$-th year. This is not a problem for him at all, he can write as much as he wants about samurai, space, emptiness, insects and werewolves.He has $$$n$$$ regular readers, each of whom in the $$$i$$$-th year will read one of the $$$k_i$$$ books published by Velepin. Readers are very fond of discussing books, so the $$$j$$$-th of them will be satisfied within a year if at least $$$a_j$$$ persons read the same book as him (including himself).Velepin has obvious problems with marketing, so he turned to you! A well-known book reading service can control what each of Velepin's regular readers will read, but he does not want books to be wasted, sosomeone should read each book. And so they turned to you with a request to tell you what the maximum number of regular readers can be made satisfied during each of the years, if you can choose each person the book he will read.InputThe first line contains a single integer $$$n$$$ $$$(2 \le n \le 3 \cdot 10^5)$$$ — the number of regular readers of Velepin.The second line contains $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ $$$(1 \le a_i \le n)$$$ — the number of necessary readers of the same book for the happiness of the $$$i$$$-th person.The third line contains a single integer $$$q$$$ $$$(1 \le q \le 3 \cdot 10^5)$$$ — the number of years to analyze.Each of the following $$$q$$$ lines contains a single integer $$$k_j$$$ $$$(2 \le k_j \le n)$$$ — the number of books that Velepin must write in $$$j$$$-th a year.OutputPrint $$$q$$$ lines, each of them has exactly one number — the maximum number of people who can be satisfied in $$$j$$$-th a year if Velepin releases $$$k_j$$$ books.ExamplesInput5
1 2 2 2 2
3
2
3
4Output5
5
3Input6
1 2 3 4 5 6
2
2
3Output5
4Input6
4 4 1 4 4 4
3
2
3
4Output6
5
1NoteIn the first example, in the first year, the optimal division is $$$1, 2, 2, 2, 2$$$ (the first book is read by the first person, and everyone else reads the second). In the second year, the optimal solution is $$$1, 2, 2, 3, 3$$$ (the first book is read by the first person, the second book is read by the second and third person, and all the others read the third book). In the third year, the optimal split will be $$$1, 2, 3, 4, 2$$$. Accordingly, the number of satisfied people over the years will be $$$5, 5, 3$$$.In the second example, in the first year, the optimal division is $$$1, 1, 1, 1, 1, 2$$$, then everyone will be happy except the $$$6$$$-th person. In the second year, the optimal division is $$$1, 1, 1, 1, 2, 3$$$, then everyone will be happy except the $$$5$$$-th and $$$6$$$-th person.



D. Moscow Gorillastime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputIn winter, the inhabitants of the Moscow Zoo are very bored, in particular, it concerns gorillas. You decided to entertain them and brought a permutation $$$p$$$ of length $$$n$$$ to the zoo.A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in any order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ occurs twice in the array) and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$, but $$$4$$$ is present in the array).The gorillas had their own permutation $$$q$$$ of length $$$n$$$. They suggested that you count the number of pairs of integers $$$l, r$$$ ($$$1 \le l \le r \le n$$$) such that $$$\operatorname{MEX}([p_l, p_{l+1}, \ldots, p_r])=\operatorname{MEX}([q_l, q_{l+1}, \ldots, q_r])$$$.The $$$\operatorname{MEX}$$$ of the sequence is the minimum integerpositivenumber missing from this sequence. For example, $$$\operatorname{MEX}([1, 3]) = 2$$$, $$$\operatorname{MEX}([5]) = 1$$$, $$$\operatorname{MEX}([3, 1, 2, 6]) = 4$$$.You do not want to risk your health, so you will not dare to refuse the gorillas.InputThe first line contains a single integer $$$n$$$ ($$$1 \le n \le 2 \cdot 10^5$$$) — the permutations length.The second line contains $$$n$$$ integers $$$p_1, p_2, \ldots, p_n$$$ ($$$1 \le p_i \le n$$$) — the elements of the permutation $$$p$$$.The third line contains $$$n$$$ integers $$$q_1, q_2, \ldots, q_n$$$ ($$$1 \le q_i \le n$$$) — the elements of the permutation $$$q$$$.OutputPrint a single integer — the number of suitable pairs $$$l$$$ and $$$r$$$.ExamplesInput31 3 22 1 3Output2Input77 3 6 2 1 5 46 7 2 5 3 1 4Output16Input61 2 3 4 5 66 5 4 3 2 1Output11NoteIn the first example, two segments are correct – $$$[1, 3]$$$ with $$$\operatorname{MEX}$$$ equal to $$$4$$$ in both arrays and $$$[3, 3]$$$ with $$$\operatorname{MEX}$$$ equal to $$$1$$$ in both of arrays.In the second example, for example, the segment $$$[1, 4]$$$ is correct, and the segment $$$[6, 7]$$$ isn't correct, because $$$\operatorname{MEX}(5, 4) \neq \operatorname{MEX}(1, 4)$$$.



C. Dora and Searchtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputAs you know, the girl Dora is always looking for something. This time she was given a permutation, and she wants to find such a subsegment of it that none of the elements at its ends is either the minimum or the maximum of the entire subsegment. More formally, you are asked to find the numbers $$$l$$$ and $$$r$$$ $$$(1 \leq l \leq r \leq n)$$$ such that $$$a_l \neq \min(a_l, a_{l + 1}, \ldots, a_r)$$$, $$$a_l \neq \max(a_l, a_{l + 1}, \ldots, a_r)$$$ and $$$a_r \neq \min(a_l, a_{l + 1}, \ldots, a_r)$$$, $$$a_r \neq \max(a_l, a_{l + 1}, \ldots, a_r)$$$.A permutation of length $$$n$$$ is an array consisting of $$$n$$$ distinct integers from $$$1$$$ to $$$n$$$ in any order. For example, $$$[2,3,1,5,4]$$$ is a permutation, but $$$[1,2,2]$$$ is not a permutation ($$$2$$$ occurs twice in the array) and $$$[1,3,4]$$$ is also not a permutation ($$$n=3$$$, but $$$4$$$ is present in the array).Help Dora find such a subsegment, or tell her that such a subsegment does not exist.InputEach test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \leq t \leq 10^4$$$) — the number of test cases. Description of the test cases follows.For each test case, the first line contains one integer $$$n$$$ ($$$1 \leq n \leq 2 \cdot 10^5$$$) — the length of permutation.The second line contains $$$n$$$ distinct integers $$$a_1, a_2, \ldots, a_n$$$ ($$$1 \leq a_i \leq n$$$) — the elements of permutation.It is guarented that the sum of $$$n$$$ over all test cases doesn't exceed $$$2 \cdot 10^5$$$.OutputFor each test case, output $$$-1$$$ if the desired subsegment does not exist.Otherwise, output two indexes $$$l, r$$$ such that $$$[a_{l}, a_{l + 1}, \ldots, a_{r}]$$$ satisfies all conditions.If there are several solutions, then output any of them.ExampleInput431 2 342 1 4 371 3 2 4 6 5 762 3 6 5 4 1Output-1
1 4
2 6
-1NoteIn the first and fourth test cases, it can be shown that there are no desired subsegments.In the second test case, the subsegment $$$[1, 4]$$$ satisfies all the conditions, because $$$\max(a_1, a_2, a_3, a_4) = 4, \min(a_1, a_2, a_3, a_4) = 1$$$, as we see, all the conditions are met.In the third test case, the subsegment $$$[2, 6]$$$ also satisfies all the conditions described.



On Page -> 3

B. Fedya and Arraytime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputFor his birthday recently Fedya was given an array $$$a$$$ of $$$n$$$ integers arranged in a circle, For each pair of neighboring numbers ($$$a_1$$$ and $$$a_2$$$, $$$a_2$$$ and $$$a_3$$$, $$$\ldots$$$, $$$a_{n - 1}$$$ and $$$a_n$$$, $$$a_n$$$ and $$$a_1$$$) the absolute difference between them is equal to $$$1$$$.Let's call alocal maximuman element, which is greater than both of its neighboring elements. Also call alocal minimuman element, which is less than both of its neighboring elements. Note, that elements $$$a_1$$$ and $$$a_n$$$ are neighboring elements.Unfortunately, Fedya lost an array, but he remembered in it the sum of local maximums $$$x$$$ and the sum of local minimums $$$y$$$.Given $$$x$$$ and $$$y$$$, help Fedya find any matching array ofminimumlength.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 1000$$$). Description of the test cases follows.Each line of each test case contain two integers $$$x$$$ and $$$y$$$ ($$$-10^{9} \le y < x \le 10^{9}$$$) — the sum of local maximums and the sum of local minimums, respectively.OutputFor each test case, in the first line print one integer $$$n$$$ — the minimum length of matching arrays.In the second line print $$$n$$$ integers $$$a_1, a_2, \ldots, a_n$$$ ($$$-10^{9} \leqslant a_i \leqslant 10^{9}$$$) — the array elements such that the the absolute difference between each pair of neighboring is equal to $$$1$$$.If there are multiple solutions, print any of them.It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \cdot 10^{5}$$$.ExampleInput43 -24 -42 -15 -3Output10
0 1 2 1 0 -1 0 -1 0 1
16
-2 -1 -2 -1 0 1 2 3 4 5 4 3 2 1 0 -1 
6
1 0 -1 0 1 0
16
2 3 2 1 0 -1 0 -1 0 -1 0 1 2 1 0 1NoteIn the first test case, the local maximums are the numbers at $$$3, 7$$$ and $$$10$$$ positions, and the local minimums are the numbers at $$$1, 6$$$ and $$$8$$$ positions. $$$x = a_3 + a_7 + a_{10} = 2 + 0 + 1 = 3$$$, $$$y = a_1 + a_6 + a_8 = 0 + (-1) + (-1) = -2$$$.In the second test case, the local maximums are the numbers at $$$2$$$ and $$$10$$$ positions, and the local minimums are the numbers at $$$1$$$ and $$$3$$$ positions. $$$x = a_2 + a_{10} = -1 + 5 = 4$$$, $$$y = a_1 + a_3 = -2 + (-2) = -4$$$.In the third test case, the local maximums are the numbers at $$$1$$$ and $$$5$$$ positions, and the local minimums are the numbers at $$$3$$$ and $$$6$$$ positions.



A. Yet Another Promotiontime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputThe famous store "Second Food" sells groceries only two days a month. And the prices in each of days differ. You wanted to buy $$$n$$$ kilos of potatoes for a month. You know that on the first day of the month $$$1$$$ kilo of potatoes costs $$$a$$$ coins, and on the second day $$$b$$$ coins. In "Second Food" you can buy anyintegerkilograms of potatoes.Fortunately, "Second Food" has announced a promotion for potatoes, which is valid only on the first day of the month — for each $$$m$$$ kilos of potatoes you buy, you get $$$1$$$ kilo as a gift! In other words, you can get $$$m + 1$$$ kilograms by paying for $$$m$$$ kilograms.Find the minimum number of coins that you have to spend to buyat least$$$n$$$ kilos of potatoes.InputEach test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \le t \le 10\,000$$$). Description of the test cases follows.The first line of each test case contains two integers $$$a$$$ and $$$b$$$ $$$(1 \leq a, b \leq 10^9)$$$ — the prices of $$$1$$$ kilo of potatoes on the first and second days, respectively.The second line contains two integers $$$n$$$ and $$$m$$$ $$$(1 \leq n, m \leq 10^9)$$$ — the required amount of potatoes to buy and the amount of potatoes to use the promotion.OutputFor each test case print one integer — the minimum number of coins that you have to pay to buy at least $$$n$$$ kilos of potatoes.ExampleInput55 43 15 43 23 43 520 1510 21000000000 9000000001000000000 8Output9
10
9
135
888888888900000000NoteIn the first test case, on the first day you buy $$$1$$$ kilo and get $$$1$$$ more for a promotion. On the second day, you can buy $$$1$$$ kilo of potatoes. Thus, you will spend $$$5+4=9$$$ coins in total.In the second test case, on the first day you buy $$$2$$$ kilo and get another $$$1$$$ more for a promotion. This way you will spend $$$2 \cdot 5 = 10$$$ coins.



F2. Graph Coloring (hard version)time limit per test5.5 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputThe only difference between the easy and the hard version is the constraint on $$$n$$$.You are given an undirected complete graph on $$$n$$$ vertices. A complete graph is a graph where each pair of vertices is connected by an edge. You have to paint the edges of the graph into two colors, red and blue (each edge will have one color).A set of vertices $$$S$$$ isred-connectedif, for every pair of vertices $$$(v_1, v_2)$$$ such that $$$v_1 \in S$$$ and $$$v_2 \in S$$$, there exists a path from $$$v_1$$$ to $$$v_2$$$ that goes only through red edges and vertices from $$$S$$$. Similarly, a set of vertices $$$S$$$ isblue-connectedif, for every pair of vertices $$$(v_1, v_2)$$$ such that $$$v_1 \in S$$$ and $$$v_2 \in S$$$, there exists a path from $$$v_1$$$ to $$$v_2$$$ that goes only through blue edges and vertices from $$$S$$$.You have to paint the graph in such a way that:there is at least one red edge;there is at least one blue edge;for each set of vertices $$$S$$$ such that $$$|S| \ge 2$$$, $$$S$$$ is either red-connected or blue-connected, butnot both.Calculate the number of ways to paint the graph, and print it modulo $$$998244353$$$.InputThe first (and only) line contains one integer $$$n$$$ ($$$3 \le n \le 5 \cdot 10^4$$$).OutputPrint one integer — the number of ways to paint the graph, taken modulo $$$998244353$$$.ExamplesInput3Output6Input4Output50Input100Output878752271Input1337Output520628749Input42013Output906821221



F1. Graph Coloring (easy version)time limit per test5.5 secondsmemory limit per test512 megabytesinputstandard inputoutputstandard outputThe only difference between the easy and the hard version is the constraint on $$$n$$$.You are given an undirected complete graph on $$$n$$$ vertices. A complete graph is a graph where each pair of vertices is connected by an edge. You have to paint the edges of the graph into two colors, red and blue (each edge will have one color).A set of vertices $$$S$$$ isred-connectedif, for every pair of vertices $$$(v_1, v_2)$$$ such that $$$v_1 \in S$$$ and $$$v_2 \in S$$$, there exists a path from $$$v_1$$$ to $$$v_2$$$ that goes only through red edges and vertices from $$$S$$$. Similarly, a set of vertices $$$S$$$ isblue-connectedif, for every pair of vertices $$$(v_1, v_2)$$$ such that $$$v_1 \in S$$$ and $$$v_2 \in S$$$, there exists a path from $$$v_1$$$ to $$$v_2$$$ that goes only through blue edges and vertices from $$$S$$$.You have to paint the graph in such a way that:there is at least one red edge;there is at least one blue edge;for each set of vertices $$$S$$$ such that $$$|S| \ge 2$$$, $$$S$$$ is either red-connected or blue-connected, butnot both.Calculate the number of ways to paint the graph, and print it modulo $$$998244353$$$.InputThe first (and only) line contains one integer $$$n$$$ ($$$3 \le n \le 5 \cdot 10^3$$$).OutputPrint one integer — the number of ways to paint the graph, taken modulo $$$998244353$$$.ExamplesInput3Output6Input4Output50Input100Output878752271Input1337Output520628749



